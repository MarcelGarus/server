<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1222" fill="#fffbed"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1205.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1205.00"> </text><svg id="frames" x="10" width="1180" total_samples="133390"><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (23 samples, 0.02%)</title><rect x="0.0255%" y="885" width="0.0172%" height="15" fill="rgb(227,0,7)" fg:x="34" fg:w="23"/><text x="0.2755%" y="895.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (30 samples, 0.02%)</title><rect x="0.0465%" y="869" width="0.0225%" height="15" fill="rgb(217,0,24)" fg:x="62" fg:w="30"/><text x="0.2965%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (17 samples, 0.01%)</title><rect x="0.0750%" y="773" width="0.0127%" height="15" fill="rgb(221,193,54)" fg:x="100" fg:w="17"/><text x="0.3250%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.01%)</title><rect x="0.0750%" y="757" width="0.0127%" height="15" fill="rgb(248,212,6)" fg:x="100" fg:w="17"/><text x="0.3250%" y="767.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (17 samples, 0.01%)</title><rect x="0.0750%" y="741" width="0.0127%" height="15" fill="rgb(208,68,35)" fg:x="100" fg:w="17"/><text x="0.3250%" y="751.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (17 samples, 0.01%)</title><rect x="0.0750%" y="725" width="0.0127%" height="15" fill="rgb(232,128,0)" fg:x="100" fg:w="17"/><text x="0.3250%" y="735.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (17 samples, 0.01%)</title><rect x="0.0750%" y="709" width="0.0127%" height="15" fill="rgb(207,160,47)" fg:x="100" fg:w="17"/><text x="0.3250%" y="719.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (17 samples, 0.01%)</title><rect x="0.0750%" y="693" width="0.0127%" height="15" fill="rgb(228,23,34)" fg:x="100" fg:w="17"/><text x="0.3250%" y="703.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (17 samples, 0.01%)</title><rect x="0.0750%" y="677" width="0.0127%" height="15" fill="rgb(218,30,26)" fg:x="100" fg:w="17"/><text x="0.3250%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (17 samples, 0.01%)</title><rect x="0.0750%" y="661" width="0.0127%" height="15" fill="rgb(220,122,19)" fg:x="100" fg:w="17"/><text x="0.3250%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (17 samples, 0.01%)</title><rect x="0.0750%" y="645" width="0.0127%" height="15" fill="rgb(250,228,42)" fg:x="100" fg:w="17"/><text x="0.3250%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 0.01%)</title><rect x="0.0750%" y="629" width="0.0127%" height="15" fill="rgb(240,193,28)" fg:x="100" fg:w="17"/><text x="0.3250%" y="639.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="0.0750%" y="837" width="0.0157%" height="15" fill="rgb(216,20,37)" fg:x="100" fg:w="21"/><text x="0.3250%" y="847.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="0.0750%" y="821" width="0.0157%" height="15" fill="rgb(206,188,39)" fg:x="100" fg:w="21"/><text x="0.3250%" y="831.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="0.0750%" y="805" width="0.0157%" height="15" fill="rgb(217,207,13)" fg:x="100" fg:w="21"/><text x="0.3250%" y="815.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="0.0750%" y="789" width="0.0157%" height="15" fill="rgb(231,73,38)" fg:x="100" fg:w="21"/><text x="0.3250%" y="799.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="0.0937%" y="789" width="0.0135%" height="15" fill="rgb(225,20,46)" fg:x="125" fg:w="18"/><text x="0.3437%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (33 samples, 0.02%)</title><rect x="0.0915%" y="837" width="0.0247%" height="15" fill="rgb(210,31,41)" fg:x="122" fg:w="33"/><text x="0.3415%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (33 samples, 0.02%)</title><rect x="0.0915%" y="821" width="0.0247%" height="15" fill="rgb(221,200,47)" fg:x="122" fg:w="33"/><text x="0.3415%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (33 samples, 0.02%)</title><rect x="0.0915%" y="805" width="0.0247%" height="15" fill="rgb(226,26,5)" fg:x="122" fg:w="33"/><text x="0.3415%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.01%)</title><rect x="0.1207%" y="613" width="0.0120%" height="15" fill="rgb(249,33,26)" fg:x="161" fg:w="16"/><text x="0.3707%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.01%)</title><rect x="0.1214%" y="597" width="0.0112%" height="15" fill="rgb(235,183,28)" fg:x="162" fg:w="15"/><text x="0.3714%" y="607.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.02%)</title><rect x="0.1177%" y="693" width="0.0217%" height="15" fill="rgb(221,5,38)" fg:x="157" fg:w="29"/><text x="0.3677%" y="703.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (25 samples, 0.02%)</title><rect x="0.1207%" y="677" width="0.0187%" height="15" fill="rgb(247,18,42)" fg:x="161" fg:w="25"/><text x="0.3707%" y="687.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (25 samples, 0.02%)</title><rect x="0.1207%" y="661" width="0.0187%" height="15" fill="rgb(241,131,45)" fg:x="161" fg:w="25"/><text x="0.3707%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (25 samples, 0.02%)</title><rect x="0.1207%" y="645" width="0.0187%" height="15" fill="rgb(249,31,29)" fg:x="161" fg:w="25"/><text x="0.3707%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (25 samples, 0.02%)</title><rect x="0.1207%" y="629" width="0.0187%" height="15" fill="rgb(225,111,53)" fg:x="161" fg:w="25"/><text x="0.3707%" y="639.50"></text></g><g><title>hashbrown::map::make_insert_hash (15 samples, 0.01%)</title><rect x="0.1394%" y="613" width="0.0112%" height="15" fill="rgb(238,160,17)" fg:x="186" fg:w="15"/><text x="0.3894%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.01%)</title><rect x="0.1394%" y="597" width="0.0112%" height="15" fill="rgb(214,148,48)" fg:x="186" fg:w="15"/><text x="0.3894%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (26 samples, 0.02%)</title><rect x="0.1627%" y="597" width="0.0195%" height="15" fill="rgb(232,36,49)" fg:x="217" fg:w="26"/><text x="0.4127%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (26 samples, 0.02%)</title><rect x="0.1627%" y="581" width="0.0195%" height="15" fill="rgb(209,103,24)" fg:x="217" fg:w="26"/><text x="0.4127%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (26 samples, 0.02%)</title><rect x="0.1627%" y="565" width="0.0195%" height="15" fill="rgb(229,88,8)" fg:x="217" fg:w="26"/><text x="0.4127%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (26 samples, 0.02%)</title><rect x="0.1627%" y="549" width="0.0195%" height="15" fill="rgb(213,181,19)" fg:x="217" fg:w="26"/><text x="0.4127%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (92 samples, 0.07%)</title><rect x="0.1177%" y="725" width="0.0690%" height="15" fill="rgb(254,191,54)" fg:x="157" fg:w="92"/><text x="0.3677%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (92 samples, 0.07%)</title><rect x="0.1177%" y="709" width="0.0690%" height="15" fill="rgb(241,83,37)" fg:x="157" fg:w="92"/><text x="0.3677%" y="719.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (63 samples, 0.05%)</title><rect x="0.1394%" y="693" width="0.0472%" height="15" fill="rgb(233,36,39)" fg:x="186" fg:w="63"/><text x="0.3894%" y="703.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (63 samples, 0.05%)</title><rect x="0.1394%" y="677" width="0.0472%" height="15" fill="rgb(226,3,54)" fg:x="186" fg:w="63"/><text x="0.3894%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (63 samples, 0.05%)</title><rect x="0.1394%" y="661" width="0.0472%" height="15" fill="rgb(245,192,40)" fg:x="186" fg:w="63"/><text x="0.3894%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (63 samples, 0.05%)</title><rect x="0.1394%" y="645" width="0.0472%" height="15" fill="rgb(238,167,29)" fg:x="186" fg:w="63"/><text x="0.3894%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (63 samples, 0.05%)</title><rect x="0.1394%" y="629" width="0.0472%" height="15" fill="rgb(232,182,51)" fg:x="186" fg:w="63"/><text x="0.3894%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (38 samples, 0.03%)</title><rect x="0.1582%" y="613" width="0.0285%" height="15" fill="rgb(231,60,39)" fg:x="211" fg:w="38"/><text x="0.4082%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (94 samples, 0.07%)</title><rect x="0.1177%" y="757" width="0.0705%" height="15" fill="rgb(208,69,12)" fg:x="157" fg:w="94"/><text x="0.3677%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (94 samples, 0.07%)</title><rect x="0.1177%" y="741" width="0.0705%" height="15" fill="rgb(235,93,37)" fg:x="157" fg:w="94"/><text x="0.3677%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (98 samples, 0.07%)</title><rect x="0.1162%" y="837" width="0.0735%" height="15" fill="rgb(213,116,39)" fg:x="155" fg:w="98"/><text x="0.3662%" y="847.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (98 samples, 0.07%)</title><rect x="0.1162%" y="821" width="0.0735%" height="15" fill="rgb(222,207,29)" fg:x="155" fg:w="98"/><text x="0.3662%" y="831.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (98 samples, 0.07%)</title><rect x="0.1162%" y="805" width="0.0735%" height="15" fill="rgb(206,96,30)" fg:x="155" fg:w="98"/><text x="0.3662%" y="815.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (98 samples, 0.07%)</title><rect x="0.1162%" y="789" width="0.0735%" height="15" fill="rgb(218,138,4)" fg:x="155" fg:w="98"/><text x="0.3662%" y="799.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (98 samples, 0.07%)</title><rect x="0.1162%" y="773" width="0.0735%" height="15" fill="rgb(250,191,14)" fg:x="155" fg:w="98"/><text x="0.3662%" y="783.50"></text></g><g><title>itertools::Itertools::collect_vec (19 samples, 0.01%)</title><rect x="0.1919%" y="837" width="0.0142%" height="15" fill="rgb(239,60,40)" fg:x="256" fg:w="19"/><text x="0.4419%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (19 samples, 0.01%)</title><rect x="0.1919%" y="821" width="0.0142%" height="15" fill="rgb(206,27,48)" fg:x="256" fg:w="19"/><text x="0.4419%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (19 samples, 0.01%)</title><rect x="0.1919%" y="805" width="0.0142%" height="15" fill="rgb(225,35,8)" fg:x="256" fg:w="19"/><text x="0.4419%" y="815.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (189 samples, 0.14%)</title><rect x="0.0712%" y="853" width="0.1417%" height="15" fill="rgb(250,213,24)" fg:x="95" fg:w="189"/><text x="0.3212%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (15 samples, 0.01%)</title><rect x="0.2129%" y="741" width="0.0112%" height="15" fill="rgb(247,123,22)" fg:x="284" fg:w="15"/><text x="0.4629%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (15 samples, 0.01%)</title><rect x="0.2129%" y="725" width="0.0112%" height="15" fill="rgb(231,138,38)" fg:x="284" fg:w="15"/><text x="0.4629%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (23 samples, 0.02%)</title><rect x="0.2129%" y="853" width="0.0172%" height="15" fill="rgb(231,145,46)" fg:x="284" fg:w="23"/><text x="0.4629%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (23 samples, 0.02%)</title><rect x="0.2129%" y="837" width="0.0172%" height="15" fill="rgb(251,118,11)" fg:x="284" fg:w="23"/><text x="0.4629%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (23 samples, 0.02%)</title><rect x="0.2129%" y="821" width="0.0172%" height="15" fill="rgb(217,147,25)" fg:x="284" fg:w="23"/><text x="0.4629%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (23 samples, 0.02%)</title><rect x="0.2129%" y="805" width="0.0172%" height="15" fill="rgb(247,81,37)" fg:x="284" fg:w="23"/><text x="0.4629%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.02%)</title><rect x="0.2129%" y="789" width="0.0172%" height="15" fill="rgb(209,12,38)" fg:x="284" fg:w="23"/><text x="0.4629%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (23 samples, 0.02%)</title><rect x="0.2129%" y="773" width="0.0172%" height="15" fill="rgb(227,1,9)" fg:x="284" fg:w="23"/><text x="0.4629%" y="783.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (23 samples, 0.02%)</title><rect x="0.2129%" y="757" width="0.0172%" height="15" fill="rgb(248,47,43)" fg:x="284" fg:w="23"/><text x="0.4629%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (16 samples, 0.01%)</title><rect x="0.2669%" y="501" width="0.0120%" height="15" fill="rgb(221,10,30)" fg:x="356" fg:w="16"/><text x="0.5169%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (36 samples, 0.03%)</title><rect x="0.2541%" y="565" width="0.0270%" height="15" fill="rgb(210,229,1)" fg:x="339" fg:w="36"/><text x="0.5041%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (36 samples, 0.03%)</title><rect x="0.2541%" y="549" width="0.0270%" height="15" fill="rgb(222,148,37)" fg:x="339" fg:w="36"/><text x="0.5041%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (36 samples, 0.03%)</title><rect x="0.2541%" y="533" width="0.0270%" height="15" fill="rgb(234,67,33)" fg:x="339" fg:w="36"/><text x="0.5041%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (28 samples, 0.02%)</title><rect x="0.2601%" y="517" width="0.0210%" height="15" fill="rgb(247,98,35)" fg:x="347" fg:w="28"/><text x="0.5101%" y="527.50"></text></g><g><title>hashbrown::map::make_insert_hash (63 samples, 0.05%)</title><rect x="0.2489%" y="597" width="0.0472%" height="15" fill="rgb(247,138,52)" fg:x="332" fg:w="63"/><text x="0.4989%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (62 samples, 0.05%)</title><rect x="0.2496%" y="581" width="0.0465%" height="15" fill="rgb(213,79,30)" fg:x="333" fg:w="62"/><text x="0.4996%" y="591.50"></text></g><g><title>hashbrown::raw::h2 (21 samples, 0.02%)</title><rect x="0.3156%" y="549" width="0.0157%" height="15" fill="rgb(246,177,23)" fg:x="421" fg:w="21"/><text x="0.5656%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (52 samples, 0.04%)</title><rect x="0.2961%" y="597" width="0.0390%" height="15" fill="rgb(230,62,27)" fg:x="395" fg:w="52"/><text x="0.5461%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (52 samples, 0.04%)</title><rect x="0.2961%" y="581" width="0.0390%" height="15" fill="rgb(216,154,8)" fg:x="395" fg:w="52"/><text x="0.5461%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (52 samples, 0.04%)</title><rect x="0.2961%" y="565" width="0.0390%" height="15" fill="rgb(244,35,45)" fg:x="395" fg:w="52"/><text x="0.5461%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (22 samples, 0.02%)</title><rect x="0.3411%" y="581" width="0.0165%" height="15" fill="rgb(251,115,12)" fg:x="455" fg:w="22"/><text x="0.5911%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (154 samples, 0.12%)</title><rect x="0.2474%" y="757" width="0.1155%" height="15" fill="rgb(240,54,50)" fg:x="330" fg:w="154"/><text x="0.4974%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (153 samples, 0.11%)</title><rect x="0.2481%" y="741" width="0.1147%" height="15" fill="rgb(233,84,52)" fg:x="331" fg:w="153"/><text x="0.4981%" y="751.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (153 samples, 0.11%)</title><rect x="0.2481%" y="725" width="0.1147%" height="15" fill="rgb(207,117,47)" fg:x="331" fg:w="153"/><text x="0.4981%" y="735.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (153 samples, 0.11%)</title><rect x="0.2481%" y="709" width="0.1147%" height="15" fill="rgb(249,43,39)" fg:x="331" fg:w="153"/><text x="0.4981%" y="719.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (153 samples, 0.11%)</title><rect x="0.2481%" y="693" width="0.1147%" height="15" fill="rgb(209,38,44)" fg:x="331" fg:w="153"/><text x="0.4981%" y="703.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (152 samples, 0.11%)</title><rect x="0.2489%" y="677" width="0.1140%" height="15" fill="rgb(236,212,23)" fg:x="332" fg:w="152"/><text x="0.4989%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (152 samples, 0.11%)</title><rect x="0.2489%" y="661" width="0.1140%" height="15" fill="rgb(242,79,21)" fg:x="332" fg:w="152"/><text x="0.4989%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (152 samples, 0.11%)</title><rect x="0.2489%" y="645" width="0.1140%" height="15" fill="rgb(211,96,35)" fg:x="332" fg:w="152"/><text x="0.4989%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (152 samples, 0.11%)</title><rect x="0.2489%" y="629" width="0.1140%" height="15" fill="rgb(253,215,40)" fg:x="332" fg:w="152"/><text x="0.4989%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (152 samples, 0.11%)</title><rect x="0.2489%" y="613" width="0.1140%" height="15" fill="rgb(211,81,21)" fg:x="332" fg:w="152"/><text x="0.4989%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (37 samples, 0.03%)</title><rect x="0.3351%" y="597" width="0.0277%" height="15" fill="rgb(208,190,38)" fg:x="447" fg:w="37"/><text x="0.5851%" y="607.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (180 samples, 0.13%)</title><rect x="0.2459%" y="821" width="0.1349%" height="15" fill="rgb(235,213,38)" fg:x="328" fg:w="180"/><text x="0.4959%" y="831.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (178 samples, 0.13%)</title><rect x="0.2474%" y="805" width="0.1334%" height="15" fill="rgb(237,122,38)" fg:x="330" fg:w="178"/><text x="0.4974%" y="815.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (178 samples, 0.13%)</title><rect x="0.2474%" y="789" width="0.1334%" height="15" fill="rgb(244,218,35)" fg:x="330" fg:w="178"/><text x="0.4974%" y="799.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (178 samples, 0.13%)</title><rect x="0.2474%" y="773" width="0.1334%" height="15" fill="rgb(240,68,47)" fg:x="330" fg:w="178"/><text x="0.4974%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (24 samples, 0.02%)</title><rect x="0.3628%" y="757" width="0.0180%" height="15" fill="rgb(210,16,53)" fg:x="484" fg:w="24"/><text x="0.6128%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="0.3628%" y="741" width="0.0180%" height="15" fill="rgb(235,124,12)" fg:x="484" fg:w="24"/><text x="0.6128%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.02%)</title><rect x="0.3636%" y="725" width="0.0172%" height="15" fill="rgb(224,169,11)" fg:x="485" fg:w="23"/><text x="0.6136%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (22 samples, 0.02%)</title><rect x="0.3643%" y="709" width="0.0165%" height="15" fill="rgb(250,166,2)" fg:x="486" fg:w="22"/><text x="0.6143%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (22 samples, 0.02%)</title><rect x="0.3643%" y="693" width="0.0165%" height="15" fill="rgb(242,216,29)" fg:x="486" fg:w="22"/><text x="0.6143%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (14 samples, 0.01%)</title><rect x="0.3703%" y="677" width="0.0105%" height="15" fill="rgb(230,116,27)" fg:x="494" fg:w="14"/><text x="0.6203%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (14 samples, 0.01%)</title><rect x="0.3703%" y="661" width="0.0105%" height="15" fill="rgb(228,99,48)" fg:x="494" fg:w="14"/><text x="0.6203%" y="671.50"></text></g><g><title>__GI___libc_malloc (39 samples, 0.03%)</title><rect x="0.4423%" y="645" width="0.0292%" height="15" fill="rgb(253,11,6)" fg:x="590" fg:w="39"/><text x="0.6923%" y="655.50"></text></g><g><title>tcache_get (21 samples, 0.02%)</title><rect x="0.4558%" y="629" width="0.0157%" height="15" fill="rgb(247,143,39)" fg:x="608" fg:w="21"/><text x="0.7058%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (58 samples, 0.04%)</title><rect x="0.4401%" y="757" width="0.0435%" height="15" fill="rgb(236,97,10)" fg:x="587" fg:w="58"/><text x="0.6901%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (58 samples, 0.04%)</title><rect x="0.4401%" y="741" width="0.0435%" height="15" fill="rgb(233,208,19)" fg:x="587" fg:w="58"/><text x="0.6901%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (58 samples, 0.04%)</title><rect x="0.4401%" y="725" width="0.0435%" height="15" fill="rgb(216,164,2)" fg:x="587" fg:w="58"/><text x="0.6901%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (58 samples, 0.04%)</title><rect x="0.4401%" y="709" width="0.0435%" height="15" fill="rgb(220,129,5)" fg:x="587" fg:w="58"/><text x="0.6901%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (58 samples, 0.04%)</title><rect x="0.4401%" y="693" width="0.0435%" height="15" fill="rgb(242,17,10)" fg:x="587" fg:w="58"/><text x="0.6901%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (58 samples, 0.04%)</title><rect x="0.4401%" y="677" width="0.0435%" height="15" fill="rgb(242,107,0)" fg:x="587" fg:w="58"/><text x="0.6901%" y="687.50"></text></g><g><title>alloc::alloc::alloc (56 samples, 0.04%)</title><rect x="0.4416%" y="661" width="0.0420%" height="15" fill="rgb(251,28,31)" fg:x="589" fg:w="56"/><text x="0.6916%" y="671.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 samples, 0.09%)</title><rect x="0.3921%" y="773" width="0.0930%" height="15" fill="rgb(233,223,10)" fg:x="523" fg:w="124"/><text x="0.6421%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (197 samples, 0.15%)</title><rect x="0.3876%" y="821" width="0.1477%" height="15" fill="rgb(215,21,27)" fg:x="517" fg:w="197"/><text x="0.6376%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (197 samples, 0.15%)</title><rect x="0.3876%" y="805" width="0.1477%" height="15" fill="rgb(232,23,21)" fg:x="517" fg:w="197"/><text x="0.6376%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (197 samples, 0.15%)</title><rect x="0.3876%" y="789" width="0.1477%" height="15" fill="rgb(244,5,23)" fg:x="517" fg:w="197"/><text x="0.6376%" y="799.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (67 samples, 0.05%)</title><rect x="0.4850%" y="773" width="0.0502%" height="15" fill="rgb(226,81,46)" fg:x="647" fg:w="67"/><text x="0.7350%" y="783.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}} (67 samples, 0.05%)</title><rect x="0.4850%" y="757" width="0.0502%" height="15" fill="rgb(247,70,30)" fg:x="647" fg:w="67"/><text x="0.7350%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (65 samples, 0.05%)</title><rect x="0.4865%" y="741" width="0.0487%" height="15" fill="rgb(212,68,19)" fg:x="649" fg:w="65"/><text x="0.7365%" y="751.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&gt;::sum (65 samples, 0.05%)</title><rect x="0.4865%" y="725" width="0.0487%" height="15" fill="rgb(240,187,13)" fg:x="649" fg:w="65"/><text x="0.7365%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (65 samples, 0.05%)</title><rect x="0.4865%" y="709" width="0.0487%" height="15" fill="rgb(223,113,26)" fg:x="649" fg:w="65"/><text x="0.7365%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (53 samples, 0.04%)</title><rect x="0.4955%" y="693" width="0.0397%" height="15" fill="rgb(206,192,2)" fg:x="661" fg:w="53"/><text x="0.7455%" y="703.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="0.4955%" y="677" width="0.0397%" height="15" fill="rgb(241,108,4)" fg:x="661" fg:w="53"/><text x="0.7455%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (53 samples, 0.04%)</title><rect x="0.4955%" y="661" width="0.0397%" height="15" fill="rgb(247,173,49)" fg:x="661" fg:w="53"/><text x="0.7455%" y="671.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="0.4955%" y="645" width="0.0397%" height="15" fill="rgb(224,114,35)" fg:x="661" fg:w="53"/><text x="0.7455%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (53 samples, 0.04%)</title><rect x="0.4955%" y="629" width="0.0397%" height="15" fill="rgb(245,159,27)" fg:x="661" fg:w="53"/><text x="0.7455%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="0.4955%" y="613" width="0.0397%" height="15" fill="rgb(245,172,44)" fg:x="661" fg:w="53"/><text x="0.7455%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (53 samples, 0.04%)</title><rect x="0.4955%" y="597" width="0.0397%" height="15" fill="rgb(236,23,11)" fg:x="661" fg:w="53"/><text x="0.7455%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (53 samples, 0.04%)</title><rect x="0.4955%" y="581" width="0.0397%" height="15" fill="rgb(205,117,38)" fg:x="661" fg:w="53"/><text x="0.7455%" y="591.50"></text></g><g><title>_int_free (28 samples, 0.02%)</title><rect x="0.5143%" y="565" width="0.0210%" height="15" fill="rgb(237,72,25)" fg:x="686" fg:w="28"/><text x="0.7643%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (26 samples, 0.02%)</title><rect x="0.5892%" y="501" width="0.0195%" height="15" fill="rgb(244,70,9)" fg:x="786" fg:w="26"/><text x="0.8392%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (53 samples, 0.04%)</title><rect x="0.5720%" y="565" width="0.0397%" height="15" fill="rgb(217,125,39)" fg:x="763" fg:w="53"/><text x="0.8220%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (53 samples, 0.04%)</title><rect x="0.5720%" y="549" width="0.0397%" height="15" fill="rgb(235,36,10)" fg:x="763" fg:w="53"/><text x="0.8220%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (53 samples, 0.04%)</title><rect x="0.5720%" y="533" width="0.0397%" height="15" fill="rgb(251,123,47)" fg:x="763" fg:w="53"/><text x="0.8220%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (36 samples, 0.03%)</title><rect x="0.5848%" y="517" width="0.0270%" height="15" fill="rgb(221,13,13)" fg:x="780" fg:w="36"/><text x="0.8348%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (82 samples, 0.06%)</title><rect x="0.5638%" y="597" width="0.0615%" height="15" fill="rgb(238,131,9)" fg:x="752" fg:w="82"/><text x="0.8138%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (80 samples, 0.06%)</title><rect x="0.5653%" y="581" width="0.0600%" height="15" fill="rgb(211,50,8)" fg:x="754" fg:w="80"/><text x="0.8153%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.01%)</title><rect x="0.6147%" y="565" width="0.0105%" height="15" fill="rgb(245,182,24)" fg:x="820" fg:w="14"/><text x="0.8647%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (14 samples, 0.01%)</title><rect x="0.6147%" y="549" width="0.0105%" height="15" fill="rgb(242,14,37)" fg:x="820" fg:w="14"/><text x="0.8647%" y="559.50"></text></g><g><title>core::hash::Hasher::write_u8 (14 samples, 0.01%)</title><rect x="0.6147%" y="533" width="0.0105%" height="15" fill="rgb(246,228,12)" fg:x="820" fg:w="14"/><text x="0.8647%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 0.11%)</title><rect x="0.5510%" y="677" width="0.1080%" height="15" fill="rgb(213,55,15)" fg:x="735" fg:w="144"/><text x="0.8010%" y="687.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (132 samples, 0.10%)</title><rect x="0.5600%" y="661" width="0.0990%" height="15" fill="rgb(209,9,3)" fg:x="747" fg:w="132"/><text x="0.8100%" y="671.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (132 samples, 0.10%)</title><rect x="0.5600%" y="645" width="0.0990%" height="15" fill="rgb(230,59,30)" fg:x="747" fg:w="132"/><text x="0.8100%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (132 samples, 0.10%)</title><rect x="0.5600%" y="629" width="0.0990%" height="15" fill="rgb(209,121,21)" fg:x="747" fg:w="132"/><text x="0.8100%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (132 samples, 0.10%)</title><rect x="0.5600%" y="613" width="0.0990%" height="15" fill="rgb(220,109,13)" fg:x="747" fg:w="132"/><text x="0.8100%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (45 samples, 0.03%)</title><rect x="0.6252%" y="597" width="0.0337%" height="15" fill="rgb(232,18,1)" fg:x="834" fg:w="45"/><text x="0.8752%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (45 samples, 0.03%)</title><rect x="0.6252%" y="581" width="0.0337%" height="15" fill="rgb(215,41,42)" fg:x="834" fg:w="45"/><text x="0.8752%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (45 samples, 0.03%)</title><rect x="0.6252%" y="565" width="0.0337%" height="15" fill="rgb(224,123,36)" fg:x="834" fg:w="45"/><text x="0.8752%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (21 samples, 0.02%)</title><rect x="0.6785%" y="501" width="0.0157%" height="15" fill="rgb(240,125,3)" fg:x="905" fg:w="21"/><text x="0.9285%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (49 samples, 0.04%)</title><rect x="0.6620%" y="565" width="0.0367%" height="15" fill="rgb(205,98,50)" fg:x="883" fg:w="49"/><text x="0.9120%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (49 samples, 0.04%)</title><rect x="0.6620%" y="549" width="0.0367%" height="15" fill="rgb(205,185,37)" fg:x="883" fg:w="49"/><text x="0.9120%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (49 samples, 0.04%)</title><rect x="0.6620%" y="533" width="0.0367%" height="15" fill="rgb(238,207,15)" fg:x="883" fg:w="49"/><text x="0.9120%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (35 samples, 0.03%)</title><rect x="0.6725%" y="517" width="0.0262%" height="15" fill="rgb(213,199,42)" fg:x="897" fg:w="35"/><text x="0.9225%" y="527.50"></text></g><g><title>hashbrown::map::make_insert_hash (60 samples, 0.04%)</title><rect x="0.6590%" y="597" width="0.0450%" height="15" fill="rgb(235,201,11)" fg:x="879" fg:w="60"/><text x="0.9090%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (60 samples, 0.04%)</title><rect x="0.6590%" y="581" width="0.0450%" height="15" fill="rgb(207,46,11)" fg:x="879" fg:w="60"/><text x="0.9090%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (27 samples, 0.02%)</title><rect x="0.7040%" y="597" width="0.0202%" height="15" fill="rgb(241,35,35)" fg:x="939" fg:w="27"/><text x="0.9540%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (27 samples, 0.02%)</title><rect x="0.7040%" y="581" width="0.0202%" height="15" fill="rgb(243,32,47)" fg:x="939" fg:w="27"/><text x="0.9540%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (27 samples, 0.02%)</title><rect x="0.7040%" y="565" width="0.0202%" height="15" fill="rgb(247,202,23)" fg:x="939" fg:w="27"/><text x="0.9540%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (31 samples, 0.02%)</title><rect x="0.7369%" y="453" width="0.0232%" height="15" fill="rgb(219,102,11)" fg:x="983" fg:w="31"/><text x="0.9869%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (31 samples, 0.02%)</title><rect x="0.7369%" y="437" width="0.0232%" height="15" fill="rgb(243,110,44)" fg:x="983" fg:w="31"/><text x="0.9869%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (31 samples, 0.02%)</title><rect x="0.7369%" y="421" width="0.0232%" height="15" fill="rgb(222,74,54)" fg:x="983" fg:w="31"/><text x="0.9869%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (21 samples, 0.02%)</title><rect x="0.7444%" y="405" width="0.0157%" height="15" fill="rgb(216,99,12)" fg:x="993" fg:w="21"/><text x="0.9944%" y="415.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (49 samples, 0.04%)</title><rect x="0.7332%" y="501" width="0.0367%" height="15" fill="rgb(226,22,26)" fg:x="978" fg:w="49"/><text x="0.9832%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (49 samples, 0.04%)</title><rect x="0.7332%" y="485" width="0.0367%" height="15" fill="rgb(217,163,10)" fg:x="978" fg:w="49"/><text x="0.9832%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (49 samples, 0.04%)</title><rect x="0.7332%" y="469" width="0.0367%" height="15" fill="rgb(213,25,53)" fg:x="978" fg:w="49"/><text x="0.9832%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (52 samples, 0.04%)</title><rect x="0.7332%" y="517" width="0.0390%" height="15" fill="rgb(252,105,26)" fg:x="978" fg:w="52"/><text x="0.9832%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (31 samples, 0.02%)</title><rect x="0.7767%" y="517" width="0.0232%" height="15" fill="rgb(220,39,43)" fg:x="1036" fg:w="31"/><text x="1.0267%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (31 samples, 0.02%)</title><rect x="0.7767%" y="501" width="0.0232%" height="15" fill="rgb(229,68,48)" fg:x="1036" fg:w="31"/><text x="1.0267%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (18 samples, 0.01%)</title><rect x="0.7999%" y="517" width="0.0135%" height="15" fill="rgb(252,8,32)" fg:x="1067" fg:w="18"/><text x="1.0499%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (18 samples, 0.01%)</title><rect x="0.7999%" y="501" width="0.0135%" height="15" fill="rgb(223,20,43)" fg:x="1067" fg:w="18"/><text x="1.0499%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (117 samples, 0.09%)</title><rect x="0.7272%" y="533" width="0.0877%" height="15" fill="rgb(229,81,49)" fg:x="970" fg:w="117"/><text x="0.9772%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (120 samples, 0.09%)</title><rect x="0.7272%" y="581" width="0.0900%" height="15" fill="rgb(236,28,36)" fg:x="970" fg:w="120"/><text x="0.9772%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (120 samples, 0.09%)</title><rect x="0.7272%" y="565" width="0.0900%" height="15" fill="rgb(249,185,26)" fg:x="970" fg:w="120"/><text x="0.9772%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (120 samples, 0.09%)</title><rect x="0.7272%" y="549" width="0.0900%" height="15" fill="rgb(249,174,33)" fg:x="970" fg:w="120"/><text x="0.9772%" y="559.50"></text></g><g><title>hashbrown::raw::is_full (17 samples, 0.01%)</title><rect x="0.8366%" y="565" width="0.0127%" height="15" fill="rgb(233,201,37)" fg:x="1116" fg:w="17"/><text x="1.0866%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (49 samples, 0.04%)</title><rect x="0.8172%" y="581" width="0.0367%" height="15" fill="rgb(221,78,26)" fg:x="1090" fg:w="49"/><text x="1.0672%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (421 samples, 0.32%)</title><rect x="0.5443%" y="709" width="0.3156%" height="15" fill="rgb(250,127,30)" fg:x="726" fg:w="421"/><text x="0.7943%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (412 samples, 0.31%)</title><rect x="0.5510%" y="693" width="0.3089%" height="15" fill="rgb(230,49,44)" fg:x="735" fg:w="412"/><text x="0.8010%" y="703.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (268 samples, 0.20%)</title><rect x="0.6590%" y="677" width="0.2009%" height="15" fill="rgb(229,67,23)" fg:x="879" fg:w="268"/><text x="0.9090%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (268 samples, 0.20%)</title><rect x="0.6590%" y="661" width="0.2009%" height="15" fill="rgb(249,83,47)" fg:x="879" fg:w="268"/><text x="0.9090%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (268 samples, 0.20%)</title><rect x="0.6590%" y="645" width="0.2009%" height="15" fill="rgb(215,43,3)" fg:x="879" fg:w="268"/><text x="0.9090%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (268 samples, 0.20%)</title><rect x="0.6590%" y="629" width="0.2009%" height="15" fill="rgb(238,154,13)" fg:x="879" fg:w="268"/><text x="0.9090%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (268 samples, 0.20%)</title><rect x="0.6590%" y="613" width="0.2009%" height="15" fill="rgb(219,56,2)" fg:x="879" fg:w="268"/><text x="0.9090%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (181 samples, 0.14%)</title><rect x="0.7242%" y="597" width="0.1357%" height="15" fill="rgb(233,0,4)" fg:x="966" fg:w="181"/><text x="0.9742%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (16 samples, 0.01%)</title><rect x="0.8629%" y="597" width="0.0120%" height="15" fill="rgb(235,30,7)" fg:x="1151" fg:w="16"/><text x="1.1129%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (16 samples, 0.01%)</title><rect x="0.8629%" y="581" width="0.0120%" height="15" fill="rgb(250,79,13)" fg:x="1151" fg:w="16"/><text x="1.1129%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (16 samples, 0.01%)</title><rect x="0.8629%" y="565" width="0.0120%" height="15" fill="rgb(211,146,34)" fg:x="1151" fg:w="16"/><text x="1.1129%" y="575.50"></text></g><g><title>hashbrown::map::make_insert_hash (25 samples, 0.02%)</title><rect x="0.8621%" y="629" width="0.0187%" height="15" fill="rgb(228,22,38)" fg:x="1150" fg:w="25"/><text x="1.1121%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.02%)</title><rect x="0.8621%" y="613" width="0.0187%" height="15" fill="rgb(235,168,5)" fg:x="1150" fg:w="25"/><text x="1.1121%" y="623.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (38 samples, 0.03%)</title><rect x="0.8621%" y="693" width="0.0285%" height="15" fill="rgb(221,155,16)" fg:x="1150" fg:w="38"/><text x="1.1121%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (38 samples, 0.03%)</title><rect x="0.8621%" y="677" width="0.0285%" height="15" fill="rgb(215,215,53)" fg:x="1150" fg:w="38"/><text x="1.1121%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (38 samples, 0.03%)</title><rect x="0.8621%" y="661" width="0.0285%" height="15" fill="rgb(223,4,10)" fg:x="1150" fg:w="38"/><text x="1.1121%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 0.03%)</title><rect x="0.8621%" y="645" width="0.0285%" height="15" fill="rgb(234,103,6)" fg:x="1150" fg:w="38"/><text x="1.1121%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (471 samples, 0.35%)</title><rect x="0.5420%" y="741" width="0.3531%" height="15" fill="rgb(227,97,0)" fg:x="723" fg:w="471"/><text x="0.7920%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (469 samples, 0.35%)</title><rect x="0.5435%" y="725" width="0.3516%" height="15" fill="rgb(234,150,53)" fg:x="725" fg:w="469"/><text x="0.7935%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (47 samples, 0.04%)</title><rect x="0.8599%" y="709" width="0.0352%" height="15" fill="rgb(228,201,54)" fg:x="1147" fg:w="47"/><text x="1.1099%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (497 samples, 0.37%)</title><rect x="0.5353%" y="821" width="0.3726%" height="15" fill="rgb(222,22,37)" fg:x="714" fg:w="497"/><text x="0.7853%" y="831.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (497 samples, 0.37%)</title><rect x="0.5353%" y="805" width="0.3726%" height="15" fill="rgb(237,53,32)" fg:x="714" fg:w="497"/><text x="0.7853%" y="815.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (490 samples, 0.37%)</title><rect x="0.5405%" y="789" width="0.3673%" height="15" fill="rgb(233,25,53)" fg:x="721" fg:w="490"/><text x="0.7905%" y="799.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (490 samples, 0.37%)</title><rect x="0.5405%" y="773" width="0.3673%" height="15" fill="rgb(210,40,34)" fg:x="721" fg:w="490"/><text x="0.7905%" y="783.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (490 samples, 0.37%)</title><rect x="0.5405%" y="757" width="0.3673%" height="15" fill="rgb(241,220,44)" fg:x="721" fg:w="490"/><text x="0.7905%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (17 samples, 0.01%)</title><rect x="0.8951%" y="741" width="0.0127%" height="15" fill="rgb(235,28,35)" fg:x="1194" fg:w="17"/><text x="1.1451%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="0.8951%" y="725" width="0.0127%" height="15" fill="rgb(210,56,17)" fg:x="1194" fg:w="17"/><text x="1.1451%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.01%)</title><rect x="0.8951%" y="709" width="0.0127%" height="15" fill="rgb(224,130,29)" fg:x="1194" fg:w="17"/><text x="1.1451%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (16 samples, 0.01%)</title><rect x="0.8959%" y="693" width="0.0120%" height="15" fill="rgb(235,212,8)" fg:x="1195" fg:w="16"/><text x="1.1459%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (16 samples, 0.01%)</title><rect x="0.8959%" y="677" width="0.0120%" height="15" fill="rgb(223,33,50)" fg:x="1195" fg:w="16"/><text x="1.1459%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;,&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="0.9154%" y="821" width="0.0120%" height="15" fill="rgb(219,149,13)" fg:x="1221" fg:w="16"/><text x="1.1654%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="0.9154%" y="805" width="0.0120%" height="15" fill="rgb(250,156,29)" fg:x="1221" fg:w="16"/><text x="1.1654%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 0.03%)</title><rect x="0.9341%" y="773" width="0.0277%" height="15" fill="rgb(216,193,19)" fg:x="1246" fg:w="37"/><text x="1.1841%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (37 samples, 0.03%)</title><rect x="0.9341%" y="757" width="0.0277%" height="15" fill="rgb(216,135,14)" fg:x="1246" fg:w="37"/><text x="1.1841%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (25 samples, 0.02%)</title><rect x="0.9431%" y="741" width="0.0187%" height="15" fill="rgb(241,47,5)" fg:x="1258" fg:w="25"/><text x="1.1931%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (25 samples, 0.02%)</title><rect x="0.9431%" y="725" width="0.0187%" height="15" fill="rgb(233,42,35)" fg:x="1258" fg:w="25"/><text x="1.1931%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25 samples, 0.02%)</title><rect x="0.9431%" y="709" width="0.0187%" height="15" fill="rgb(231,13,6)" fg:x="1258" fg:w="25"/><text x="1.1931%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.02%)</title><rect x="0.9431%" y="693" width="0.0187%" height="15" fill="rgb(207,181,40)" fg:x="1258" fg:w="25"/><text x="1.1931%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.02%)</title><rect x="0.9446%" y="677" width="0.0172%" height="15" fill="rgb(254,173,49)" fg:x="1260" fg:w="23"/><text x="1.1946%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.02%)</title><rect x="0.9446%" y="661" width="0.0172%" height="15" fill="rgb(221,1,38)" fg:x="1260" fg:w="23"/><text x="1.1946%" y="671.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.01%)</title><rect x="0.9483%" y="645" width="0.0135%" height="15" fill="rgb(206,124,46)" fg:x="1265" fg:w="18"/><text x="1.1983%" y="655.50"></text></g><g><title>itertools::Itertools::collect_vec (69 samples, 0.05%)</title><rect x="0.9311%" y="821" width="0.0517%" height="15" fill="rgb(249,21,11)" fg:x="1242" fg:w="69"/><text x="1.1811%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (69 samples, 0.05%)</title><rect x="0.9311%" y="805" width="0.0517%" height="15" fill="rgb(222,201,40)" fg:x="1242" fg:w="69"/><text x="1.1811%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (69 samples, 0.05%)</title><rect x="0.9311%" y="789" width="0.0517%" height="15" fill="rgb(235,61,29)" fg:x="1242" fg:w="69"/><text x="1.1811%" y="799.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (28 samples, 0.02%)</title><rect x="0.9618%" y="773" width="0.0210%" height="15" fill="rgb(219,207,3)" fg:x="1283" fg:w="28"/><text x="1.2118%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (25 samples, 0.02%)</title><rect x="0.9641%" y="757" width="0.0187%" height="15" fill="rgb(222,56,46)" fg:x="1286" fg:w="25"/><text x="1.2141%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;u8&gt;&gt;,&lt;kakuro::game::Input as kakuro::solvers::prioritize::InputExt&gt;::is_possible_solution::{{closure}}&gt;&gt; (14 samples, 0.01%)</title><rect x="0.9723%" y="741" width="0.0105%" height="15" fill="rgb(239,76,54)" fg:x="1297" fg:w="14"/><text x="1.2223%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;u8&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="0.9723%" y="725" width="0.0105%" height="15" fill="rgb(231,124,27)" fg:x="1297" fg:w="14"/><text x="1.2223%" y="735.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.9723%" y="709" width="0.0105%" height="15" fill="rgb(249,195,6)" fg:x="1297" fg:w="14"/><text x="1.2223%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;core::option::Option&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (14 samples, 0.01%)</title><rect x="0.9723%" y="693" width="0.0105%" height="15" fill="rgb(237,174,47)" fg:x="1297" fg:w="14"/><text x="1.2223%" y="703.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.9723%" y="677" width="0.0105%" height="15" fill="rgb(206,201,31)" fg:x="1297" fg:w="14"/><text x="1.2223%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;u8&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="0.9723%" y="661" width="0.0105%" height="15" fill="rgb(231,57,52)" fg:x="1297" fg:w="14"/><text x="1.2223%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.9723%" y="645" width="0.0105%" height="15" fill="rgb(248,177,22)" fg:x="1297" fg:w="14"/><text x="1.2223%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="0.9723%" y="629" width="0.0105%" height="15" fill="rgb(215,211,37)" fg:x="1297" fg:w="14"/><text x="1.2223%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="0.9723%" y="613" width="0.0105%" height="15" fill="rgb(241,128,51)" fg:x="1297" fg:w="14"/><text x="1.2223%" y="623.50"></text></g><g><title>itertools::Itertools::combinations (40 samples, 0.03%)</title><rect x="0.9828%" y="821" width="0.0300%" height="15" fill="rgb(227,165,31)" fg:x="1311" fg:w="40"/><text x="1.2328%" y="831.50"></text></g><g><title>itertools::combinations::combinations (39 samples, 0.03%)</title><rect x="0.9836%" y="805" width="0.0292%" height="15" fill="rgb(228,167,24)" fg:x="1312" fg:w="39"/><text x="1.2336%" y="815.50"></text></g><g><title>itertools::combinations::LazyBuffer&lt;I&gt;::new (25 samples, 0.02%)</title><rect x="0.9941%" y="789" width="0.0187%" height="15" fill="rgb(228,143,12)" fg:x="1326" fg:w="25"/><text x="1.2441%" y="799.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (1,051 samples, 0.79%)</title><rect x="0.2302%" y="837" width="0.7879%" height="15" fill="rgb(249,149,8)" fg:x="307" fg:w="1051"/><text x="0.4802%" y="847.50"></text></g><g><title>alloc::string::String::push_str (23 samples, 0.02%)</title><rect x="1.0226%" y="693" width="0.0172%" height="15" fill="rgb(243,35,44)" fg:x="1364" fg:w="23"/><text x="1.2726%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (23 samples, 0.02%)</title><rect x="1.0226%" y="677" width="0.0172%" height="15" fill="rgb(246,89,9)" fg:x="1364" fg:w="23"/><text x="1.2726%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (23 samples, 0.02%)</title><rect x="1.0226%" y="661" width="0.0172%" height="15" fill="rgb(233,213,13)" fg:x="1364" fg:w="23"/><text x="1.2726%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (23 samples, 0.02%)</title><rect x="1.0226%" y="645" width="0.0172%" height="15" fill="rgb(233,141,41)" fg:x="1364" fg:w="23"/><text x="1.2726%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (84 samples, 0.06%)</title><rect x="1.0226%" y="725" width="0.0630%" height="15" fill="rgb(239,167,4)" fg:x="1364" fg:w="84"/><text x="1.2726%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (84 samples, 0.06%)</title><rect x="1.0226%" y="709" width="0.0630%" height="15" fill="rgb(209,217,16)" fg:x="1364" fg:w="84"/><text x="1.2726%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (61 samples, 0.05%)</title><rect x="1.0398%" y="693" width="0.0457%" height="15" fill="rgb(219,88,35)" fg:x="1387" fg:w="61"/><text x="1.2898%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (61 samples, 0.05%)</title><rect x="1.0398%" y="677" width="0.0457%" height="15" fill="rgb(220,193,23)" fg:x="1387" fg:w="61"/><text x="1.2898%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (61 samples, 0.05%)</title><rect x="1.0398%" y="661" width="0.0457%" height="15" fill="rgb(230,90,52)" fg:x="1387" fg:w="61"/><text x="1.2898%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.05%)</title><rect x="1.0398%" y="645" width="0.0457%" height="15" fill="rgb(252,106,19)" fg:x="1387" fg:w="61"/><text x="1.2898%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (61 samples, 0.05%)</title><rect x="1.0398%" y="629" width="0.0457%" height="15" fill="rgb(206,74,20)" fg:x="1387" fg:w="61"/><text x="1.2898%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (61 samples, 0.05%)</title><rect x="1.0398%" y="613" width="0.0457%" height="15" fill="rgb(230,138,44)" fg:x="1387" fg:w="61"/><text x="1.2898%" y="623.50"></text></g><g><title>_int_free (39 samples, 0.03%)</title><rect x="1.0563%" y="597" width="0.0292%" height="15" fill="rgb(235,182,43)" fg:x="1409" fg:w="39"/><text x="1.3063%" y="607.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.01%)</title><rect x="1.0938%" y="485" width="0.0135%" height="15" fill="rgb(242,16,51)" fg:x="1459" fg:w="18"/><text x="1.3438%" y="495.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (37 samples, 0.03%)</title><rect x="1.0863%" y="709" width="0.0277%" height="15" fill="rgb(248,9,4)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (37 samples, 0.03%)</title><rect x="1.0863%" y="693" width="0.0277%" height="15" fill="rgb(210,31,22)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="703.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (37 samples, 0.03%)</title><rect x="1.0863%" y="677" width="0.0277%" height="15" fill="rgb(239,54,39)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (37 samples, 0.03%)</title><rect x="1.0863%" y="661" width="0.0277%" height="15" fill="rgb(230,99,41)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (37 samples, 0.03%)</title><rect x="1.0863%" y="645" width="0.0277%" height="15" fill="rgb(253,106,12)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (37 samples, 0.03%)</title><rect x="1.0863%" y="629" width="0.0277%" height="15" fill="rgb(213,46,41)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (37 samples, 0.03%)</title><rect x="1.0863%" y="613" width="0.0277%" height="15" fill="rgb(215,133,35)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (37 samples, 0.03%)</title><rect x="1.0863%" y="597" width="0.0277%" height="15" fill="rgb(213,28,5)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (37 samples, 0.03%)</title><rect x="1.0863%" y="581" width="0.0277%" height="15" fill="rgb(215,77,49)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37 samples, 0.03%)</title><rect x="1.0863%" y="565" width="0.0277%" height="15" fill="rgb(248,100,22)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37 samples, 0.03%)</title><rect x="1.0863%" y="549" width="0.0277%" height="15" fill="rgb(208,67,9)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.03%)</title><rect x="1.0863%" y="533" width="0.0277%" height="15" fill="rgb(219,133,21)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.03%)</title><rect x="1.0863%" y="517" width="0.0277%" height="15" fill="rgb(246,46,29)" fg:x="1449" fg:w="37"/><text x="1.3363%" y="527.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.02%)</title><rect x="1.0930%" y="501" width="0.0210%" height="15" fill="rgb(246,185,52)" fg:x="1458" fg:w="28"/><text x="1.3430%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (140 samples, 0.10%)</title><rect x="1.0226%" y="805" width="0.1050%" height="15" fill="rgb(252,136,11)" fg:x="1364" fg:w="140"/><text x="1.2726%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (140 samples, 0.10%)</title><rect x="1.0226%" y="789" width="0.1050%" height="15" fill="rgb(219,138,53)" fg:x="1364" fg:w="140"/><text x="1.2726%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (140 samples, 0.10%)</title><rect x="1.0226%" y="773" width="0.1050%" height="15" fill="rgb(211,51,23)" fg:x="1364" fg:w="140"/><text x="1.2726%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (140 samples, 0.10%)</title><rect x="1.0226%" y="757" width="0.1050%" height="15" fill="rgb(247,221,28)" fg:x="1364" fg:w="140"/><text x="1.2726%" y="767.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (140 samples, 0.10%)</title><rect x="1.0226%" y="741" width="0.1050%" height="15" fill="rgb(251,222,45)" fg:x="1364" fg:w="140"/><text x="1.2726%" y="751.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (56 samples, 0.04%)</title><rect x="1.0855%" y="725" width="0.0420%" height="15" fill="rgb(217,162,53)" fg:x="1448" fg:w="56"/><text x="1.3355%" y="735.50"></text></g><g><title>alloc::fmt::format (18 samples, 0.01%)</title><rect x="1.1140%" y="709" width="0.0135%" height="15" fill="rgb(229,93,14)" fg:x="1486" fg:w="18"/><text x="1.3640%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (17 samples, 0.01%)</title><rect x="1.1148%" y="693" width="0.0127%" height="15" fill="rgb(209,67,49)" fg:x="1487" fg:w="17"/><text x="1.3648%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (145 samples, 0.11%)</title><rect x="1.0226%" y="837" width="0.1087%" height="15" fill="rgb(213,87,29)" fg:x="1364" fg:w="145"/><text x="1.2726%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (145 samples, 0.11%)</title><rect x="1.0226%" y="821" width="0.1087%" height="15" fill="rgb(205,151,52)" fg:x="1364" fg:w="145"/><text x="1.2726%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="1.1358%" y="805" width="0.0120%" height="15" fill="rgb(253,215,39)" fg:x="1515" fg:w="16"/><text x="1.3858%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="1.1365%" y="789" width="0.0112%" height="15" fill="rgb(221,220,41)" fg:x="1516" fg:w="15"/><text x="1.3865%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="1.1365%" y="773" width="0.0112%" height="15" fill="rgb(218,133,21)" fg:x="1516" fg:w="15"/><text x="1.3865%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="1.1365%" y="757" width="0.0112%" height="15" fill="rgb(221,193,43)" fg:x="1516" fg:w="15"/><text x="1.3865%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (18 samples, 0.01%)</title><rect x="1.1725%" y="485" width="0.0135%" height="15" fill="rgb(240,128,52)" fg:x="1564" fg:w="18"/><text x="1.4225%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (46 samples, 0.03%)</title><rect x="1.1583%" y="549" width="0.0345%" height="15" fill="rgb(253,114,12)" fg:x="1545" fg:w="46"/><text x="1.4083%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (46 samples, 0.03%)</title><rect x="1.1583%" y="533" width="0.0345%" height="15" fill="rgb(215,223,47)" fg:x="1545" fg:w="46"/><text x="1.4083%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (46 samples, 0.03%)</title><rect x="1.1583%" y="517" width="0.0345%" height="15" fill="rgb(248,225,23)" fg:x="1545" fg:w="46"/><text x="1.4083%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (33 samples, 0.02%)</title><rect x="1.1680%" y="501" width="0.0247%" height="15" fill="rgb(250,108,0)" fg:x="1558" fg:w="33"/><text x="1.4180%" y="511.50"></text></g><g><title>hashbrown::map::make_insert_hash (68 samples, 0.05%)</title><rect x="1.1538%" y="581" width="0.0510%" height="15" fill="rgb(228,208,7)" fg:x="1539" fg:w="68"/><text x="1.4038%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (64 samples, 0.05%)</title><rect x="1.1568%" y="565" width="0.0480%" height="15" fill="rgb(244,45,10)" fg:x="1543" fg:w="64"/><text x="1.4068%" y="575.50"></text></g><g><title>hashbrown::raw::h2 (19 samples, 0.01%)</title><rect x="1.2235%" y="533" width="0.0142%" height="15" fill="rgb(207,125,25)" fg:x="1632" fg:w="19"/><text x="1.4735%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (47 samples, 0.04%)</title><rect x="1.2047%" y="581" width="0.0352%" height="15" fill="rgb(210,195,18)" fg:x="1607" fg:w="47"/><text x="1.4547%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (47 samples, 0.04%)</title><rect x="1.2047%" y="565" width="0.0352%" height="15" fill="rgb(249,80,12)" fg:x="1607" fg:w="47"/><text x="1.4547%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (47 samples, 0.04%)</title><rect x="1.2047%" y="549" width="0.0352%" height="15" fill="rgb(221,65,9)" fg:x="1607" fg:w="47"/><text x="1.4547%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (41 samples, 0.03%)</title><rect x="1.2467%" y="565" width="0.0307%" height="15" fill="rgb(235,49,36)" fg:x="1663" fg:w="41"/><text x="1.4967%" y="575.50"></text></g><g><title>hashbrown::raw::is_full (19 samples, 0.01%)</title><rect x="1.2632%" y="549" width="0.0142%" height="15" fill="rgb(225,32,20)" fg:x="1685" fg:w="19"/><text x="1.5132%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (185 samples, 0.14%)</title><rect x="1.1493%" y="741" width="0.1387%" height="15" fill="rgb(215,141,46)" fg:x="1533" fg:w="185"/><text x="1.3993%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (185 samples, 0.14%)</title><rect x="1.1493%" y="725" width="0.1387%" height="15" fill="rgb(250,160,47)" fg:x="1533" fg:w="185"/><text x="1.3993%" y="735.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (184 samples, 0.14%)</title><rect x="1.1500%" y="709" width="0.1379%" height="15" fill="rgb(216,222,40)" fg:x="1534" fg:w="184"/><text x="1.4000%" y="719.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (184 samples, 0.14%)</title><rect x="1.1500%" y="693" width="0.1379%" height="15" fill="rgb(234,217,39)" fg:x="1534" fg:w="184"/><text x="1.4000%" y="703.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (184 samples, 0.14%)</title><rect x="1.1500%" y="677" width="0.1379%" height="15" fill="rgb(207,178,40)" fg:x="1534" fg:w="184"/><text x="1.4000%" y="687.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (179 samples, 0.13%)</title><rect x="1.1538%" y="661" width="0.1342%" height="15" fill="rgb(221,136,13)" fg:x="1539" fg:w="179"/><text x="1.4038%" y="671.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (179 samples, 0.13%)</title><rect x="1.1538%" y="645" width="0.1342%" height="15" fill="rgb(249,199,10)" fg:x="1539" fg:w="179"/><text x="1.4038%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (179 samples, 0.13%)</title><rect x="1.1538%" y="629" width="0.1342%" height="15" fill="rgb(249,222,13)" fg:x="1539" fg:w="179"/><text x="1.4038%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (179 samples, 0.13%)</title><rect x="1.1538%" y="613" width="0.1342%" height="15" fill="rgb(244,185,38)" fg:x="1539" fg:w="179"/><text x="1.4038%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (179 samples, 0.13%)</title><rect x="1.1538%" y="597" width="0.1342%" height="15" fill="rgb(236,202,9)" fg:x="1539" fg:w="179"/><text x="1.4038%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (64 samples, 0.05%)</title><rect x="1.2400%" y="581" width="0.0480%" height="15" fill="rgb(250,229,37)" fg:x="1654" fg:w="64"/><text x="1.4900%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (14 samples, 0.01%)</title><rect x="1.2775%" y="565" width="0.0105%" height="15" fill="rgb(206,174,23)" fg:x="1704" fg:w="14"/><text x="1.5275%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (28 samples, 0.02%)</title><rect x="1.2902%" y="677" width="0.0210%" height="15" fill="rgb(211,33,43)" fg:x="1721" fg:w="28"/><text x="1.5402%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (19 samples, 0.01%)</title><rect x="1.2969%" y="661" width="0.0142%" height="15" fill="rgb(245,58,50)" fg:x="1730" fg:w="19"/><text x="1.5469%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (19 samples, 0.01%)</title><rect x="1.2969%" y="645" width="0.0142%" height="15" fill="rgb(244,68,36)" fg:x="1730" fg:w="19"/><text x="1.5469%" y="655.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (220 samples, 0.16%)</title><rect x="1.1478%" y="805" width="0.1649%" height="15" fill="rgb(232,229,15)" fg:x="1531" fg:w="220"/><text x="1.3978%" y="815.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (218 samples, 0.16%)</title><rect x="1.1493%" y="789" width="0.1634%" height="15" fill="rgb(254,30,23)" fg:x="1533" fg:w="218"/><text x="1.3993%" y="799.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (218 samples, 0.16%)</title><rect x="1.1493%" y="773" width="0.1634%" height="15" fill="rgb(235,160,14)" fg:x="1533" fg:w="218"/><text x="1.3993%" y="783.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (218 samples, 0.16%)</title><rect x="1.1493%" y="757" width="0.1634%" height="15" fill="rgb(212,155,44)" fg:x="1533" fg:w="218"/><text x="1.3993%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (32 samples, 0.02%)</title><rect x="1.2887%" y="741" width="0.0240%" height="15" fill="rgb(226,2,50)" fg:x="1719" fg:w="32"/><text x="1.5387%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (32 samples, 0.02%)</title><rect x="1.2887%" y="725" width="0.0240%" height="15" fill="rgb(234,177,6)" fg:x="1719" fg:w="32"/><text x="1.5387%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (32 samples, 0.02%)</title><rect x="1.2887%" y="709" width="0.0240%" height="15" fill="rgb(217,24,9)" fg:x="1719" fg:w="32"/><text x="1.5387%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (30 samples, 0.02%)</title><rect x="1.2902%" y="693" width="0.0225%" height="15" fill="rgb(220,13,46)" fg:x="1721" fg:w="30"/><text x="1.5402%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.01%)</title><rect x="1.3794%" y="741" width="0.0105%" height="15" fill="rgb(239,221,27)" fg:x="1840" fg:w="14"/><text x="1.6294%" y="751.50"></text></g><g><title>__GI___libc_malloc (31 samples, 0.02%)</title><rect x="1.3929%" y="629" width="0.0232%" height="15" fill="rgb(222,198,25)" fg:x="1858" fg:w="31"/><text x="1.6429%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (47 samples, 0.04%)</title><rect x="1.3899%" y="741" width="0.0352%" height="15" fill="rgb(211,99,13)" fg:x="1854" fg:w="47"/><text x="1.6399%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (47 samples, 0.04%)</title><rect x="1.3899%" y="725" width="0.0352%" height="15" fill="rgb(232,111,31)" fg:x="1854" fg:w="47"/><text x="1.6399%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (47 samples, 0.04%)</title><rect x="1.3899%" y="709" width="0.0352%" height="15" fill="rgb(245,82,37)" fg:x="1854" fg:w="47"/><text x="1.6399%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (47 samples, 0.04%)</title><rect x="1.3899%" y="693" width="0.0352%" height="15" fill="rgb(227,149,46)" fg:x="1854" fg:w="47"/><text x="1.6399%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.04%)</title><rect x="1.3899%" y="677" width="0.0352%" height="15" fill="rgb(218,36,50)" fg:x="1854" fg:w="47"/><text x="1.6399%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.04%)</title><rect x="1.3899%" y="661" width="0.0352%" height="15" fill="rgb(226,80,48)" fg:x="1854" fg:w="47"/><text x="1.6399%" y="671.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.03%)</title><rect x="1.3929%" y="645" width="0.0322%" height="15" fill="rgb(238,224,15)" fg:x="1858" fg:w="43"/><text x="1.6429%" y="655.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (131 samples, 0.10%)</title><rect x="1.3307%" y="757" width="0.0982%" height="15" fill="rgb(241,136,10)" fg:x="1775" fg:w="131"/><text x="1.5807%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (47 samples, 0.04%)</title><rect x="1.4394%" y="581" width="0.0352%" height="15" fill="rgb(208,32,45)" fg:x="1920" fg:w="47"/><text x="1.6894%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (47 samples, 0.04%)</title><rect x="1.4394%" y="565" width="0.0352%" height="15" fill="rgb(207,135,9)" fg:x="1920" fg:w="47"/><text x="1.6894%" y="575.50"></text></g><g><title>_int_free (30 samples, 0.02%)</title><rect x="1.4521%" y="549" width="0.0225%" height="15" fill="rgb(206,86,44)" fg:x="1937" fg:w="30"/><text x="1.7021%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (204 samples, 0.15%)</title><rect x="1.3232%" y="805" width="0.1529%" height="15" fill="rgb(245,177,15)" fg:x="1765" fg:w="204"/><text x="1.5732%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (204 samples, 0.15%)</title><rect x="1.3232%" y="789" width="0.1529%" height="15" fill="rgb(206,64,50)" fg:x="1765" fg:w="204"/><text x="1.5732%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (204 samples, 0.15%)</title><rect x="1.3232%" y="773" width="0.1529%" height="15" fill="rgb(234,36,40)" fg:x="1765" fg:w="204"/><text x="1.5732%" y="783.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (63 samples, 0.05%)</title><rect x="1.4289%" y="757" width="0.0472%" height="15" fill="rgb(213,64,8)" fg:x="1906" fg:w="63"/><text x="1.6789%" y="767.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}} (63 samples, 0.05%)</title><rect x="1.4289%" y="741" width="0.0472%" height="15" fill="rgb(210,75,36)" fg:x="1906" fg:w="63"/><text x="1.6789%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (61 samples, 0.05%)</title><rect x="1.4304%" y="725" width="0.0457%" height="15" fill="rgb(229,88,21)" fg:x="1908" fg:w="61"/><text x="1.6804%" y="735.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&gt;::sum (61 samples, 0.05%)</title><rect x="1.4304%" y="709" width="0.0457%" height="15" fill="rgb(252,204,47)" fg:x="1908" fg:w="61"/><text x="1.6804%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (61 samples, 0.05%)</title><rect x="1.4304%" y="693" width="0.0457%" height="15" fill="rgb(208,77,27)" fg:x="1908" fg:w="61"/><text x="1.6804%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (49 samples, 0.04%)</title><rect x="1.4394%" y="677" width="0.0367%" height="15" fill="rgb(221,76,26)" fg:x="1920" fg:w="49"/><text x="1.6894%" y="687.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="1.4394%" y="661" width="0.0367%" height="15" fill="rgb(225,139,18)" fg:x="1920" fg:w="49"/><text x="1.6894%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (49 samples, 0.04%)</title><rect x="1.4394%" y="645" width="0.0367%" height="15" fill="rgb(230,137,11)" fg:x="1920" fg:w="49"/><text x="1.6894%" y="655.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="1.4394%" y="629" width="0.0367%" height="15" fill="rgb(212,28,1)" fg:x="1920" fg:w="49"/><text x="1.6894%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (49 samples, 0.04%)</title><rect x="1.4394%" y="613" width="0.0367%" height="15" fill="rgb(248,164,17)" fg:x="1920" fg:w="49"/><text x="1.6894%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="1.4394%" y="597" width="0.0367%" height="15" fill="rgb(222,171,42)" fg:x="1920" fg:w="49"/><text x="1.6894%" y="607.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="1.4949%" y="645" width="0.0150%" height="15" fill="rgb(243,84,45)" fg:x="1994" fg:w="20"/><text x="1.7449%" y="655.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="1.4949%" y="629" width="0.0150%" height="15" fill="rgb(252,49,23)" fg:x="1994" fg:w="20"/><text x="1.7449%" y="639.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="1.4949%" y="613" width="0.0150%" height="15" fill="rgb(215,19,7)" fg:x="1994" fg:w="20"/><text x="1.7449%" y="623.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="1.4949%" y="597" width="0.0150%" height="15" fill="rgb(238,81,41)" fg:x="1994" fg:w="20"/><text x="1.7449%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (21 samples, 0.02%)</title><rect x="1.5398%" y="485" width="0.0157%" height="15" fill="rgb(210,199,37)" fg:x="2054" fg:w="21"/><text x="1.7898%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (60 samples, 0.04%)</title><rect x="1.5174%" y="549" width="0.0450%" height="15" fill="rgb(244,192,49)" fg:x="2024" fg:w="60"/><text x="1.7674%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (60 samples, 0.04%)</title><rect x="1.5174%" y="533" width="0.0450%" height="15" fill="rgb(226,211,11)" fg:x="2024" fg:w="60"/><text x="1.7674%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (60 samples, 0.04%)</title><rect x="1.5174%" y="517" width="0.0450%" height="15" fill="rgb(236,162,54)" fg:x="2024" fg:w="60"/><text x="1.7674%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (38 samples, 0.03%)</title><rect x="1.5338%" y="501" width="0.0285%" height="15" fill="rgb(220,229,9)" fg:x="2046" fg:w="38"/><text x="1.7838%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (107 samples, 0.08%)</title><rect x="1.5121%" y="581" width="0.0802%" height="15" fill="rgb(250,87,22)" fg:x="2017" fg:w="107"/><text x="1.7621%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (104 samples, 0.08%)</title><rect x="1.5144%" y="565" width="0.0780%" height="15" fill="rgb(239,43,17)" fg:x="2020" fg:w="104"/><text x="1.7644%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (28 samples, 0.02%)</title><rect x="1.5713%" y="549" width="0.0210%" height="15" fill="rgb(231,177,25)" fg:x="2096" fg:w="28"/><text x="1.8213%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (28 samples, 0.02%)</title><rect x="1.5713%" y="533" width="0.0210%" height="15" fill="rgb(219,179,1)" fg:x="2096" fg:w="28"/><text x="1.8213%" y="543.50"></text></g><g><title>core::hash::Hasher::write_u8 (28 samples, 0.02%)</title><rect x="1.5713%" y="517" width="0.0210%" height="15" fill="rgb(238,219,53)" fg:x="2096" fg:w="28"/><text x="1.8213%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.02%)</title><rect x="1.5751%" y="501" width="0.0172%" height="15" fill="rgb(232,167,36)" fg:x="2101" fg:w="23"/><text x="1.8251%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (23 samples, 0.02%)</title><rect x="1.5751%" y="485" width="0.0172%" height="15" fill="rgb(244,19,51)" fg:x="2101" fg:w="23"/><text x="1.8251%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 0.02%)</title><rect x="1.5751%" y="469" width="0.0172%" height="15" fill="rgb(224,6,22)" fg:x="2101" fg:w="23"/><text x="1.8251%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="1.6118%" y="533" width="0.0112%" height="15" fill="rgb(224,145,5)" fg:x="2150" fg:w="15"/><text x="1.8618%" y="543.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (14 samples, 0.01%)</title><rect x="1.6126%" y="517" width="0.0105%" height="15" fill="rgb(234,130,49)" fg:x="2151" fg:w="14"/><text x="1.8626%" y="527.50"></text></g><g><title>hashbrown::raw::h2 (23 samples, 0.02%)</title><rect x="1.6253%" y="533" width="0.0172%" height="15" fill="rgb(254,6,2)" fg:x="2168" fg:w="23"/><text x="1.8753%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (207 samples, 0.16%)</title><rect x="1.4949%" y="661" width="0.1552%" height="15" fill="rgb(208,96,46)" fg:x="1994" fg:w="207"/><text x="1.7449%" y="671.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (187 samples, 0.14%)</title><rect x="1.5099%" y="645" width="0.1402%" height="15" fill="rgb(239,3,39)" fg:x="2014" fg:w="187"/><text x="1.7599%" y="655.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (187 samples, 0.14%)</title><rect x="1.5099%" y="629" width="0.1402%" height="15" fill="rgb(233,210,1)" fg:x="2014" fg:w="187"/><text x="1.7599%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (187 samples, 0.14%)</title><rect x="1.5099%" y="613" width="0.1402%" height="15" fill="rgb(244,137,37)" fg:x="2014" fg:w="187"/><text x="1.7599%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (187 samples, 0.14%)</title><rect x="1.5099%" y="597" width="0.1402%" height="15" fill="rgb(240,136,2)" fg:x="2014" fg:w="187"/><text x="1.7599%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (77 samples, 0.06%)</title><rect x="1.5923%" y="581" width="0.0577%" height="15" fill="rgb(239,18,37)" fg:x="2124" fg:w="77"/><text x="1.8423%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (77 samples, 0.06%)</title><rect x="1.5923%" y="565" width="0.0577%" height="15" fill="rgb(218,185,22)" fg:x="2124" fg:w="77"/><text x="1.8423%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (77 samples, 0.06%)</title><rect x="1.5923%" y="549" width="0.0577%" height="15" fill="rgb(225,218,4)" fg:x="2124" fg:w="77"/><text x="1.8423%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (21 samples, 0.02%)</title><rect x="1.6770%" y="485" width="0.0157%" height="15" fill="rgb(230,182,32)" fg:x="2237" fg:w="21"/><text x="1.9270%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (58 samples, 0.04%)</title><rect x="1.6553%" y="549" width="0.0435%" height="15" fill="rgb(242,56,43)" fg:x="2208" fg:w="58"/><text x="1.9053%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (58 samples, 0.04%)</title><rect x="1.6553%" y="533" width="0.0435%" height="15" fill="rgb(233,99,24)" fg:x="2208" fg:w="58"/><text x="1.9053%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (58 samples, 0.04%)</title><rect x="1.6553%" y="517" width="0.0435%" height="15" fill="rgb(234,209,42)" fg:x="2208" fg:w="58"/><text x="1.9053%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (38 samples, 0.03%)</title><rect x="1.6703%" y="501" width="0.0285%" height="15" fill="rgb(227,7,12)" fg:x="2228" fg:w="38"/><text x="1.9203%" y="511.50"></text></g><g><title>hashbrown::map::make_insert_hash (83 samples, 0.06%)</title><rect x="1.6500%" y="581" width="0.0622%" height="15" fill="rgb(245,203,43)" fg:x="2201" fg:w="83"/><text x="1.9000%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (83 samples, 0.06%)</title><rect x="1.6500%" y="565" width="0.0622%" height="15" fill="rgb(238,205,33)" fg:x="2201" fg:w="83"/><text x="1.9000%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (16 samples, 0.01%)</title><rect x="1.7003%" y="549" width="0.0120%" height="15" fill="rgb(231,56,7)" fg:x="2268" fg:w="16"/><text x="1.9503%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (16 samples, 0.01%)</title><rect x="1.7003%" y="533" width="0.0120%" height="15" fill="rgb(244,186,29)" fg:x="2268" fg:w="16"/><text x="1.9503%" y="543.50"></text></g><g><title>core::hash::Hasher::write_u8 (16 samples, 0.01%)</title><rect x="1.7003%" y="517" width="0.0120%" height="15" fill="rgb(234,111,31)" fg:x="2268" fg:w="16"/><text x="1.9503%" y="527.50"></text></g><g><title>hashbrown::raw::h2 (23 samples, 0.02%)</title><rect x="1.7250%" y="533" width="0.0172%" height="15" fill="rgb(241,149,10)" fg:x="2301" fg:w="23"/><text x="1.9750%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (46 samples, 0.03%)</title><rect x="1.7123%" y="581" width="0.0345%" height="15" fill="rgb(249,206,44)" fg:x="2284" fg:w="46"/><text x="1.9623%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (46 samples, 0.03%)</title><rect x="1.7123%" y="565" width="0.0345%" height="15" fill="rgb(251,153,30)" fg:x="2284" fg:w="46"/><text x="1.9623%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (46 samples, 0.03%)</title><rect x="1.7123%" y="549" width="0.0345%" height="15" fill="rgb(239,152,38)" fg:x="2284" fg:w="46"/><text x="1.9623%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (25 samples, 0.02%)</title><rect x="1.7752%" y="437" width="0.0187%" height="15" fill="rgb(249,139,47)" fg:x="2368" fg:w="25"/><text x="2.0252%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (25 samples, 0.02%)</title><rect x="1.7752%" y="421" width="0.0187%" height="15" fill="rgb(244,64,35)" fg:x="2368" fg:w="25"/><text x="2.0252%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (25 samples, 0.02%)</title><rect x="1.7752%" y="405" width="0.0187%" height="15" fill="rgb(216,46,15)" fg:x="2368" fg:w="25"/><text x="2.0252%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (14 samples, 0.01%)</title><rect x="1.7835%" y="389" width="0.0105%" height="15" fill="rgb(250,74,19)" fg:x="2379" fg:w="14"/><text x="2.0335%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (40 samples, 0.03%)</title><rect x="1.7722%" y="501" width="0.0300%" height="15" fill="rgb(249,42,33)" fg:x="2364" fg:w="40"/><text x="2.0222%" y="511.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (40 samples, 0.03%)</title><rect x="1.7722%" y="485" width="0.0300%" height="15" fill="rgb(242,149,17)" fg:x="2364" fg:w="40"/><text x="2.0222%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (40 samples, 0.03%)</title><rect x="1.7722%" y="469" width="0.0300%" height="15" fill="rgb(244,29,21)" fg:x="2364" fg:w="40"/><text x="2.0222%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (40 samples, 0.03%)</title><rect x="1.7722%" y="453" width="0.0300%" height="15" fill="rgb(220,130,37)" fg:x="2364" fg:w="40"/><text x="2.0222%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (35 samples, 0.03%)</title><rect x="1.8067%" y="485" width="0.0262%" height="15" fill="rgb(211,67,2)" fg:x="2410" fg:w="35"/><text x="2.0567%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (37 samples, 0.03%)</title><rect x="1.8067%" y="501" width="0.0277%" height="15" fill="rgb(235,68,52)" fg:x="2410" fg:w="37"/><text x="2.0567%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (117 samples, 0.09%)</title><rect x="1.7565%" y="565" width="0.0877%" height="15" fill="rgb(246,142,3)" fg:x="2343" fg:w="117"/><text x="2.0065%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (117 samples, 0.09%)</title><rect x="1.7565%" y="549" width="0.0877%" height="15" fill="rgb(241,25,7)" fg:x="2343" fg:w="117"/><text x="2.0065%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (116 samples, 0.09%)</title><rect x="1.7573%" y="533" width="0.0870%" height="15" fill="rgb(242,119,39)" fg:x="2344" fg:w="116"/><text x="2.0073%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (113 samples, 0.08%)</title><rect x="1.7595%" y="517" width="0.0847%" height="15" fill="rgb(241,98,45)" fg:x="2347" fg:w="113"/><text x="2.0095%" y="527.50"></text></g><g><title>hashbrown::raw::is_full (22 samples, 0.02%)</title><rect x="1.8720%" y="549" width="0.0165%" height="15" fill="rgb(254,28,30)" fg:x="2497" fg:w="22"/><text x="2.1220%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (68 samples, 0.05%)</title><rect x="1.8442%" y="565" width="0.0510%" height="15" fill="rgb(241,142,54)" fg:x="2460" fg:w="68"/><text x="2.0942%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (550 samples, 0.41%)</title><rect x="1.4866%" y="693" width="0.4123%" height="15" fill="rgb(222,85,15)" fg:x="1983" fg:w="550"/><text x="1.7366%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (539 samples, 0.40%)</title><rect x="1.4949%" y="677" width="0.4041%" height="15" fill="rgb(210,85,47)" fg:x="1994" fg:w="539"/><text x="1.7449%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (332 samples, 0.25%)</title><rect x="1.6500%" y="661" width="0.2489%" height="15" fill="rgb(224,206,25)" fg:x="2201" fg:w="332"/><text x="1.9000%" y="671.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (332 samples, 0.25%)</title><rect x="1.6500%" y="645" width="0.2489%" height="15" fill="rgb(243,201,19)" fg:x="2201" fg:w="332"/><text x="1.9000%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (332 samples, 0.25%)</title><rect x="1.6500%" y="629" width="0.2489%" height="15" fill="rgb(236,59,4)" fg:x="2201" fg:w="332"/><text x="1.9000%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (332 samples, 0.25%)</title><rect x="1.6500%" y="613" width="0.2489%" height="15" fill="rgb(254,179,45)" fg:x="2201" fg:w="332"/><text x="1.9000%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (332 samples, 0.25%)</title><rect x="1.6500%" y="597" width="0.2489%" height="15" fill="rgb(226,14,10)" fg:x="2201" fg:w="332"/><text x="1.9000%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (203 samples, 0.15%)</title><rect x="1.7468%" y="581" width="0.1522%" height="15" fill="rgb(244,27,41)" fg:x="2330" fg:w="203"/><text x="1.9968%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (27 samples, 0.02%)</title><rect x="1.8997%" y="581" width="0.0202%" height="15" fill="rgb(235,35,32)" fg:x="2534" fg:w="27"/><text x="2.1497%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (27 samples, 0.02%)</title><rect x="1.8997%" y="565" width="0.0202%" height="15" fill="rgb(218,68,31)" fg:x="2534" fg:w="27"/><text x="2.1497%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (27 samples, 0.02%)</title><rect x="1.8997%" y="549" width="0.0202%" height="15" fill="rgb(207,120,37)" fg:x="2534" fg:w="27"/><text x="2.1497%" y="559.50"></text></g><g><title>hashbrown::map::make_insert_hash (37 samples, 0.03%)</title><rect x="1.8997%" y="613" width="0.0277%" height="15" fill="rgb(227,98,0)" fg:x="2534" fg:w="37"/><text x="2.1497%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (37 samples, 0.03%)</title><rect x="1.8997%" y="597" width="0.0277%" height="15" fill="rgb(207,7,3)" fg:x="2534" fg:w="37"/><text x="2.1497%" y="607.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (56 samples, 0.04%)</title><rect x="1.8997%" y="677" width="0.0420%" height="15" fill="rgb(206,98,19)" fg:x="2534" fg:w="56"/><text x="2.1497%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (56 samples, 0.04%)</title><rect x="1.8997%" y="661" width="0.0420%" height="15" fill="rgb(217,5,26)" fg:x="2534" fg:w="56"/><text x="2.1497%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (56 samples, 0.04%)</title><rect x="1.8997%" y="645" width="0.0420%" height="15" fill="rgb(235,190,38)" fg:x="2534" fg:w="56"/><text x="2.1497%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (56 samples, 0.04%)</title><rect x="1.8997%" y="629" width="0.0420%" height="15" fill="rgb(247,86,24)" fg:x="2534" fg:w="56"/><text x="2.1497%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (615 samples, 0.46%)</title><rect x="1.4851%" y="725" width="0.4611%" height="15" fill="rgb(205,101,16)" fg:x="1981" fg:w="615"/><text x="1.7351%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (615 samples, 0.46%)</title><rect x="1.4851%" y="709" width="0.4611%" height="15" fill="rgb(246,168,33)" fg:x="1981" fg:w="615"/><text x="1.7351%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (63 samples, 0.05%)</title><rect x="1.8989%" y="693" width="0.0472%" height="15" fill="rgb(231,114,1)" fg:x="2533" fg:w="63"/><text x="2.1489%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (647 samples, 0.49%)</title><rect x="1.4761%" y="805" width="0.4850%" height="15" fill="rgb(207,184,53)" fg:x="1969" fg:w="647"/><text x="1.7261%" y="815.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (647 samples, 0.49%)</title><rect x="1.4761%" y="789" width="0.4850%" height="15" fill="rgb(224,95,51)" fg:x="1969" fg:w="647"/><text x="1.7261%" y="799.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (639 samples, 0.48%)</title><rect x="1.4821%" y="773" width="0.4790%" height="15" fill="rgb(212,188,45)" fg:x="1977" fg:w="639"/><text x="1.7321%" y="783.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (639 samples, 0.48%)</title><rect x="1.4821%" y="757" width="0.4790%" height="15" fill="rgb(223,154,38)" fg:x="1977" fg:w="639"/><text x="1.7321%" y="767.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (639 samples, 0.48%)</title><rect x="1.4821%" y="741" width="0.4790%" height="15" fill="rgb(251,22,52)" fg:x="1977" fg:w="639"/><text x="1.7321%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (20 samples, 0.01%)</title><rect x="1.9462%" y="725" width="0.0150%" height="15" fill="rgb(229,209,22)" fg:x="2596" fg:w="20"/><text x="2.1962%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (20 samples, 0.01%)</title><rect x="1.9462%" y="709" width="0.0150%" height="15" fill="rgb(234,138,34)" fg:x="2596" fg:w="20"/><text x="2.1962%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.01%)</title><rect x="1.9462%" y="693" width="0.0150%" height="15" fill="rgb(212,95,11)" fg:x="2596" fg:w="20"/><text x="2.1962%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (20 samples, 0.01%)</title><rect x="1.9462%" y="677" width="0.0150%" height="15" fill="rgb(240,179,47)" fg:x="2596" fg:w="20"/><text x="2.1962%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (20 samples, 0.01%)</title><rect x="1.9462%" y="661" width="0.0150%" height="15" fill="rgb(240,163,11)" fg:x="2596" fg:w="20"/><text x="2.1962%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;,&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}}&gt;&gt; (28 samples, 0.02%)</title><rect x="1.9687%" y="805" width="0.0210%" height="15" fill="rgb(236,37,12)" fg:x="2626" fg:w="28"/><text x="2.2187%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="1.9687%" y="789" width="0.0210%" height="15" fill="rgb(232,164,16)" fg:x="2626" fg:w="28"/><text x="2.2187%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::LazyBuffer&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="1.9732%" y="773" width="0.0165%" height="15" fill="rgb(244,205,15)" fg:x="2632" fg:w="22"/><text x="2.2232%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15 samples, 0.01%)</title><rect x="1.9964%" y="725" width="0.0112%" height="15" fill="rgb(223,117,47)" fg:x="2663" fg:w="15"/><text x="2.2464%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15 samples, 0.01%)</title><rect x="1.9964%" y="709" width="0.0112%" height="15" fill="rgb(244,107,35)" fg:x="2663" fg:w="15"/><text x="2.2464%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.01%)</title><rect x="1.9972%" y="693" width="0.0105%" height="15" fill="rgb(205,140,8)" fg:x="2664" fg:w="14"/><text x="2.2472%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 0.02%)</title><rect x="1.9964%" y="757" width="0.0202%" height="15" fill="rgb(228,84,46)" fg:x="2663" fg:w="27"/><text x="2.2464%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (27 samples, 0.02%)</title><rect x="1.9964%" y="741" width="0.0202%" height="15" fill="rgb(254,188,9)" fg:x="2663" fg:w="27"/><text x="2.2464%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15 samples, 0.01%)</title><rect x="2.0219%" y="725" width="0.0112%" height="15" fill="rgb(206,112,54)" fg:x="2697" fg:w="15"/><text x="2.2719%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (15 samples, 0.01%)</title><rect x="2.0219%" y="709" width="0.0112%" height="15" fill="rgb(216,84,49)" fg:x="2697" fg:w="15"/><text x="2.2719%" y="719.50"></text></g><g><title>itertools::Itertools::collect_vec (64 samples, 0.05%)</title><rect x="1.9957%" y="805" width="0.0480%" height="15" fill="rgb(214,194,35)" fg:x="2662" fg:w="64"/><text x="2.2457%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (64 samples, 0.05%)</title><rect x="1.9957%" y="789" width="0.0480%" height="15" fill="rgb(249,28,3)" fg:x="2662" fg:w="64"/><text x="2.2457%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (64 samples, 0.05%)</title><rect x="1.9957%" y="773" width="0.0480%" height="15" fill="rgb(222,56,52)" fg:x="2662" fg:w="64"/><text x="2.2457%" y="783.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (36 samples, 0.03%)</title><rect x="2.0166%" y="757" width="0.0270%" height="15" fill="rgb(245,217,50)" fg:x="2690" fg:w="36"/><text x="2.2666%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (32 samples, 0.02%)</title><rect x="2.0196%" y="741" width="0.0240%" height="15" fill="rgb(213,201,24)" fg:x="2694" fg:w="32"/><text x="2.2696%" y="751.50"></text></g><g><title>itertools::Itertools::combinations (56 samples, 0.04%)</title><rect x="2.0436%" y="805" width="0.0420%" height="15" fill="rgb(248,116,28)" fg:x="2726" fg:w="56"/><text x="2.2936%" y="815.50"></text></g><g><title>itertools::combinations::combinations (55 samples, 0.04%)</title><rect x="2.0444%" y="789" width="0.0412%" height="15" fill="rgb(219,72,43)" fg:x="2727" fg:w="55"/><text x="2.2944%" y="799.50"></text></g><g><title>itertools::combinations::LazyBuffer&lt;I&gt;::new (28 samples, 0.02%)</title><rect x="2.0646%" y="773" width="0.0210%" height="15" fill="rgb(209,138,14)" fg:x="2754" fg:w="28"/><text x="2.3146%" y="783.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (1,278 samples, 0.96%)</title><rect x="1.1343%" y="821" width="0.9581%" height="15" fill="rgb(222,18,33)" fg:x="1513" fg:w="1278"/><text x="1.3843%" y="831.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.01%)</title><rect x="2.0969%" y="549" width="0.0105%" height="15" fill="rgb(213,199,7)" fg:x="2797" fg:w="14"/><text x="2.3469%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="2.0954%" y="677" width="0.0127%" height="15" fill="rgb(250,110,10)" fg:x="2795" fg:w="17"/><text x="2.3454%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="2.0954%" y="661" width="0.0127%" height="15" fill="rgb(248,123,6)" fg:x="2795" fg:w="17"/><text x="2.3454%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 0.01%)</title><rect x="2.0954%" y="645" width="0.0127%" height="15" fill="rgb(206,91,31)" fg:x="2795" fg:w="17"/><text x="2.3454%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.01%)</title><rect x="2.0954%" y="629" width="0.0127%" height="15" fill="rgb(211,154,13)" fg:x="2795" fg:w="17"/><text x="2.3454%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.01%)</title><rect x="2.0961%" y="613" width="0.0120%" height="15" fill="rgb(225,148,7)" fg:x="2796" fg:w="16"/><text x="2.3461%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15 samples, 0.01%)</title><rect x="2.0969%" y="597" width="0.0112%" height="15" fill="rgb(220,160,43)" fg:x="2797" fg:w="15"/><text x="2.3469%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.01%)</title><rect x="2.0969%" y="581" width="0.0112%" height="15" fill="rgb(213,52,39)" fg:x="2797" fg:w="15"/><text x="2.3469%" y="591.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.01%)</title><rect x="2.0969%" y="565" width="0.0112%" height="15" fill="rgb(243,137,7)" fg:x="2797" fg:w="15"/><text x="2.3469%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (19 samples, 0.01%)</title><rect x="2.0954%" y="773" width="0.0142%" height="15" fill="rgb(230,79,13)" fg:x="2795" fg:w="19"/><text x="2.3454%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (19 samples, 0.01%)</title><rect x="2.0954%" y="757" width="0.0142%" height="15" fill="rgb(247,105,23)" fg:x="2795" fg:w="19"/><text x="2.3454%" y="767.50"></text></g><g><title>alloc::string::String::push_str (19 samples, 0.01%)</title><rect x="2.0954%" y="741" width="0.0142%" height="15" fill="rgb(223,179,41)" fg:x="2795" fg:w="19"/><text x="2.3454%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (19 samples, 0.01%)</title><rect x="2.0954%" y="725" width="0.0142%" height="15" fill="rgb(218,9,34)" fg:x="2795" fg:w="19"/><text x="2.3454%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (19 samples, 0.01%)</title><rect x="2.0954%" y="709" width="0.0142%" height="15" fill="rgb(222,106,8)" fg:x="2795" fg:w="19"/><text x="2.3454%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (19 samples, 0.01%)</title><rect x="2.0954%" y="693" width="0.0142%" height="15" fill="rgb(211,220,0)" fg:x="2795" fg:w="19"/><text x="2.3454%" y="703.50"></text></g><g><title>alloc::fmt::format (26 samples, 0.02%)</title><rect x="2.0924%" y="821" width="0.0195%" height="15" fill="rgb(229,52,16)" fg:x="2791" fg:w="26"/><text x="2.3424%" y="831.50"></text></g><g><title>core::fmt::Write::write_fmt (23 samples, 0.02%)</title><rect x="2.0946%" y="805" width="0.0172%" height="15" fill="rgb(212,155,18)" fg:x="2794" fg:w="23"/><text x="2.3446%" y="815.50"></text></g><g><title>core::fmt::write (23 samples, 0.02%)</title><rect x="2.0946%" y="789" width="0.0172%" height="15" fill="rgb(242,21,14)" fg:x="2794" fg:w="23"/><text x="2.3446%" y="799.50"></text></g><g><title>__GI___libc_realloc (38 samples, 0.03%)</title><rect x="2.1313%" y="485" width="0.0285%" height="15" fill="rgb(222,19,48)" fg:x="2843" fg:w="38"/><text x="2.3813%" y="495.50"></text></g><g><title>_int_realloc (30 samples, 0.02%)</title><rect x="2.1373%" y="469" width="0.0225%" height="15" fill="rgb(232,45,27)" fg:x="2851" fg:w="30"/><text x="2.3873%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (41 samples, 0.03%)</title><rect x="2.1313%" y="533" width="0.0307%" height="15" fill="rgb(249,103,42)" fg:x="2843" fg:w="41"/><text x="2.3813%" y="543.50"></text></g><g><title>alloc::alloc::Global::grow_impl (41 samples, 0.03%)</title><rect x="2.1313%" y="517" width="0.0307%" height="15" fill="rgb(246,81,33)" fg:x="2843" fg:w="41"/><text x="2.3813%" y="527.50"></text></g><g><title>alloc::alloc::realloc (41 samples, 0.03%)</title><rect x="2.1313%" y="501" width="0.0307%" height="15" fill="rgb(252,33,42)" fg:x="2843" fg:w="41"/><text x="2.3813%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (50 samples, 0.04%)</title><rect x="2.1261%" y="549" width="0.0375%" height="15" fill="rgb(209,212,41)" fg:x="2836" fg:w="50"/><text x="2.3761%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (62 samples, 0.05%)</title><rect x="2.1201%" y="613" width="0.0465%" height="15" fill="rgb(207,154,6)" fg:x="2828" fg:w="62"/><text x="2.3701%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (62 samples, 0.05%)</title><rect x="2.1201%" y="597" width="0.0465%" height="15" fill="rgb(223,64,47)" fg:x="2828" fg:w="62"/><text x="2.3701%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (57 samples, 0.04%)</title><rect x="2.1238%" y="581" width="0.0427%" height="15" fill="rgb(211,161,38)" fg:x="2833" fg:w="57"/><text x="2.3738%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (57 samples, 0.04%)</title><rect x="2.1238%" y="565" width="0.0427%" height="15" fill="rgb(219,138,40)" fg:x="2833" fg:w="57"/><text x="2.3738%" y="575.50"></text></g><g><title>alloc::string::String::push_str (127 samples, 0.10%)</title><rect x="2.1178%" y="677" width="0.0952%" height="15" fill="rgb(241,228,46)" fg:x="2825" fg:w="127"/><text x="2.3678%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (127 samples, 0.10%)</title><rect x="2.1178%" y="661" width="0.0952%" height="15" fill="rgb(223,209,38)" fg:x="2825" fg:w="127"/><text x="2.3678%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (127 samples, 0.10%)</title><rect x="2.1178%" y="645" width="0.0952%" height="15" fill="rgb(236,164,45)" fg:x="2825" fg:w="127"/><text x="2.3678%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (127 samples, 0.10%)</title><rect x="2.1178%" y="629" width="0.0952%" height="15" fill="rgb(231,15,5)" fg:x="2825" fg:w="127"/><text x="2.3678%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (62 samples, 0.05%)</title><rect x="2.1666%" y="613" width="0.0465%" height="15" fill="rgb(252,35,15)" fg:x="2890" fg:w="62"/><text x="2.4166%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (49 samples, 0.04%)</title><rect x="2.1763%" y="597" width="0.0367%" height="15" fill="rgb(248,181,18)" fg:x="2903" fg:w="49"/><text x="2.4263%" y="607.50"></text></g><g><title>__GI___libc_free (43 samples, 0.03%)</title><rect x="2.2288%" y="581" width="0.0322%" height="15" fill="rgb(233,39,42)" fg:x="2973" fg:w="43"/><text x="2.4788%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (243 samples, 0.18%)</title><rect x="2.2131%" y="613" width="0.1822%" height="15" fill="rgb(238,110,33)" fg:x="2952" fg:w="243"/><text x="2.4631%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (243 samples, 0.18%)</title><rect x="2.2131%" y="597" width="0.1822%" height="15" fill="rgb(233,195,10)" fg:x="2952" fg:w="243"/><text x="2.4631%" y="607.50"></text></g><g><title>_int_free (155 samples, 0.12%)</title><rect x="2.2790%" y="581" width="0.1162%" height="15" fill="rgb(254,105,3)" fg:x="3040" fg:w="155"/><text x="2.5290%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (372 samples, 0.28%)</title><rect x="2.1171%" y="709" width="0.2789%" height="15" fill="rgb(221,225,9)" fg:x="2824" fg:w="372"/><text x="2.3671%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (371 samples, 0.28%)</title><rect x="2.1178%" y="693" width="0.2781%" height="15" fill="rgb(224,227,45)" fg:x="2825" fg:w="371"/><text x="2.3678%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (244 samples, 0.18%)</title><rect x="2.2131%" y="677" width="0.1829%" height="15" fill="rgb(229,198,43)" fg:x="2952" fg:w="244"/><text x="2.4631%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (244 samples, 0.18%)</title><rect x="2.2131%" y="661" width="0.1829%" height="15" fill="rgb(206,209,35)" fg:x="2952" fg:w="244"/><text x="2.4631%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (244 samples, 0.18%)</title><rect x="2.2131%" y="645" width="0.1829%" height="15" fill="rgb(245,195,53)" fg:x="2952" fg:w="244"/><text x="2.4631%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (244 samples, 0.18%)</title><rect x="2.2131%" y="629" width="0.1829%" height="15" fill="rgb(240,92,26)" fg:x="2952" fg:w="244"/><text x="2.4631%" y="639.50"></text></g><g><title>__GI___libc_malloc (102 samples, 0.08%)</title><rect x="2.4365%" y="469" width="0.0765%" height="15" fill="rgb(207,40,23)" fg:x="3250" fg:w="102"/><text x="2.6865%" y="479.50"></text></g><g><title>tcache_get (30 samples, 0.02%)</title><rect x="2.4904%" y="453" width="0.0225%" height="15" fill="rgb(223,111,35)" fg:x="3322" fg:w="30"/><text x="2.7404%" y="463.50"></text></g><g><title>__rdl_alloc (29 samples, 0.02%)</title><rect x="2.5129%" y="469" width="0.0217%" height="15" fill="rgb(229,147,28)" fg:x="3352" fg:w="29"/><text x="2.7629%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (21 samples, 0.02%)</title><rect x="2.5189%" y="453" width="0.0157%" height="15" fill="rgb(211,29,28)" fg:x="3360" fg:w="21"/><text x="2.7689%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (201 samples, 0.15%)</title><rect x="2.4020%" y="565" width="0.1507%" height="15" fill="rgb(228,72,33)" fg:x="3204" fg:w="201"/><text x="2.6520%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (201 samples, 0.15%)</title><rect x="2.4020%" y="549" width="0.1507%" height="15" fill="rgb(205,214,31)" fg:x="3204" fg:w="201"/><text x="2.6520%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (201 samples, 0.15%)</title><rect x="2.4020%" y="533" width="0.1507%" height="15" fill="rgb(224,111,15)" fg:x="3204" fg:w="201"/><text x="2.6520%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (201 samples, 0.15%)</title><rect x="2.4020%" y="517" width="0.1507%" height="15" fill="rgb(253,21,26)" fg:x="3204" fg:w="201"/><text x="2.6520%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (201 samples, 0.15%)</title><rect x="2.4020%" y="501" width="0.1507%" height="15" fill="rgb(245,139,43)" fg:x="3204" fg:w="201"/><text x="2.6520%" y="511.50"></text></g><g><title>alloc::alloc::alloc (160 samples, 0.12%)</title><rect x="2.4327%" y="485" width="0.1199%" height="15" fill="rgb(252,170,7)" fg:x="3245" fg:w="160"/><text x="2.6827%" y="495.50"></text></g><g><title>__rust_alloc (24 samples, 0.02%)</title><rect x="2.5347%" y="469" width="0.0180%" height="15" fill="rgb(231,118,14)" fg:x="3381" fg:w="24"/><text x="2.7847%" y="479.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (202 samples, 0.15%)</title><rect x="2.4020%" y="693" width="0.1514%" height="15" fill="rgb(238,83,0)" fg:x="3204" fg:w="202"/><text x="2.6520%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (202 samples, 0.15%)</title><rect x="2.4020%" y="677" width="0.1514%" height="15" fill="rgb(221,39,39)" fg:x="3204" fg:w="202"/><text x="2.6520%" y="687.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (202 samples, 0.15%)</title><rect x="2.4020%" y="661" width="0.1514%" height="15" fill="rgb(222,119,46)" fg:x="3204" fg:w="202"/><text x="2.6520%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (202 samples, 0.15%)</title><rect x="2.4020%" y="645" width="0.1514%" height="15" fill="rgb(222,165,49)" fg:x="3204" fg:w="202"/><text x="2.6520%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (202 samples, 0.15%)</title><rect x="2.4020%" y="629" width="0.1514%" height="15" fill="rgb(219,113,52)" fg:x="3204" fg:w="202"/><text x="2.6520%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (202 samples, 0.15%)</title><rect x="2.4020%" y="613" width="0.1514%" height="15" fill="rgb(214,7,15)" fg:x="3204" fg:w="202"/><text x="2.6520%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (202 samples, 0.15%)</title><rect x="2.4020%" y="597" width="0.1514%" height="15" fill="rgb(235,32,4)" fg:x="3204" fg:w="202"/><text x="2.6520%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (202 samples, 0.15%)</title><rect x="2.4020%" y="581" width="0.1514%" height="15" fill="rgb(238,90,54)" fg:x="3204" fg:w="202"/><text x="2.6520%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (25 samples, 0.02%)</title><rect x="2.6134%" y="453" width="0.0187%" height="15" fill="rgb(213,208,19)" fg:x="3486" fg:w="25"/><text x="2.8634%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (30 samples, 0.02%)</title><rect x="2.6104%" y="517" width="0.0225%" height="15" fill="rgb(233,156,4)" fg:x="3482" fg:w="30"/><text x="2.8604%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (30 samples, 0.02%)</title><rect x="2.6104%" y="501" width="0.0225%" height="15" fill="rgb(207,194,5)" fg:x="3482" fg:w="30"/><text x="2.8604%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (29 samples, 0.02%)</title><rect x="2.6111%" y="485" width="0.0217%" height="15" fill="rgb(206,111,30)" fg:x="3483" fg:w="29"/><text x="2.8611%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (29 samples, 0.02%)</title><rect x="2.6111%" y="469" width="0.0217%" height="15" fill="rgb(243,70,54)" fg:x="3483" fg:w="29"/><text x="2.8611%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (45 samples, 0.03%)</title><rect x="2.6044%" y="613" width="0.0337%" height="15" fill="rgb(242,28,8)" fg:x="3474" fg:w="45"/><text x="2.8544%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (40 samples, 0.03%)</title><rect x="2.6081%" y="597" width="0.0300%" height="15" fill="rgb(219,106,18)" fg:x="3479" fg:w="40"/><text x="2.8581%" y="607.50"></text></g><g><title>alloc::string::String::push_str (40 samples, 0.03%)</title><rect x="2.6081%" y="581" width="0.0300%" height="15" fill="rgb(244,222,10)" fg:x="3479" fg:w="40"/><text x="2.8581%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (40 samples, 0.03%)</title><rect x="2.6081%" y="565" width="0.0300%" height="15" fill="rgb(236,179,52)" fg:x="3479" fg:w="40"/><text x="2.8581%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (40 samples, 0.03%)</title><rect x="2.6081%" y="549" width="0.0300%" height="15" fill="rgb(213,23,39)" fg:x="3479" fg:w="40"/><text x="2.8581%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (40 samples, 0.03%)</title><rect x="2.6081%" y="533" width="0.0300%" height="15" fill="rgb(238,48,10)" fg:x="3479" fg:w="40"/><text x="2.8581%" y="543.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (64 samples, 0.05%)</title><rect x="2.5969%" y="645" width="0.0480%" height="15" fill="rgb(251,196,23)" fg:x="3464" fg:w="64"/><text x="2.8469%" y="655.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (56 samples, 0.04%)</title><rect x="2.6029%" y="629" width="0.0420%" height="15" fill="rgb(250,152,24)" fg:x="3472" fg:w="56"/><text x="2.8529%" y="639.50"></text></g><g><title>alloc::fmt::format (126 samples, 0.09%)</title><rect x="2.5534%" y="693" width="0.0945%" height="15" fill="rgb(209,150,17)" fg:x="3406" fg:w="126"/><text x="2.8034%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (112 samples, 0.08%)</title><rect x="2.5639%" y="677" width="0.0840%" height="15" fill="rgb(234,202,34)" fg:x="3420" fg:w="112"/><text x="2.8139%" y="687.50"></text></g><g><title>core::fmt::write (90 samples, 0.07%)</title><rect x="2.5804%" y="661" width="0.0675%" height="15" fill="rgb(253,148,53)" fg:x="3442" fg:w="90"/><text x="2.8304%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (714 samples, 0.54%)</title><rect x="2.1134%" y="789" width="0.5353%" height="15" fill="rgb(218,129,16)" fg:x="2819" fg:w="714"/><text x="2.3634%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (714 samples, 0.54%)</title><rect x="2.1134%" y="773" width="0.5353%" height="15" fill="rgb(216,85,19)" fg:x="2819" fg:w="714"/><text x="2.3634%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (714 samples, 0.54%)</title><rect x="2.1134%" y="757" width="0.5353%" height="15" fill="rgb(235,228,7)" fg:x="2819" fg:w="714"/><text x="2.3634%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (711 samples, 0.53%)</title><rect x="2.1156%" y="741" width="0.5330%" height="15" fill="rgb(245,175,0)" fg:x="2822" fg:w="711"/><text x="2.3656%" y="751.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (709 samples, 0.53%)</title><rect x="2.1171%" y="725" width="0.5315%" height="15" fill="rgb(208,168,36)" fg:x="2824" fg:w="709"/><text x="2.3671%" y="735.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (337 samples, 0.25%)</title><rect x="2.3960%" y="709" width="0.2526%" height="15" fill="rgb(246,171,24)" fg:x="3196" fg:w="337"/><text x="2.6460%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (728 samples, 0.55%)</title><rect x="2.1119%" y="821" width="0.5458%" height="15" fill="rgb(215,142,24)" fg:x="2817" fg:w="728"/><text x="2.3619%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (728 samples, 0.55%)</title><rect x="2.1119%" y="805" width="0.5458%" height="15" fill="rgb(250,187,7)" fg:x="2817" fg:w="728"/><text x="2.3619%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (45 samples, 0.03%)</title><rect x="2.6854%" y="533" width="0.0337%" height="15" fill="rgb(228,66,33)" fg:x="3582" fg:w="45"/><text x="2.9354%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (45 samples, 0.03%)</title><rect x="2.6854%" y="517" width="0.0337%" height="15" fill="rgb(234,215,21)" fg:x="3582" fg:w="45"/><text x="2.9354%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (45 samples, 0.03%)</title><rect x="2.6854%" y="501" width="0.0337%" height="15" fill="rgb(222,191,20)" fg:x="3582" fg:w="45"/><text x="2.9354%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (27 samples, 0.02%)</title><rect x="2.6989%" y="485" width="0.0202%" height="15" fill="rgb(245,79,54)" fg:x="3600" fg:w="27"/><text x="2.9489%" y="495.50"></text></g><g><title>hashbrown::map::make_insert_hash (75 samples, 0.06%)</title><rect x="2.6786%" y="565" width="0.0562%" height="15" fill="rgb(240,10,37)" fg:x="3573" fg:w="75"/><text x="2.9286%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (73 samples, 0.05%)</title><rect x="2.6801%" y="549" width="0.0547%" height="15" fill="rgb(214,192,32)" fg:x="3575" fg:w="73"/><text x="2.9301%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17 samples, 0.01%)</title><rect x="2.7221%" y="533" width="0.0127%" height="15" fill="rgb(209,36,54)" fg:x="3631" fg:w="17"/><text x="2.9721%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (17 samples, 0.01%)</title><rect x="2.7221%" y="517" width="0.0127%" height="15" fill="rgb(220,10,11)" fg:x="3631" fg:w="17"/><text x="2.9721%" y="527.50"></text></g><g><title>core::hash::Hasher::write_u8 (17 samples, 0.01%)</title><rect x="2.7221%" y="501" width="0.0127%" height="15" fill="rgb(221,106,17)" fg:x="3631" fg:w="17"/><text x="2.9721%" y="511.50"></text></g><g><title>hashbrown::raw::h2 (20 samples, 0.01%)</title><rect x="2.7596%" y="517" width="0.0150%" height="15" fill="rgb(251,142,44)" fg:x="3681" fg:w="20"/><text x="3.0096%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (57 samples, 0.04%)</title><rect x="2.7348%" y="565" width="0.0427%" height="15" fill="rgb(238,13,15)" fg:x="3648" fg:w="57"/><text x="2.9848%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (57 samples, 0.04%)</title><rect x="2.7348%" y="549" width="0.0427%" height="15" fill="rgb(208,107,27)" fg:x="3648" fg:w="57"/><text x="2.9848%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (57 samples, 0.04%)</title><rect x="2.7348%" y="533" width="0.0427%" height="15" fill="rgb(205,136,37)" fg:x="3648" fg:w="57"/><text x="2.9848%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (21 samples, 0.02%)</title><rect x="2.7828%" y="549" width="0.0157%" height="15" fill="rgb(250,205,27)" fg:x="3712" fg:w="21"/><text x="3.0328%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (175 samples, 0.13%)</title><rect x="2.6771%" y="725" width="0.1312%" height="15" fill="rgb(210,80,43)" fg:x="3571" fg:w="175"/><text x="2.9271%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (175 samples, 0.13%)</title><rect x="2.6771%" y="709" width="0.1312%" height="15" fill="rgb(247,160,36)" fg:x="3571" fg:w="175"/><text x="2.9271%" y="719.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (174 samples, 0.13%)</title><rect x="2.6779%" y="693" width="0.1304%" height="15" fill="rgb(234,13,49)" fg:x="3572" fg:w="174"/><text x="2.9279%" y="703.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (174 samples, 0.13%)</title><rect x="2.6779%" y="677" width="0.1304%" height="15" fill="rgb(234,122,0)" fg:x="3572" fg:w="174"/><text x="2.9279%" y="687.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (174 samples, 0.13%)</title><rect x="2.6779%" y="661" width="0.1304%" height="15" fill="rgb(207,146,38)" fg:x="3572" fg:w="174"/><text x="2.9279%" y="671.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (173 samples, 0.13%)</title><rect x="2.6786%" y="645" width="0.1297%" height="15" fill="rgb(207,177,25)" fg:x="3573" fg:w="173"/><text x="2.9286%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (173 samples, 0.13%)</title><rect x="2.6786%" y="629" width="0.1297%" height="15" fill="rgb(211,178,42)" fg:x="3573" fg:w="173"/><text x="2.9286%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (173 samples, 0.13%)</title><rect x="2.6786%" y="613" width="0.1297%" height="15" fill="rgb(230,69,54)" fg:x="3573" fg:w="173"/><text x="2.9286%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (173 samples, 0.13%)</title><rect x="2.6786%" y="597" width="0.1297%" height="15" fill="rgb(214,135,41)" fg:x="3573" fg:w="173"/><text x="2.9286%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (173 samples, 0.13%)</title><rect x="2.6786%" y="581" width="0.1297%" height="15" fill="rgb(237,67,25)" fg:x="3573" fg:w="173"/><text x="2.9286%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (41 samples, 0.03%)</title><rect x="2.7776%" y="565" width="0.0307%" height="15" fill="rgb(222,189,50)" fg:x="3705" fg:w="41"/><text x="3.0276%" y="575.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (213 samples, 0.16%)</title><rect x="2.6756%" y="789" width="0.1597%" height="15" fill="rgb(245,148,34)" fg:x="3569" fg:w="213"/><text x="2.9256%" y="799.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (211 samples, 0.16%)</title><rect x="2.6771%" y="773" width="0.1582%" height="15" fill="rgb(222,29,6)" fg:x="3571" fg:w="211"/><text x="2.9271%" y="783.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (211 samples, 0.16%)</title><rect x="2.6771%" y="757" width="0.1582%" height="15" fill="rgb(221,189,43)" fg:x="3571" fg:w="211"/><text x="2.9271%" y="767.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (211 samples, 0.16%)</title><rect x="2.6771%" y="741" width="0.1582%" height="15" fill="rgb(207,36,27)" fg:x="3571" fg:w="211"/><text x="2.9271%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (35 samples, 0.03%)</title><rect x="2.8091%" y="725" width="0.0262%" height="15" fill="rgb(217,90,24)" fg:x="3747" fg:w="35"/><text x="3.0591%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (35 samples, 0.03%)</title><rect x="2.8091%" y="709" width="0.0262%" height="15" fill="rgb(224,66,35)" fg:x="3747" fg:w="35"/><text x="3.0591%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.03%)</title><rect x="2.8098%" y="693" width="0.0255%" height="15" fill="rgb(221,13,50)" fg:x="3748" fg:w="34"/><text x="3.0598%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (30 samples, 0.02%)</title><rect x="2.8128%" y="677" width="0.0225%" height="15" fill="rgb(236,68,49)" fg:x="3752" fg:w="30"/><text x="3.0628%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (29 samples, 0.02%)</title><rect x="2.8136%" y="661" width="0.0217%" height="15" fill="rgb(229,146,28)" fg:x="3753" fg:w="29"/><text x="3.0636%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (22 samples, 0.02%)</title><rect x="2.8188%" y="645" width="0.0165%" height="15" fill="rgb(225,31,38)" fg:x="3760" fg:w="22"/><text x="3.0688%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (22 samples, 0.02%)</title><rect x="2.8188%" y="629" width="0.0165%" height="15" fill="rgb(250,208,3)" fg:x="3760" fg:w="22"/><text x="3.0688%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.01%)</title><rect x="2.8983%" y="725" width="0.0105%" height="15" fill="rgb(246,54,23)" fg:x="3866" fg:w="14"/><text x="3.1483%" y="735.50"></text></g><g><title>__GI___libc_malloc (55 samples, 0.04%)</title><rect x="2.9170%" y="613" width="0.0412%" height="15" fill="rgb(243,76,11)" fg:x="3891" fg:w="55"/><text x="3.1670%" y="623.50"></text></g><g><title>tcache_get (25 samples, 0.02%)</title><rect x="2.9395%" y="597" width="0.0187%" height="15" fill="rgb(245,21,50)" fg:x="3921" fg:w="25"/><text x="3.1895%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (77 samples, 0.06%)</title><rect x="2.9088%" y="725" width="0.0577%" height="15" fill="rgb(228,9,43)" fg:x="3880" fg:w="77"/><text x="3.1588%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (77 samples, 0.06%)</title><rect x="2.9088%" y="709" width="0.0577%" height="15" fill="rgb(208,100,47)" fg:x="3880" fg:w="77"/><text x="3.1588%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (77 samples, 0.06%)</title><rect x="2.9088%" y="693" width="0.0577%" height="15" fill="rgb(232,26,8)" fg:x="3880" fg:w="77"/><text x="3.1588%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (77 samples, 0.06%)</title><rect x="2.9088%" y="677" width="0.0577%" height="15" fill="rgb(216,166,38)" fg:x="3880" fg:w="77"/><text x="3.1588%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (73 samples, 0.05%)</title><rect x="2.9118%" y="661" width="0.0547%" height="15" fill="rgb(251,202,51)" fg:x="3884" fg:w="73"/><text x="3.1618%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (73 samples, 0.05%)</title><rect x="2.9118%" y="645" width="0.0547%" height="15" fill="rgb(254,216,34)" fg:x="3884" fg:w="73"/><text x="3.1618%" y="655.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 0.05%)</title><rect x="2.9155%" y="629" width="0.0510%" height="15" fill="rgb(251,32,27)" fg:x="3889" fg:w="68"/><text x="3.1655%" y="639.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (159 samples, 0.12%)</title><rect x="2.8533%" y="741" width="0.1192%" height="15" fill="rgb(208,127,28)" fg:x="3806" fg:w="159"/><text x="3.1033%" y="751.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="2.9725%" y="661" width="0.0135%" height="15" fill="rgb(224,137,22)" fg:x="3965" fg:w="18"/><text x="3.2225%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (49 samples, 0.04%)</title><rect x="2.9875%" y="565" width="0.0367%" height="15" fill="rgb(254,70,32)" fg:x="3985" fg:w="49"/><text x="3.2375%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (49 samples, 0.04%)</title><rect x="2.9875%" y="549" width="0.0367%" height="15" fill="rgb(229,75,37)" fg:x="3985" fg:w="49"/><text x="3.2375%" y="559.50"></text></g><g><title>_int_free (34 samples, 0.03%)</title><rect x="2.9987%" y="533" width="0.0255%" height="15" fill="rgb(252,64,23)" fg:x="4000" fg:w="34"/><text x="3.2487%" y="543.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}} (71 samples, 0.05%)</title><rect x="2.9725%" y="725" width="0.0532%" height="15" fill="rgb(232,162,48)" fg:x="3965" fg:w="71"/><text x="3.2225%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (71 samples, 0.05%)</title><rect x="2.9725%" y="709" width="0.0532%" height="15" fill="rgb(246,160,12)" fg:x="3965" fg:w="71"/><text x="3.2225%" y="719.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&gt;::sum (71 samples, 0.05%)</title><rect x="2.9725%" y="693" width="0.0532%" height="15" fill="rgb(247,166,0)" fg:x="3965" fg:w="71"/><text x="3.2225%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (71 samples, 0.05%)</title><rect x="2.9725%" y="677" width="0.0532%" height="15" fill="rgb(249,219,21)" fg:x="3965" fg:w="71"/><text x="3.2225%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (51 samples, 0.04%)</title><rect x="2.9875%" y="661" width="0.0382%" height="15" fill="rgb(205,209,3)" fg:x="3985" fg:w="51"/><text x="3.2375%" y="671.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="2.9875%" y="645" width="0.0382%" height="15" fill="rgb(243,44,1)" fg:x="3985" fg:w="51"/><text x="3.2375%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (51 samples, 0.04%)</title><rect x="2.9875%" y="629" width="0.0382%" height="15" fill="rgb(206,159,16)" fg:x="3985" fg:w="51"/><text x="3.2375%" y="639.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="2.9875%" y="613" width="0.0382%" height="15" fill="rgb(244,77,30)" fg:x="3985" fg:w="51"/><text x="3.2375%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (51 samples, 0.04%)</title><rect x="2.9875%" y="597" width="0.0382%" height="15" fill="rgb(218,69,12)" fg:x="3985" fg:w="51"/><text x="3.2375%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="2.9875%" y="581" width="0.0382%" height="15" fill="rgb(212,87,7)" fg:x="3985" fg:w="51"/><text x="3.2375%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (239 samples, 0.18%)</title><rect x="2.8473%" y="789" width="0.1792%" height="15" fill="rgb(245,114,25)" fg:x="3798" fg:w="239"/><text x="3.0973%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (239 samples, 0.18%)</title><rect x="2.8473%" y="773" width="0.1792%" height="15" fill="rgb(210,61,42)" fg:x="3798" fg:w="239"/><text x="3.0973%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (239 samples, 0.18%)</title><rect x="2.8473%" y="757" width="0.1792%" height="15" fill="rgb(211,52,33)" fg:x="3798" fg:w="239"/><text x="3.0973%" y="767.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (72 samples, 0.05%)</title><rect x="2.9725%" y="741" width="0.0540%" height="15" fill="rgb(234,58,33)" fg:x="3965" fg:w="72"/><text x="3.2225%" y="751.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="3.0475%" y="629" width="0.0127%" height="15" fill="rgb(220,115,36)" fg:x="4065" fg:w="17"/><text x="3.2975%" y="639.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="3.0475%" y="613" width="0.0127%" height="15" fill="rgb(243,153,54)" fg:x="4065" fg:w="17"/><text x="3.2975%" y="623.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="3.0475%" y="597" width="0.0127%" height="15" fill="rgb(251,47,18)" fg:x="4065" fg:w="17"/><text x="3.2975%" y="607.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="3.0475%" y="581" width="0.0127%" height="15" fill="rgb(242,102,42)" fg:x="4065" fg:w="17"/><text x="3.2975%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.01%)</title><rect x="3.0879%" y="469" width="0.0142%" height="15" fill="rgb(234,31,38)" fg:x="4119" fg:w="19"/><text x="3.3379%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (55 samples, 0.04%)</title><rect x="3.0677%" y="533" width="0.0412%" height="15" fill="rgb(221,117,51)" fg:x="4092" fg:w="55"/><text x="3.3177%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (55 samples, 0.04%)</title><rect x="3.0677%" y="517" width="0.0412%" height="15" fill="rgb(212,20,18)" fg:x="4092" fg:w="55"/><text x="3.3177%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (55 samples, 0.04%)</title><rect x="3.0677%" y="501" width="0.0412%" height="15" fill="rgb(245,133,36)" fg:x="4092" fg:w="55"/><text x="3.3177%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (35 samples, 0.03%)</title><rect x="3.0827%" y="485" width="0.0262%" height="15" fill="rgb(212,6,19)" fg:x="4112" fg:w="35"/><text x="3.3327%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (92 samples, 0.07%)</title><rect x="3.0617%" y="565" width="0.0690%" height="15" fill="rgb(218,1,36)" fg:x="4084" fg:w="92"/><text x="3.3117%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (87 samples, 0.07%)</title><rect x="3.0654%" y="549" width="0.0652%" height="15" fill="rgb(246,84,54)" fg:x="4089" fg:w="87"/><text x="3.3154%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (23 samples, 0.02%)</title><rect x="3.1134%" y="533" width="0.0172%" height="15" fill="rgb(242,110,6)" fg:x="4153" fg:w="23"/><text x="3.3634%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (23 samples, 0.02%)</title><rect x="3.1134%" y="517" width="0.0172%" height="15" fill="rgb(214,47,5)" fg:x="4153" fg:w="23"/><text x="3.3634%" y="527.50"></text></g><g><title>core::hash::Hasher::write_u8 (23 samples, 0.02%)</title><rect x="3.1134%" y="501" width="0.0172%" height="15" fill="rgb(218,159,25)" fg:x="4153" fg:w="23"/><text x="3.3634%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.02%)</title><rect x="3.1142%" y="485" width="0.0165%" height="15" fill="rgb(215,211,28)" fg:x="4154" fg:w="22"/><text x="3.3642%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (22 samples, 0.02%)</title><rect x="3.1142%" y="469" width="0.0165%" height="15" fill="rgb(238,59,32)" fg:x="4154" fg:w="22"/><text x="3.3642%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.02%)</title><rect x="3.1142%" y="453" width="0.0165%" height="15" fill="rgb(226,82,3)" fg:x="4154" fg:w="22"/><text x="3.3642%" y="463.50"></text></g><g><title>hashbrown::raw::h2 (18 samples, 0.01%)</title><rect x="3.1584%" y="517" width="0.0135%" height="15" fill="rgb(240,164,32)" fg:x="4213" fg:w="18"/><text x="3.4084%" y="527.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (174 samples, 0.13%)</title><rect x="3.0467%" y="645" width="0.1304%" height="15" fill="rgb(232,46,7)" fg:x="4064" fg:w="174"/><text x="3.2967%" y="655.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (156 samples, 0.12%)</title><rect x="3.0602%" y="629" width="0.1170%" height="15" fill="rgb(229,129,53)" fg:x="4082" fg:w="156"/><text x="3.3102%" y="639.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (156 samples, 0.12%)</title><rect x="3.0602%" y="613" width="0.1170%" height="15" fill="rgb(234,188,29)" fg:x="4082" fg:w="156"/><text x="3.3102%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (156 samples, 0.12%)</title><rect x="3.0602%" y="597" width="0.1170%" height="15" fill="rgb(246,141,4)" fg:x="4082" fg:w="156"/><text x="3.3102%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (156 samples, 0.12%)</title><rect x="3.0602%" y="581" width="0.1170%" height="15" fill="rgb(229,23,39)" fg:x="4082" fg:w="156"/><text x="3.3102%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (62 samples, 0.05%)</title><rect x="3.1307%" y="565" width="0.0465%" height="15" fill="rgb(206,12,3)" fg:x="4176" fg:w="62"/><text x="3.3807%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (62 samples, 0.05%)</title><rect x="3.1307%" y="549" width="0.0465%" height="15" fill="rgb(252,226,20)" fg:x="4176" fg:w="62"/><text x="3.3807%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (62 samples, 0.05%)</title><rect x="3.1307%" y="533" width="0.0465%" height="15" fill="rgb(216,123,35)" fg:x="4176" fg:w="62"/><text x="3.3807%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (24 samples, 0.02%)</title><rect x="3.1974%" y="469" width="0.0180%" height="15" fill="rgb(212,68,40)" fg:x="4265" fg:w="24"/><text x="3.4474%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (53 samples, 0.04%)</title><rect x="3.1779%" y="533" width="0.0397%" height="15" fill="rgb(254,125,32)" fg:x="4239" fg:w="53"/><text x="3.4279%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (53 samples, 0.04%)</title><rect x="3.1779%" y="517" width="0.0397%" height="15" fill="rgb(253,97,22)" fg:x="4239" fg:w="53"/><text x="3.4279%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (53 samples, 0.04%)</title><rect x="3.1779%" y="501" width="0.0397%" height="15" fill="rgb(241,101,14)" fg:x="4239" fg:w="53"/><text x="3.4279%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (34 samples, 0.03%)</title><rect x="3.1921%" y="485" width="0.0255%" height="15" fill="rgb(238,103,29)" fg:x="4258" fg:w="34"/><text x="3.4421%" y="495.50"></text></g><g><title>hashbrown::map::make_insert_hash (65 samples, 0.05%)</title><rect x="3.1779%" y="565" width="0.0487%" height="15" fill="rgb(233,195,47)" fg:x="4239" fg:w="65"/><text x="3.4279%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (65 samples, 0.05%)</title><rect x="3.1779%" y="549" width="0.0487%" height="15" fill="rgb(246,218,30)" fg:x="4239" fg:w="65"/><text x="3.4279%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (27 samples, 0.02%)</title><rect x="3.2266%" y="565" width="0.0202%" height="15" fill="rgb(219,145,47)" fg:x="4304" fg:w="27"/><text x="3.4766%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (27 samples, 0.02%)</title><rect x="3.2266%" y="549" width="0.0202%" height="15" fill="rgb(243,12,26)" fg:x="4304" fg:w="27"/><text x="3.4766%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (27 samples, 0.02%)</title><rect x="3.2266%" y="533" width="0.0202%" height="15" fill="rgb(214,87,16)" fg:x="4304" fg:w="27"/><text x="3.4766%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (30 samples, 0.02%)</title><rect x="3.2746%" y="421" width="0.0225%" height="15" fill="rgb(208,99,42)" fg:x="4368" fg:w="30"/><text x="3.5246%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (30 samples, 0.02%)</title><rect x="3.2746%" y="405" width="0.0225%" height="15" fill="rgb(253,99,2)" fg:x="4368" fg:w="30"/><text x="3.5246%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (30 samples, 0.02%)</title><rect x="3.2746%" y="389" width="0.0225%" height="15" fill="rgb(220,168,23)" fg:x="4368" fg:w="30"/><text x="3.5246%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (17 samples, 0.01%)</title><rect x="3.2844%" y="373" width="0.0127%" height="15" fill="rgb(242,38,24)" fg:x="4381" fg:w="17"/><text x="3.5344%" y="383.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (44 samples, 0.03%)</title><rect x="3.2731%" y="469" width="0.0330%" height="15" fill="rgb(225,182,9)" fg:x="4366" fg:w="44"/><text x="3.5231%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (44 samples, 0.03%)</title><rect x="3.2731%" y="453" width="0.0330%" height="15" fill="rgb(243,178,37)" fg:x="4366" fg:w="44"/><text x="3.5231%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (44 samples, 0.03%)</title><rect x="3.2731%" y="437" width="0.0330%" height="15" fill="rgb(232,139,19)" fg:x="4366" fg:w="44"/><text x="3.5231%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (45 samples, 0.03%)</title><rect x="3.2731%" y="485" width="0.0337%" height="15" fill="rgb(225,201,24)" fg:x="4366" fg:w="45"/><text x="3.5231%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (37 samples, 0.03%)</title><rect x="3.3113%" y="485" width="0.0277%" height="15" fill="rgb(221,47,46)" fg:x="4417" fg:w="37"/><text x="3.5613%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (37 samples, 0.03%)</title><rect x="3.3113%" y="469" width="0.0277%" height="15" fill="rgb(249,23,13)" fg:x="4417" fg:w="37"/><text x="3.5613%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (115 samples, 0.09%)</title><rect x="3.2611%" y="501" width="0.0862%" height="15" fill="rgb(219,9,5)" fg:x="4350" fg:w="115"/><text x="3.5111%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (117 samples, 0.09%)</title><rect x="3.2611%" y="549" width="0.0877%" height="15" fill="rgb(254,171,16)" fg:x="4350" fg:w="117"/><text x="3.5111%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (117 samples, 0.09%)</title><rect x="3.2611%" y="533" width="0.0877%" height="15" fill="rgb(230,171,20)" fg:x="4350" fg:w="117"/><text x="3.5111%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (117 samples, 0.09%)</title><rect x="3.2611%" y="517" width="0.0877%" height="15" fill="rgb(210,71,41)" fg:x="4350" fg:w="117"/><text x="3.5111%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (46 samples, 0.03%)</title><rect x="3.3488%" y="549" width="0.0345%" height="15" fill="rgb(206,173,20)" fg:x="4467" fg:w="46"/><text x="3.5988%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (475 samples, 0.36%)</title><rect x="3.0362%" y="677" width="0.3561%" height="15" fill="rgb(233,88,34)" fg:x="4050" fg:w="475"/><text x="3.2862%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (461 samples, 0.35%)</title><rect x="3.0467%" y="661" width="0.3456%" height="15" fill="rgb(223,209,46)" fg:x="4064" fg:w="461"/><text x="3.2967%" y="671.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (287 samples, 0.22%)</title><rect x="3.1771%" y="645" width="0.2152%" height="15" fill="rgb(250,43,18)" fg:x="4238" fg:w="287"/><text x="3.4271%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (287 samples, 0.22%)</title><rect x="3.1771%" y="629" width="0.2152%" height="15" fill="rgb(208,13,10)" fg:x="4238" fg:w="287"/><text x="3.4271%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (287 samples, 0.22%)</title><rect x="3.1771%" y="613" width="0.2152%" height="15" fill="rgb(212,200,36)" fg:x="4238" fg:w="287"/><text x="3.4271%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (287 samples, 0.22%)</title><rect x="3.1771%" y="597" width="0.2152%" height="15" fill="rgb(225,90,30)" fg:x="4238" fg:w="287"/><text x="3.4271%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (287 samples, 0.22%)</title><rect x="3.1771%" y="581" width="0.2152%" height="15" fill="rgb(236,182,39)" fg:x="4238" fg:w="287"/><text x="3.4271%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (194 samples, 0.15%)</title><rect x="3.2469%" y="565" width="0.1454%" height="15" fill="rgb(212,144,35)" fg:x="4331" fg:w="194"/><text x="3.4969%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (22 samples, 0.02%)</title><rect x="3.3953%" y="565" width="0.0165%" height="15" fill="rgb(228,63,44)" fg:x="4529" fg:w="22"/><text x="3.6453%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (22 samples, 0.02%)</title><rect x="3.3953%" y="549" width="0.0165%" height="15" fill="rgb(228,109,6)" fg:x="4529" fg:w="22"/><text x="3.6453%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (22 samples, 0.02%)</title><rect x="3.3953%" y="533" width="0.0165%" height="15" fill="rgb(238,117,24)" fg:x="4529" fg:w="22"/><text x="3.6453%" y="543.50"></text></g><g><title>hashbrown::map::make_insert_hash (31 samples, 0.02%)</title><rect x="3.3938%" y="597" width="0.0232%" height="15" fill="rgb(242,26,26)" fg:x="4527" fg:w="31"/><text x="3.6438%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (31 samples, 0.02%)</title><rect x="3.3938%" y="581" width="0.0232%" height="15" fill="rgb(221,92,48)" fg:x="4527" fg:w="31"/><text x="3.6438%" y="591.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (52 samples, 0.04%)</title><rect x="3.3938%" y="661" width="0.0390%" height="15" fill="rgb(209,209,32)" fg:x="4527" fg:w="52"/><text x="3.6438%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (52 samples, 0.04%)</title><rect x="3.3938%" y="645" width="0.0390%" height="15" fill="rgb(221,70,22)" fg:x="4527" fg:w="52"/><text x="3.6438%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (52 samples, 0.04%)</title><rect x="3.3938%" y="629" width="0.0390%" height="15" fill="rgb(248,145,5)" fg:x="4527" fg:w="52"/><text x="3.6438%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (52 samples, 0.04%)</title><rect x="3.3938%" y="613" width="0.0390%" height="15" fill="rgb(226,116,26)" fg:x="4527" fg:w="52"/><text x="3.6438%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (537 samples, 0.40%)</title><rect x="3.0325%" y="709" width="0.4026%" height="15" fill="rgb(244,5,17)" fg:x="4045" fg:w="537"/><text x="3.2825%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (535 samples, 0.40%)</title><rect x="3.0340%" y="693" width="0.4011%" height="15" fill="rgb(252,159,33)" fg:x="4047" fg:w="535"/><text x="3.2840%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (57 samples, 0.04%)</title><rect x="3.3923%" y="677" width="0.0427%" height="15" fill="rgb(206,71,0)" fg:x="4525" fg:w="57"/><text x="3.6423%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (14 samples, 0.01%)</title><rect x="3.4440%" y="597" width="0.0105%" height="15" fill="rgb(233,118,54)" fg:x="4594" fg:w="14"/><text x="3.6940%" y="607.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (565 samples, 0.42%)</title><rect x="3.0317%" y="757" width="0.4236%" height="15" fill="rgb(234,83,48)" fg:x="4044" fg:w="565"/><text x="3.2817%" y="767.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (565 samples, 0.42%)</title><rect x="3.0317%" y="741" width="0.4236%" height="15" fill="rgb(228,3,54)" fg:x="4044" fg:w="565"/><text x="3.2817%" y="751.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (565 samples, 0.42%)</title><rect x="3.0317%" y="725" width="0.4236%" height="15" fill="rgb(226,155,13)" fg:x="4044" fg:w="565"/><text x="3.2817%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (27 samples, 0.02%)</title><rect x="3.4350%" y="709" width="0.0202%" height="15" fill="rgb(241,28,37)" fg:x="4582" fg:w="27"/><text x="3.6850%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (27 samples, 0.02%)</title><rect x="3.4350%" y="693" width="0.0202%" height="15" fill="rgb(233,93,10)" fg:x="4582" fg:w="27"/><text x="3.6850%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (27 samples, 0.02%)</title><rect x="3.4350%" y="677" width="0.0202%" height="15" fill="rgb(225,113,19)" fg:x="4582" fg:w="27"/><text x="3.6850%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (27 samples, 0.02%)</title><rect x="3.4350%" y="661" width="0.0202%" height="15" fill="rgb(241,2,18)" fg:x="4582" fg:w="27"/><text x="3.6850%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (27 samples, 0.02%)</title><rect x="3.4350%" y="645" width="0.0202%" height="15" fill="rgb(228,207,21)" fg:x="4582" fg:w="27"/><text x="3.6850%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (18 samples, 0.01%)</title><rect x="3.4418%" y="629" width="0.0135%" height="15" fill="rgb(213,211,35)" fg:x="4591" fg:w="18"/><text x="3.6918%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (18 samples, 0.01%)</title><rect x="3.4418%" y="613" width="0.0135%" height="15" fill="rgb(209,83,10)" fg:x="4591" fg:w="18"/><text x="3.6918%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (573 samples, 0.43%)</title><rect x="3.0265%" y="789" width="0.4296%" height="15" fill="rgb(209,164,1)" fg:x="4037" fg:w="573"/><text x="3.2765%" y="799.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (573 samples, 0.43%)</title><rect x="3.0265%" y="773" width="0.4296%" height="15" fill="rgb(213,184,43)" fg:x="4037" fg:w="573"/><text x="3.2765%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;,&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}}&gt;&gt; (28 samples, 0.02%)</title><rect x="3.4650%" y="789" width="0.0210%" height="15" fill="rgb(231,61,34)" fg:x="4622" fg:w="28"/><text x="3.7150%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="3.4650%" y="773" width="0.0210%" height="15" fill="rgb(235,75,3)" fg:x="4622" fg:w="28"/><text x="3.7150%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::LazyBuffer&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="3.4718%" y="757" width="0.0142%" height="15" fill="rgb(220,106,47)" fg:x="4631" fg:w="19"/><text x="3.7218%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="3.4965%" y="741" width="0.0157%" height="15" fill="rgb(210,196,33)" fg:x="4664" fg:w="21"/><text x="3.7465%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="3.4965%" y="725" width="0.0157%" height="15" fill="rgb(229,154,42)" fg:x="4664" fg:w="21"/><text x="3.7465%" y="735.50"></text></g><g><title>itertools::Itertools::collect_vec (49 samples, 0.04%)</title><rect x="3.4943%" y="789" width="0.0367%" height="15" fill="rgb(228,114,26)" fg:x="4661" fg:w="49"/><text x="3.7443%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (49 samples, 0.04%)</title><rect x="3.4943%" y="773" width="0.0367%" height="15" fill="rgb(208,144,1)" fg:x="4661" fg:w="49"/><text x="3.7443%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (49 samples, 0.04%)</title><rect x="3.4943%" y="757" width="0.0367%" height="15" fill="rgb(239,112,37)" fg:x="4661" fg:w="49"/><text x="3.7443%" y="767.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (25 samples, 0.02%)</title><rect x="3.5123%" y="741" width="0.0187%" height="15" fill="rgb(210,96,50)" fg:x="4685" fg:w="25"/><text x="3.7623%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (22 samples, 0.02%)</title><rect x="3.5145%" y="725" width="0.0165%" height="15" fill="rgb(222,178,2)" fg:x="4688" fg:w="22"/><text x="3.7645%" y="735.50"></text></g><g><title>itertools::Itertools::combinations (54 samples, 0.04%)</title><rect x="3.5310%" y="789" width="0.0405%" height="15" fill="rgb(226,74,18)" fg:x="4710" fg:w="54"/><text x="3.7810%" y="799.50"></text></g><g><title>itertools::combinations::combinations (54 samples, 0.04%)</title><rect x="3.5310%" y="773" width="0.0405%" height="15" fill="rgb(225,67,54)" fg:x="4710" fg:w="54"/><text x="3.7810%" y="783.50"></text></g><g><title>itertools::combinations::LazyBuffer&lt;I&gt;::new (27 samples, 0.02%)</title><rect x="3.5512%" y="757" width="0.0202%" height="15" fill="rgb(251,92,32)" fg:x="4737" fg:w="27"/><text x="3.8012%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.01%)</title><rect x="3.5610%" y="741" width="0.0105%" height="15" fill="rgb(228,149,22)" fg:x="4750" fg:w="14"/><text x="3.8110%" y="751.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (1,210 samples, 0.91%)</title><rect x="2.6674%" y="805" width="0.9071%" height="15" fill="rgb(243,54,13)" fg:x="3558" fg:w="1210"/><text x="2.9174%" y="815.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.01%)</title><rect x="3.5947%" y="469" width="0.0112%" height="15" fill="rgb(243,180,28)" fg:x="4795" fg:w="15"/><text x="3.8447%" y="479.50"></text></g><g><title>_int_realloc (15 samples, 0.01%)</title><rect x="3.5947%" y="453" width="0.0112%" height="15" fill="rgb(208,167,24)" fg:x="4795" fg:w="15"/><text x="3.8447%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 0.01%)</title><rect x="3.5932%" y="533" width="0.0150%" height="15" fill="rgb(245,73,45)" fg:x="4793" fg:w="20"/><text x="3.8432%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (19 samples, 0.01%)</title><rect x="3.5940%" y="517" width="0.0142%" height="15" fill="rgb(237,203,48)" fg:x="4794" fg:w="19"/><text x="3.8440%" y="527.50"></text></g><g><title>alloc::alloc::Global::grow_impl (19 samples, 0.01%)</title><rect x="3.5940%" y="501" width="0.0142%" height="15" fill="rgb(211,197,16)" fg:x="4794" fg:w="19"/><text x="3.8440%" y="511.50"></text></g><g><title>alloc::alloc::realloc (18 samples, 0.01%)</title><rect x="3.5947%" y="485" width="0.0135%" height="15" fill="rgb(243,99,51)" fg:x="4795" fg:w="18"/><text x="3.8447%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (31 samples, 0.02%)</title><rect x="3.5865%" y="597" width="0.0232%" height="15" fill="rgb(215,123,29)" fg:x="4784" fg:w="31"/><text x="3.8365%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (31 samples, 0.02%)</title><rect x="3.5865%" y="581" width="0.0232%" height="15" fill="rgb(239,186,37)" fg:x="4784" fg:w="31"/><text x="3.8365%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (22 samples, 0.02%)</title><rect x="3.5932%" y="565" width="0.0165%" height="15" fill="rgb(252,136,39)" fg:x="4793" fg:w="22"/><text x="3.8432%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (22 samples, 0.02%)</title><rect x="3.5932%" y="549" width="0.0165%" height="15" fill="rgb(223,213,32)" fg:x="4793" fg:w="22"/><text x="3.8432%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.02%)</title><rect x="3.6097%" y="597" width="0.0225%" height="15" fill="rgb(233,115,5)" fg:x="4815" fg:w="30"/><text x="3.8597%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.02%)</title><rect x="3.6157%" y="581" width="0.0165%" height="15" fill="rgb(207,226,44)" fg:x="4823" fg:w="22"/><text x="3.8657%" y="591.50"></text></g><g><title>alloc::string::String::push_str (64 samples, 0.05%)</title><rect x="3.5857%" y="661" width="0.0480%" height="15" fill="rgb(208,126,0)" fg:x="4783" fg:w="64"/><text x="3.8357%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (64 samples, 0.05%)</title><rect x="3.5857%" y="645" width="0.0480%" height="15" fill="rgb(244,66,21)" fg:x="4783" fg:w="64"/><text x="3.8357%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (64 samples, 0.05%)</title><rect x="3.5857%" y="629" width="0.0480%" height="15" fill="rgb(222,97,12)" fg:x="4783" fg:w="64"/><text x="3.8357%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (64 samples, 0.05%)</title><rect x="3.5857%" y="613" width="0.0480%" height="15" fill="rgb(219,213,19)" fg:x="4783" fg:w="64"/><text x="3.8357%" y="623.50"></text></g><g><title>__GI___libc_free (21 samples, 0.02%)</title><rect x="3.6472%" y="565" width="0.0157%" height="15" fill="rgb(252,169,30)" fg:x="4865" fg:w="21"/><text x="3.8972%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (186 samples, 0.14%)</title><rect x="3.5857%" y="693" width="0.1394%" height="15" fill="rgb(206,32,51)" fg:x="4783" fg:w="186"/><text x="3.8357%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (186 samples, 0.14%)</title><rect x="3.5857%" y="677" width="0.1394%" height="15" fill="rgb(250,172,42)" fg:x="4783" fg:w="186"/><text x="3.8357%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (122 samples, 0.09%)</title><rect x="3.6337%" y="661" width="0.0915%" height="15" fill="rgb(209,34,43)" fg:x="4847" fg:w="122"/><text x="3.8837%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (122 samples, 0.09%)</title><rect x="3.6337%" y="645" width="0.0915%" height="15" fill="rgb(223,11,35)" fg:x="4847" fg:w="122"/><text x="3.8837%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (122 samples, 0.09%)</title><rect x="3.6337%" y="629" width="0.0915%" height="15" fill="rgb(251,219,26)" fg:x="4847" fg:w="122"/><text x="3.8837%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (122 samples, 0.09%)</title><rect x="3.6337%" y="613" width="0.0915%" height="15" fill="rgb(231,119,3)" fg:x="4847" fg:w="122"/><text x="3.8837%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (122 samples, 0.09%)</title><rect x="3.6337%" y="597" width="0.0915%" height="15" fill="rgb(216,97,11)" fg:x="4847" fg:w="122"/><text x="3.8837%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (122 samples, 0.09%)</title><rect x="3.6337%" y="581" width="0.0915%" height="15" fill="rgb(223,59,9)" fg:x="4847" fg:w="122"/><text x="3.8837%" y="591.50"></text></g><g><title>_int_free (75 samples, 0.06%)</title><rect x="3.6689%" y="565" width="0.0562%" height="15" fill="rgb(233,93,31)" fg:x="4894" fg:w="75"/><text x="3.9189%" y="575.50"></text></g><g><title>__GI___libc_malloc (47 samples, 0.04%)</title><rect x="3.7417%" y="453" width="0.0352%" height="15" fill="rgb(239,81,33)" fg:x="4991" fg:w="47"/><text x="3.9917%" y="463.50"></text></g><g><title>tcache_get (19 samples, 0.01%)</title><rect x="3.7627%" y="437" width="0.0142%" height="15" fill="rgb(213,120,34)" fg:x="5019" fg:w="19"/><text x="4.0127%" y="447.50"></text></g><g><title>__rdl_alloc (19 samples, 0.01%)</title><rect x="3.7769%" y="453" width="0.0142%" height="15" fill="rgb(243,49,53)" fg:x="5038" fg:w="19"/><text x="4.0269%" y="463.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (97 samples, 0.07%)</title><rect x="3.7259%" y="677" width="0.0727%" height="15" fill="rgb(247,216,33)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (97 samples, 0.07%)</title><rect x="3.7259%" y="661" width="0.0727%" height="15" fill="rgb(226,26,14)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="671.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (97 samples, 0.07%)</title><rect x="3.7259%" y="645" width="0.0727%" height="15" fill="rgb(215,49,53)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (97 samples, 0.07%)</title><rect x="3.7259%" y="629" width="0.0727%" height="15" fill="rgb(245,162,40)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (97 samples, 0.07%)</title><rect x="3.7259%" y="613" width="0.0727%" height="15" fill="rgb(229,68,17)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (97 samples, 0.07%)</title><rect x="3.7259%" y="597" width="0.0727%" height="15" fill="rgb(213,182,10)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (97 samples, 0.07%)</title><rect x="3.7259%" y="581" width="0.0727%" height="15" fill="rgb(245,125,30)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (97 samples, 0.07%)</title><rect x="3.7259%" y="565" width="0.0727%" height="15" fill="rgb(232,202,2)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (97 samples, 0.07%)</title><rect x="3.7259%" y="549" width="0.0727%" height="15" fill="rgb(237,140,51)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (97 samples, 0.07%)</title><rect x="3.7259%" y="533" width="0.0727%" height="15" fill="rgb(236,157,25)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (97 samples, 0.07%)</title><rect x="3.7259%" y="517" width="0.0727%" height="15" fill="rgb(219,209,0)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (97 samples, 0.07%)</title><rect x="3.7259%" y="501" width="0.0727%" height="15" fill="rgb(240,116,54)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (97 samples, 0.07%)</title><rect x="3.7259%" y="485" width="0.0727%" height="15" fill="rgb(216,10,36)" fg:x="4970" fg:w="97"/><text x="3.9759%" y="495.50"></text></g><g><title>alloc::alloc::alloc (78 samples, 0.06%)</title><rect x="3.7402%" y="469" width="0.0585%" height="15" fill="rgb(222,72,44)" fg:x="4989" fg:w="78"/><text x="3.9902%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (24 samples, 0.02%)</title><rect x="3.8219%" y="597" width="0.0180%" height="15" fill="rgb(232,159,9)" fg:x="5098" fg:w="24"/><text x="4.0719%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (23 samples, 0.02%)</title><rect x="3.8226%" y="581" width="0.0172%" height="15" fill="rgb(210,39,32)" fg:x="5099" fg:w="23"/><text x="4.0726%" y="591.50"></text></g><g><title>alloc::string::String::push_str (23 samples, 0.02%)</title><rect x="3.8226%" y="565" width="0.0172%" height="15" fill="rgb(216,194,45)" fg:x="5099" fg:w="23"/><text x="4.0726%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (23 samples, 0.02%)</title><rect x="3.8226%" y="549" width="0.0172%" height="15" fill="rgb(218,18,35)" fg:x="5099" fg:w="23"/><text x="4.0726%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (23 samples, 0.02%)</title><rect x="3.8226%" y="533" width="0.0172%" height="15" fill="rgb(207,83,51)" fg:x="5099" fg:w="23"/><text x="4.0726%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (23 samples, 0.02%)</title><rect x="3.8226%" y="517" width="0.0172%" height="15" fill="rgb(225,63,43)" fg:x="5099" fg:w="23"/><text x="4.0726%" y="527.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (35 samples, 0.03%)</title><rect x="3.8189%" y="629" width="0.0262%" height="15" fill="rgb(207,57,36)" fg:x="5094" fg:w="35"/><text x="4.0689%" y="639.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (33 samples, 0.02%)</title><rect x="3.8204%" y="613" width="0.0247%" height="15" fill="rgb(216,99,33)" fg:x="5096" fg:w="33"/><text x="4.0704%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (59 samples, 0.04%)</title><rect x="3.8024%" y="661" width="0.0442%" height="15" fill="rgb(225,42,16)" fg:x="5072" fg:w="59"/><text x="4.0524%" y="671.50"></text></g><g><title>core::fmt::write (47 samples, 0.04%)</title><rect x="3.8114%" y="645" width="0.0352%" height="15" fill="rgb(220,201,45)" fg:x="5084" fg:w="47"/><text x="4.0614%" y="655.50"></text></g><g><title>alloc::fmt::format (66 samples, 0.05%)</title><rect x="3.7986%" y="677" width="0.0495%" height="15" fill="rgb(225,33,4)" fg:x="5067" fg:w="66"/><text x="4.0486%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (353 samples, 0.26%)</title><rect x="3.5842%" y="773" width="0.2646%" height="15" fill="rgb(224,33,50)" fg:x="4781" fg:w="353"/><text x="3.8342%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (353 samples, 0.26%)</title><rect x="3.5842%" y="757" width="0.2646%" height="15" fill="rgb(246,198,51)" fg:x="4781" fg:w="353"/><text x="3.8342%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (353 samples, 0.26%)</title><rect x="3.5842%" y="741" width="0.2646%" height="15" fill="rgb(205,22,4)" fg:x="4781" fg:w="353"/><text x="3.8342%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (352 samples, 0.26%)</title><rect x="3.5850%" y="725" width="0.2639%" height="15" fill="rgb(206,3,8)" fg:x="4782" fg:w="352"/><text x="3.8350%" y="735.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (351 samples, 0.26%)</title><rect x="3.5857%" y="709" width="0.2631%" height="15" fill="rgb(251,23,15)" fg:x="4783" fg:w="351"/><text x="3.8357%" y="719.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (165 samples, 0.12%)</title><rect x="3.7252%" y="693" width="0.1237%" height="15" fill="rgb(252,88,28)" fg:x="4969" fg:w="165"/><text x="3.9752%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (362 samples, 0.27%)</title><rect x="3.5835%" y="805" width="0.2714%" height="15" fill="rgb(212,127,14)" fg:x="4780" fg:w="362"/><text x="3.8335%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (362 samples, 0.27%)</title><rect x="3.5835%" y="789" width="0.2714%" height="15" fill="rgb(247,145,37)" fg:x="4780" fg:w="362"/><text x="3.8335%" y="799.50"></text></g><g><title>hashbrown::map::make_insert_hash (17 samples, 0.01%)</title><rect x="3.8616%" y="549" width="0.0127%" height="15" fill="rgb(209,117,53)" fg:x="5151" fg:w="17"/><text x="4.1116%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.01%)</title><rect x="3.8631%" y="533" width="0.0112%" height="15" fill="rgb(212,90,42)" fg:x="5153" fg:w="15"/><text x="4.1131%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (43 samples, 0.03%)</title><rect x="3.8616%" y="709" width="0.0322%" height="15" fill="rgb(218,164,37)" fg:x="5151" fg:w="43"/><text x="4.1116%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (43 samples, 0.03%)</title><rect x="3.8616%" y="693" width="0.0322%" height="15" fill="rgb(246,65,34)" fg:x="5151" fg:w="43"/><text x="4.1116%" y="703.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (43 samples, 0.03%)</title><rect x="3.8616%" y="677" width="0.0322%" height="15" fill="rgb(231,100,33)" fg:x="5151" fg:w="43"/><text x="4.1116%" y="687.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (43 samples, 0.03%)</title><rect x="3.8616%" y="661" width="0.0322%" height="15" fill="rgb(228,126,14)" fg:x="5151" fg:w="43"/><text x="4.1116%" y="671.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (43 samples, 0.03%)</title><rect x="3.8616%" y="645" width="0.0322%" height="15" fill="rgb(215,173,21)" fg:x="5151" fg:w="43"/><text x="4.1116%" y="655.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (43 samples, 0.03%)</title><rect x="3.8616%" y="629" width="0.0322%" height="15" fill="rgb(210,6,40)" fg:x="5151" fg:w="43"/><text x="4.1116%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (43 samples, 0.03%)</title><rect x="3.8616%" y="613" width="0.0322%" height="15" fill="rgb(212,48,18)" fg:x="5151" fg:w="43"/><text x="4.1116%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (43 samples, 0.03%)</title><rect x="3.8616%" y="597" width="0.0322%" height="15" fill="rgb(230,214,11)" fg:x="5151" fg:w="43"/><text x="4.1116%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (43 samples, 0.03%)</title><rect x="3.8616%" y="581" width="0.0322%" height="15" fill="rgb(254,105,39)" fg:x="5151" fg:w="43"/><text x="4.1116%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (43 samples, 0.03%)</title><rect x="3.8616%" y="565" width="0.0322%" height="15" fill="rgb(245,158,5)" fg:x="5151" fg:w="43"/><text x="4.1116%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.01%)</title><rect x="3.8833%" y="549" width="0.0105%" height="15" fill="rgb(249,208,11)" fg:x="5180" fg:w="14"/><text x="4.1333%" y="559.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (51 samples, 0.04%)</title><rect x="3.8609%" y="773" width="0.0382%" height="15" fill="rgb(210,39,28)" fg:x="5150" fg:w="51"/><text x="4.1109%" y="783.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (50 samples, 0.04%)</title><rect x="3.8616%" y="757" width="0.0375%" height="15" fill="rgb(211,56,53)" fg:x="5151" fg:w="50"/><text x="4.1116%" y="767.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (50 samples, 0.04%)</title><rect x="3.8616%" y="741" width="0.0375%" height="15" fill="rgb(226,201,30)" fg:x="5151" fg:w="50"/><text x="4.1116%" y="751.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (50 samples, 0.04%)</title><rect x="3.8616%" y="725" width="0.0375%" height="15" fill="rgb(239,101,34)" fg:x="5151" fg:w="50"/><text x="4.1116%" y="735.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="3.9006%" y="725" width="0.0127%" height="15" fill="rgb(226,209,5)" fg:x="5203" fg:w="17"/><text x="4.1506%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (35 samples, 0.03%)</title><rect x="3.8998%" y="773" width="0.0262%" height="15" fill="rgb(250,105,47)" fg:x="5202" fg:w="35"/><text x="4.1498%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (35 samples, 0.03%)</title><rect x="3.8998%" y="757" width="0.0262%" height="15" fill="rgb(230,72,3)" fg:x="5202" fg:w="35"/><text x="4.1498%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (35 samples, 0.03%)</title><rect x="3.8998%" y="741" width="0.0262%" height="15" fill="rgb(232,218,39)" fg:x="5202" fg:w="35"/><text x="4.1498%" y="751.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (17 samples, 0.01%)</title><rect x="3.9133%" y="725" width="0.0127%" height="15" fill="rgb(248,166,6)" fg:x="5220" fg:w="17"/><text x="4.1633%" y="735.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}} (17 samples, 0.01%)</title><rect x="3.9133%" y="709" width="0.0127%" height="15" fill="rgb(247,89,20)" fg:x="5220" fg:w="17"/><text x="4.1633%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (17 samples, 0.01%)</title><rect x="3.9133%" y="693" width="0.0127%" height="15" fill="rgb(248,130,54)" fg:x="5220" fg:w="17"/><text x="4.1633%" y="703.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&gt;::sum (17 samples, 0.01%)</title><rect x="3.9133%" y="677" width="0.0127%" height="15" fill="rgb(234,196,4)" fg:x="5220" fg:w="17"/><text x="4.1633%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (17 samples, 0.01%)</title><rect x="3.9133%" y="661" width="0.0127%" height="15" fill="rgb(250,143,31)" fg:x="5220" fg:w="17"/><text x="4.1633%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 0.01%)</title><rect x="3.9343%" y="517" width="0.0112%" height="15" fill="rgb(211,110,34)" fg:x="5248" fg:w="15"/><text x="4.1843%" y="527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 0.01%)</title><rect x="3.9343%" y="501" width="0.0112%" height="15" fill="rgb(215,124,48)" fg:x="5248" fg:w="15"/><text x="4.1843%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 0.01%)</title><rect x="3.9343%" y="485" width="0.0112%" height="15" fill="rgb(216,46,13)" fg:x="5248" fg:w="15"/><text x="4.1843%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.01%)</title><rect x="3.9343%" y="549" width="0.0150%" height="15" fill="rgb(205,184,25)" fg:x="5248" fg:w="20"/><text x="4.1843%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.01%)</title><rect x="3.9343%" y="533" width="0.0150%" height="15" fill="rgb(228,1,10)" fg:x="5248" fg:w="20"/><text x="4.1843%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.04%)</title><rect x="3.9298%" y="629" width="0.0375%" height="15" fill="rgb(213,116,27)" fg:x="5242" fg:w="50"/><text x="4.1798%" y="639.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (44 samples, 0.03%)</title><rect x="3.9343%" y="613" width="0.0330%" height="15" fill="rgb(241,95,50)" fg:x="5248" fg:w="44"/><text x="4.1843%" y="623.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (44 samples, 0.03%)</title><rect x="3.9343%" y="597" width="0.0330%" height="15" fill="rgb(238,48,32)" fg:x="5248" fg:w="44"/><text x="4.1843%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (44 samples, 0.03%)</title><rect x="3.9343%" y="581" width="0.0330%" height="15" fill="rgb(235,113,49)" fg:x="5248" fg:w="44"/><text x="4.1843%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (44 samples, 0.03%)</title><rect x="3.9343%" y="565" width="0.0330%" height="15" fill="rgb(205,127,43)" fg:x="5248" fg:w="44"/><text x="4.1843%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (24 samples, 0.02%)</title><rect x="3.9493%" y="549" width="0.0180%" height="15" fill="rgb(250,162,2)" fg:x="5268" fg:w="24"/><text x="4.1993%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (24 samples, 0.02%)</title><rect x="3.9493%" y="533" width="0.0180%" height="15" fill="rgb(220,13,41)" fg:x="5268" fg:w="24"/><text x="4.1993%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (24 samples, 0.02%)</title><rect x="3.9493%" y="517" width="0.0180%" height="15" fill="rgb(249,221,25)" fg:x="5268" fg:w="24"/><text x="4.1993%" y="527.50"></text></g><g><title>hashbrown::map::make_insert_hash (18 samples, 0.01%)</title><rect x="3.9673%" y="549" width="0.0135%" height="15" fill="rgb(215,208,19)" fg:x="5292" fg:w="18"/><text x="4.2173%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.01%)</title><rect x="3.9673%" y="533" width="0.0135%" height="15" fill="rgb(236,175,2)" fg:x="5292" fg:w="18"/><text x="4.2173%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="3.9883%" y="533" width="0.0180%" height="15" fill="rgb(241,52,2)" fg:x="5320" fg:w="24"/><text x="4.2383%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.02%)</title><rect x="3.9883%" y="517" width="0.0180%" height="15" fill="rgb(248,140,14)" fg:x="5320" fg:w="24"/><text x="4.2383%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (24 samples, 0.02%)</title><rect x="3.9883%" y="501" width="0.0180%" height="15" fill="rgb(253,22,42)" fg:x="5320" fg:w="24"/><text x="4.2383%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (24 samples, 0.02%)</title><rect x="3.9883%" y="485" width="0.0180%" height="15" fill="rgb(234,61,47)" fg:x="5320" fg:w="24"/><text x="4.2383%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (114 samples, 0.09%)</title><rect x="3.9276%" y="661" width="0.0855%" height="15" fill="rgb(208,226,15)" fg:x="5239" fg:w="114"/><text x="4.1776%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (111 samples, 0.08%)</title><rect x="3.9298%" y="645" width="0.0832%" height="15" fill="rgb(217,221,4)" fg:x="5242" fg:w="111"/><text x="4.1798%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (61 samples, 0.05%)</title><rect x="3.9673%" y="629" width="0.0457%" height="15" fill="rgb(212,174,34)" fg:x="5292" fg:w="61"/><text x="4.2173%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (61 samples, 0.05%)</title><rect x="3.9673%" y="613" width="0.0457%" height="15" fill="rgb(253,83,4)" fg:x="5292" fg:w="61"/><text x="4.2173%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (61 samples, 0.05%)</title><rect x="3.9673%" y="597" width="0.0457%" height="15" fill="rgb(250,195,49)" fg:x="5292" fg:w="61"/><text x="4.2173%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (61 samples, 0.05%)</title><rect x="3.9673%" y="581" width="0.0457%" height="15" fill="rgb(241,192,25)" fg:x="5292" fg:w="61"/><text x="4.2173%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (61 samples, 0.05%)</title><rect x="3.9673%" y="565" width="0.0457%" height="15" fill="rgb(208,124,10)" fg:x="5292" fg:w="61"/><text x="4.2173%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (36 samples, 0.03%)</title><rect x="3.9861%" y="549" width="0.0270%" height="15" fill="rgb(222,33,0)" fg:x="5317" fg:w="36"/><text x="4.2361%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (125 samples, 0.09%)</title><rect x="3.9268%" y="693" width="0.0937%" height="15" fill="rgb(234,209,28)" fg:x="5238" fg:w="125"/><text x="4.1768%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (125 samples, 0.09%)</title><rect x="3.9268%" y="677" width="0.0937%" height="15" fill="rgb(224,11,23)" fg:x="5238" fg:w="125"/><text x="4.1768%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (132 samples, 0.10%)</title><rect x="3.9261%" y="773" width="0.0990%" height="15" fill="rgb(232,99,1)" fg:x="5237" fg:w="132"/><text x="4.1761%" y="783.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (132 samples, 0.10%)</title><rect x="3.9261%" y="757" width="0.0990%" height="15" fill="rgb(237,95,45)" fg:x="5237" fg:w="132"/><text x="4.1761%" y="767.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (132 samples, 0.10%)</title><rect x="3.9261%" y="741" width="0.0990%" height="15" fill="rgb(208,109,11)" fg:x="5237" fg:w="132"/><text x="4.1761%" y="751.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (132 samples, 0.10%)</title><rect x="3.9261%" y="725" width="0.0990%" height="15" fill="rgb(216,190,48)" fg:x="5237" fg:w="132"/><text x="4.1761%" y="735.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (132 samples, 0.10%)</title><rect x="3.9261%" y="709" width="0.0990%" height="15" fill="rgb(251,171,36)" fg:x="5237" fg:w="132"/><text x="4.1761%" y="719.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (253 samples, 0.19%)</title><rect x="3.8579%" y="789" width="0.1897%" height="15" fill="rgb(230,62,22)" fg:x="5146" fg:w="253"/><text x="4.1079%" y="799.50"></text></g><g><title>alloc::string::String::push_str (14 samples, 0.01%)</title><rect x="4.0550%" y="645" width="0.0105%" height="15" fill="rgb(225,114,35)" fg:x="5409" fg:w="14"/><text x="4.3050%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (14 samples, 0.01%)</title><rect x="4.0550%" y="629" width="0.0105%" height="15" fill="rgb(215,118,42)" fg:x="5409" fg:w="14"/><text x="4.3050%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.01%)</title><rect x="4.0550%" y="613" width="0.0105%" height="15" fill="rgb(243,119,21)" fg:x="5409" fg:w="14"/><text x="4.3050%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (14 samples, 0.01%)</title><rect x="4.0550%" y="597" width="0.0105%" height="15" fill="rgb(252,177,53)" fg:x="5409" fg:w="14"/><text x="4.3050%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (57 samples, 0.04%)</title><rect x="4.0550%" y="677" width="0.0427%" height="15" fill="rgb(237,209,29)" fg:x="5409" fg:w="57"/><text x="4.3050%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (57 samples, 0.04%)</title><rect x="4.0550%" y="661" width="0.0427%" height="15" fill="rgb(212,65,23)" fg:x="5409" fg:w="57"/><text x="4.3050%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (43 samples, 0.03%)</title><rect x="4.0655%" y="645" width="0.0322%" height="15" fill="rgb(230,222,46)" fg:x="5423" fg:w="43"/><text x="4.3155%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (43 samples, 0.03%)</title><rect x="4.0655%" y="629" width="0.0322%" height="15" fill="rgb(215,135,32)" fg:x="5423" fg:w="43"/><text x="4.3155%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (43 samples, 0.03%)</title><rect x="4.0655%" y="613" width="0.0322%" height="15" fill="rgb(246,101,22)" fg:x="5423" fg:w="43"/><text x="4.3155%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.03%)</title><rect x="4.0655%" y="597" width="0.0322%" height="15" fill="rgb(206,107,13)" fg:x="5423" fg:w="43"/><text x="4.3155%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43 samples, 0.03%)</title><rect x="4.0655%" y="581" width="0.0322%" height="15" fill="rgb(250,100,44)" fg:x="5423" fg:w="43"/><text x="4.3155%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (43 samples, 0.03%)</title><rect x="4.0655%" y="565" width="0.0322%" height="15" fill="rgb(231,147,38)" fg:x="5423" fg:w="43"/><text x="4.3155%" y="575.50"></text></g><g><title>_int_free (29 samples, 0.02%)</title><rect x="4.0760%" y="549" width="0.0217%" height="15" fill="rgb(229,8,40)" fg:x="5437" fg:w="29"/><text x="4.3260%" y="559.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.01%)</title><rect x="4.1023%" y="437" width="0.0135%" height="15" fill="rgb(221,135,30)" fg:x="5472" fg:w="18"/><text x="4.3523%" y="447.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (29 samples, 0.02%)</title><rect x="4.0978%" y="661" width="0.0217%" height="15" fill="rgb(249,193,18)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (29 samples, 0.02%)</title><rect x="4.0978%" y="645" width="0.0217%" height="15" fill="rgb(209,133,39)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="655.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (29 samples, 0.02%)</title><rect x="4.0978%" y="629" width="0.0217%" height="15" fill="rgb(232,100,14)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (29 samples, 0.02%)</title><rect x="4.0978%" y="613" width="0.0217%" height="15" fill="rgb(224,185,1)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (29 samples, 0.02%)</title><rect x="4.0978%" y="597" width="0.0217%" height="15" fill="rgb(223,139,8)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (29 samples, 0.02%)</title><rect x="4.0978%" y="581" width="0.0217%" height="15" fill="rgb(232,213,38)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (29 samples, 0.02%)</title><rect x="4.0978%" y="565" width="0.0217%" height="15" fill="rgb(207,94,22)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (29 samples, 0.02%)</title><rect x="4.0978%" y="549" width="0.0217%" height="15" fill="rgb(219,183,54)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29 samples, 0.02%)</title><rect x="4.0978%" y="533" width="0.0217%" height="15" fill="rgb(216,185,54)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29 samples, 0.02%)</title><rect x="4.0978%" y="517" width="0.0217%" height="15" fill="rgb(254,217,39)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (29 samples, 0.02%)</title><rect x="4.0978%" y="501" width="0.0217%" height="15" fill="rgb(240,178,23)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.02%)</title><rect x="4.0978%" y="485" width="0.0217%" height="15" fill="rgb(218,11,47)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.02%)</title><rect x="4.0978%" y="469" width="0.0217%" height="15" fill="rgb(218,51,51)" fg:x="5466" fg:w="29"/><text x="4.3478%" y="479.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="4.1023%" y="453" width="0.0172%" height="15" fill="rgb(238,126,27)" fg:x="5472" fg:w="23"/><text x="4.3523%" y="463.50"></text></g><g><title>alloc::fmt::format (21 samples, 0.02%)</title><rect x="4.1195%" y="661" width="0.0157%" height="15" fill="rgb(249,202,22)" fg:x="5495" fg:w="21"/><text x="4.3695%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (19 samples, 0.01%)</title><rect x="4.1210%" y="645" width="0.0142%" height="15" fill="rgb(254,195,49)" fg:x="5497" fg:w="19"/><text x="4.3710%" y="655.50"></text></g><g><title>core::fmt::write (17 samples, 0.01%)</title><rect x="4.1225%" y="629" width="0.0127%" height="15" fill="rgb(208,123,14)" fg:x="5499" fg:w="17"/><text x="4.3725%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (109 samples, 0.08%)</title><rect x="4.0543%" y="757" width="0.0817%" height="15" fill="rgb(224,200,8)" fg:x="5408" fg:w="109"/><text x="4.3043%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (109 samples, 0.08%)</title><rect x="4.0543%" y="741" width="0.0817%" height="15" fill="rgb(217,61,36)" fg:x="5408" fg:w="109"/><text x="4.3043%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (109 samples, 0.08%)</title><rect x="4.0543%" y="725" width="0.0817%" height="15" fill="rgb(206,35,45)" fg:x="5408" fg:w="109"/><text x="4.3043%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (108 samples, 0.08%)</title><rect x="4.0550%" y="709" width="0.0810%" height="15" fill="rgb(217,65,33)" fg:x="5409" fg:w="108"/><text x="4.3050%" y="719.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (108 samples, 0.08%)</title><rect x="4.0550%" y="693" width="0.0810%" height="15" fill="rgb(222,158,48)" fg:x="5409" fg:w="108"/><text x="4.3050%" y="703.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (51 samples, 0.04%)</title><rect x="4.0978%" y="677" width="0.0382%" height="15" fill="rgb(254,2,54)" fg:x="5466" fg:w="51"/><text x="4.3478%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (115 samples, 0.09%)</title><rect x="4.0528%" y="789" width="0.0862%" height="15" fill="rgb(250,143,38)" fg:x="5406" fg:w="115"/><text x="4.3028%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (115 samples, 0.09%)</title><rect x="4.0528%" y="773" width="0.0862%" height="15" fill="rgb(248,25,0)" fg:x="5406" fg:w="115"/><text x="4.3028%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (20 samples, 0.01%)</title><rect x="4.1435%" y="693" width="0.0150%" height="15" fill="rgb(206,152,27)" fg:x="5527" fg:w="20"/><text x="4.3935%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.01%)</title><rect x="4.1435%" y="677" width="0.0150%" height="15" fill="rgb(240,77,30)" fg:x="5527" fg:w="20"/><text x="4.3935%" y="687.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (20 samples, 0.01%)</title><rect x="4.1435%" y="661" width="0.0150%" height="15" fill="rgb(231,5,3)" fg:x="5527" fg:w="20"/><text x="4.3935%" y="671.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (20 samples, 0.01%)</title><rect x="4.1435%" y="645" width="0.0150%" height="15" fill="rgb(207,226,32)" fg:x="5527" fg:w="20"/><text x="4.3935%" y="655.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (20 samples, 0.01%)</title><rect x="4.1435%" y="629" width="0.0150%" height="15" fill="rgb(222,207,47)" fg:x="5527" fg:w="20"/><text x="4.3935%" y="639.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (20 samples, 0.01%)</title><rect x="4.1435%" y="613" width="0.0150%" height="15" fill="rgb(229,115,45)" fg:x="5527" fg:w="20"/><text x="4.3935%" y="623.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (20 samples, 0.01%)</title><rect x="4.1435%" y="597" width="0.0150%" height="15" fill="rgb(224,191,6)" fg:x="5527" fg:w="20"/><text x="4.3935%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (20 samples, 0.01%)</title><rect x="4.1435%" y="581" width="0.0150%" height="15" fill="rgb(230,227,24)" fg:x="5527" fg:w="20"/><text x="4.3935%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (20 samples, 0.01%)</title><rect x="4.1435%" y="565" width="0.0150%" height="15" fill="rgb(228,80,19)" fg:x="5527" fg:w="20"/><text x="4.3935%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 0.01%)</title><rect x="4.1435%" y="549" width="0.0150%" height="15" fill="rgb(247,229,0)" fg:x="5527" fg:w="20"/><text x="4.3935%" y="559.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (23 samples, 0.02%)</title><rect x="4.1435%" y="757" width="0.0172%" height="15" fill="rgb(237,194,15)" fg:x="5527" fg:w="23"/><text x="4.3935%" y="767.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (23 samples, 0.02%)</title><rect x="4.1435%" y="741" width="0.0172%" height="15" fill="rgb(219,203,20)" fg:x="5527" fg:w="23"/><text x="4.3935%" y="751.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (23 samples, 0.02%)</title><rect x="4.1435%" y="725" width="0.0172%" height="15" fill="rgb(234,128,8)" fg:x="5527" fg:w="23"/><text x="4.3935%" y="735.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (23 samples, 0.02%)</title><rect x="4.1435%" y="709" width="0.0172%" height="15" fill="rgb(248,202,8)" fg:x="5527" fg:w="23"/><text x="4.3935%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (18 samples, 0.01%)</title><rect x="4.1607%" y="757" width="0.0135%" height="15" fill="rgb(206,104,37)" fg:x="5550" fg:w="18"/><text x="4.4107%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 0.01%)</title><rect x="4.1607%" y="741" width="0.0135%" height="15" fill="rgb(223,8,27)" fg:x="5550" fg:w="18"/><text x="4.4107%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (18 samples, 0.01%)</title><rect x="4.1607%" y="725" width="0.0135%" height="15" fill="rgb(216,217,28)" fg:x="5550" fg:w="18"/><text x="4.4107%" y="735.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="4.1750%" y="613" width="0.0135%" height="15" fill="rgb(249,199,1)" fg:x="5569" fg:w="18"/><text x="4.4250%" y="623.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (17 samples, 0.01%)</title><rect x="4.1757%" y="597" width="0.0127%" height="15" fill="rgb(240,85,17)" fg:x="5570" fg:w="17"/><text x="4.4257%" y="607.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (17 samples, 0.01%)</title><rect x="4.1757%" y="581" width="0.0127%" height="15" fill="rgb(206,108,45)" fg:x="5570" fg:w="17"/><text x="4.4257%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (17 samples, 0.01%)</title><rect x="4.1757%" y="565" width="0.0127%" height="15" fill="rgb(245,210,41)" fg:x="5570" fg:w="17"/><text x="4.4257%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (17 samples, 0.01%)</title><rect x="4.1757%" y="549" width="0.0127%" height="15" fill="rgb(206,13,37)" fg:x="5570" fg:w="17"/><text x="4.4257%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (48 samples, 0.04%)</title><rect x="4.1742%" y="645" width="0.0360%" height="15" fill="rgb(250,61,18)" fg:x="5568" fg:w="48"/><text x="4.4242%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (47 samples, 0.04%)</title><rect x="4.1750%" y="629" width="0.0352%" height="15" fill="rgb(235,172,48)" fg:x="5569" fg:w="47"/><text x="4.4250%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (29 samples, 0.02%)</title><rect x="4.1885%" y="613" width="0.0217%" height="15" fill="rgb(249,201,17)" fg:x="5587" fg:w="29"/><text x="4.4385%" y="623.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (29 samples, 0.02%)</title><rect x="4.1885%" y="597" width="0.0217%" height="15" fill="rgb(219,208,6)" fg:x="5587" fg:w="29"/><text x="4.4385%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (29 samples, 0.02%)</title><rect x="4.1885%" y="581" width="0.0217%" height="15" fill="rgb(248,31,23)" fg:x="5587" fg:w="29"/><text x="4.4385%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (29 samples, 0.02%)</title><rect x="4.1885%" y="565" width="0.0217%" height="15" fill="rgb(245,15,42)" fg:x="5587" fg:w="29"/><text x="4.4385%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (29 samples, 0.02%)</title><rect x="4.1885%" y="549" width="0.0217%" height="15" fill="rgb(222,217,39)" fg:x="5587" fg:w="29"/><text x="4.4385%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.01%)</title><rect x="4.1997%" y="533" width="0.0105%" height="15" fill="rgb(210,219,27)" fg:x="5602" fg:w="14"/><text x="4.4497%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (56 samples, 0.04%)</title><rect x="4.1742%" y="757" width="0.0420%" height="15" fill="rgb(252,166,36)" fg:x="5568" fg:w="56"/><text x="4.4242%" y="767.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (56 samples, 0.04%)</title><rect x="4.1742%" y="741" width="0.0420%" height="15" fill="rgb(245,132,34)" fg:x="5568" fg:w="56"/><text x="4.4242%" y="751.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (56 samples, 0.04%)</title><rect x="4.1742%" y="725" width="0.0420%" height="15" fill="rgb(236,54,3)" fg:x="5568" fg:w="56"/><text x="4.4242%" y="735.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (56 samples, 0.04%)</title><rect x="4.1742%" y="709" width="0.0420%" height="15" fill="rgb(241,173,43)" fg:x="5568" fg:w="56"/><text x="4.4242%" y="719.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (56 samples, 0.04%)</title><rect x="4.1742%" y="693" width="0.0420%" height="15" fill="rgb(215,190,9)" fg:x="5568" fg:w="56"/><text x="4.4242%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (56 samples, 0.04%)</title><rect x="4.1742%" y="677" width="0.0420%" height="15" fill="rgb(242,101,16)" fg:x="5568" fg:w="56"/><text x="4.4242%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56 samples, 0.04%)</title><rect x="4.1742%" y="661" width="0.0420%" height="15" fill="rgb(223,190,21)" fg:x="5568" fg:w="56"/><text x="4.4242%" y="671.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (128 samples, 0.10%)</title><rect x="4.1397%" y="773" width="0.0960%" height="15" fill="rgb(215,228,25)" fg:x="5522" fg:w="128"/><text x="4.3897%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (25 samples, 0.02%)</title><rect x="4.2364%" y="773" width="0.0187%" height="15" fill="rgb(225,36,22)" fg:x="5651" fg:w="25"/><text x="4.4864%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (25 samples, 0.02%)</title><rect x="4.2364%" y="757" width="0.0187%" height="15" fill="rgb(251,106,46)" fg:x="5651" fg:w="25"/><text x="4.4864%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (25 samples, 0.02%)</title><rect x="4.2364%" y="741" width="0.0187%" height="15" fill="rgb(208,90,1)" fg:x="5651" fg:w="25"/><text x="4.4864%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (25 samples, 0.02%)</title><rect x="4.2364%" y="725" width="0.0187%" height="15" fill="rgb(243,10,4)" fg:x="5651" fg:w="25"/><text x="4.4864%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 0.02%)</title><rect x="4.2364%" y="709" width="0.0187%" height="15" fill="rgb(212,137,27)" fg:x="5651" fg:w="25"/><text x="4.4864%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (25 samples, 0.02%)</title><rect x="4.2364%" y="693" width="0.0187%" height="15" fill="rgb(231,220,49)" fg:x="5651" fg:w="25"/><text x="4.4864%" y="703.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (25 samples, 0.02%)</title><rect x="4.2364%" y="677" width="0.0187%" height="15" fill="rgb(237,96,20)" fg:x="5651" fg:w="25"/><text x="4.4864%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (23 samples, 0.02%)</title><rect x="4.2582%" y="677" width="0.0172%" height="15" fill="rgb(239,229,30)" fg:x="5680" fg:w="23"/><text x="4.5082%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.02%)</title><rect x="4.2582%" y="661" width="0.0172%" height="15" fill="rgb(219,65,33)" fg:x="5680" fg:w="23"/><text x="4.5082%" y="671.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (23 samples, 0.02%)</title><rect x="4.2582%" y="645" width="0.0172%" height="15" fill="rgb(243,134,7)" fg:x="5680" fg:w="23"/><text x="4.5082%" y="655.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (23 samples, 0.02%)</title><rect x="4.2582%" y="629" width="0.0172%" height="15" fill="rgb(216,177,54)" fg:x="5680" fg:w="23"/><text x="4.5082%" y="639.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (23 samples, 0.02%)</title><rect x="4.2582%" y="613" width="0.0172%" height="15" fill="rgb(211,160,20)" fg:x="5680" fg:w="23"/><text x="4.5082%" y="623.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (23 samples, 0.02%)</title><rect x="4.2582%" y="597" width="0.0172%" height="15" fill="rgb(239,85,39)" fg:x="5680" fg:w="23"/><text x="4.5082%" y="607.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (23 samples, 0.02%)</title><rect x="4.2582%" y="581" width="0.0172%" height="15" fill="rgb(232,125,22)" fg:x="5680" fg:w="23"/><text x="4.5082%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (23 samples, 0.02%)</title><rect x="4.2582%" y="565" width="0.0172%" height="15" fill="rgb(244,57,34)" fg:x="5680" fg:w="23"/><text x="4.5082%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (23 samples, 0.02%)</title><rect x="4.2582%" y="549" width="0.0172%" height="15" fill="rgb(214,203,32)" fg:x="5680" fg:w="23"/><text x="4.5082%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 0.02%)</title><rect x="4.2582%" y="533" width="0.0172%" height="15" fill="rgb(207,58,43)" fg:x="5680" fg:w="23"/><text x="4.5082%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (25 samples, 0.02%)</title><rect x="4.2582%" y="741" width="0.0187%" height="15" fill="rgb(215,193,15)" fg:x="5680" fg:w="25"/><text x="4.5082%" y="751.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (25 samples, 0.02%)</title><rect x="4.2582%" y="725" width="0.0187%" height="15" fill="rgb(232,15,44)" fg:x="5680" fg:w="25"/><text x="4.5082%" y="735.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (25 samples, 0.02%)</title><rect x="4.2582%" y="709" width="0.0187%" height="15" fill="rgb(212,3,48)" fg:x="5680" fg:w="25"/><text x="4.5082%" y="719.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (25 samples, 0.02%)</title><rect x="4.2582%" y="693" width="0.0187%" height="15" fill="rgb(218,128,7)" fg:x="5680" fg:w="25"/><text x="4.5082%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (24 samples, 0.02%)</title><rect x="4.2792%" y="741" width="0.0180%" height="15" fill="rgb(226,216,39)" fg:x="5708" fg:w="24"/><text x="4.5292%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (24 samples, 0.02%)</title><rect x="4.2792%" y="725" width="0.0180%" height="15" fill="rgb(243,47,51)" fg:x="5708" fg:w="24"/><text x="4.5292%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (24 samples, 0.02%)</title><rect x="4.2792%" y="709" width="0.0180%" height="15" fill="rgb(241,183,40)" fg:x="5708" fg:w="24"/><text x="4.5292%" y="719.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="4.2994%" y="597" width="0.0172%" height="15" fill="rgb(231,217,32)" fg:x="5735" fg:w="23"/><text x="4.5494%" y="607.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (22 samples, 0.02%)</title><rect x="4.3002%" y="581" width="0.0165%" height="15" fill="rgb(229,61,38)" fg:x="5736" fg:w="22"/><text x="4.5502%" y="591.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (22 samples, 0.02%)</title><rect x="4.3002%" y="565" width="0.0165%" height="15" fill="rgb(225,210,5)" fg:x="5736" fg:w="22"/><text x="4.5502%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (22 samples, 0.02%)</title><rect x="4.3002%" y="549" width="0.0165%" height="15" fill="rgb(231,79,45)" fg:x="5736" fg:w="22"/><text x="4.5502%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (22 samples, 0.02%)</title><rect x="4.3002%" y="533" width="0.0165%" height="15" fill="rgb(224,100,7)" fg:x="5736" fg:w="22"/><text x="4.5502%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (14 samples, 0.01%)</title><rect x="4.3249%" y="501" width="0.0105%" height="15" fill="rgb(241,198,18)" fg:x="5769" fg:w="14"/><text x="4.5749%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.01%)</title><rect x="4.3249%" y="485" width="0.0105%" height="15" fill="rgb(252,97,53)" fg:x="5769" fg:w="14"/><text x="4.5749%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (14 samples, 0.01%)</title><rect x="4.3249%" y="469" width="0.0105%" height="15" fill="rgb(220,88,7)" fg:x="5769" fg:w="14"/><text x="4.5749%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (14 samples, 0.01%)</title><rect x="4.3249%" y="453" width="0.0105%" height="15" fill="rgb(213,176,14)" fg:x="5769" fg:w="14"/><text x="4.5749%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (53 samples, 0.04%)</title><rect x="4.2987%" y="629" width="0.0397%" height="15" fill="rgb(246,73,7)" fg:x="5734" fg:w="53"/><text x="4.5487%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (52 samples, 0.04%)</title><rect x="4.2994%" y="613" width="0.0390%" height="15" fill="rgb(245,64,36)" fg:x="5735" fg:w="52"/><text x="4.5494%" y="623.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (29 samples, 0.02%)</title><rect x="4.3167%" y="597" width="0.0217%" height="15" fill="rgb(245,80,10)" fg:x="5758" fg:w="29"/><text x="4.5667%" y="607.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (29 samples, 0.02%)</title><rect x="4.3167%" y="581" width="0.0217%" height="15" fill="rgb(232,107,50)" fg:x="5758" fg:w="29"/><text x="4.5667%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (29 samples, 0.02%)</title><rect x="4.3167%" y="565" width="0.0217%" height="15" fill="rgb(253,3,0)" fg:x="5758" fg:w="29"/><text x="4.5667%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (29 samples, 0.02%)</title><rect x="4.3167%" y="549" width="0.0217%" height="15" fill="rgb(212,99,53)" fg:x="5758" fg:w="29"/><text x="4.5667%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (29 samples, 0.02%)</title><rect x="4.3167%" y="533" width="0.0217%" height="15" fill="rgb(249,111,54)" fg:x="5758" fg:w="29"/><text x="4.5667%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (20 samples, 0.01%)</title><rect x="4.3234%" y="517" width="0.0150%" height="15" fill="rgb(249,55,30)" fg:x="5767" fg:w="20"/><text x="4.5734%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (59 samples, 0.04%)</title><rect x="4.2987%" y="661" width="0.0442%" height="15" fill="rgb(237,47,42)" fg:x="5734" fg:w="59"/><text x="4.5487%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 0.04%)</title><rect x="4.2987%" y="645" width="0.0442%" height="15" fill="rgb(211,20,18)" fg:x="5734" fg:w="59"/><text x="4.5487%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (63 samples, 0.05%)</title><rect x="4.2972%" y="741" width="0.0472%" height="15" fill="rgb(231,203,46)" fg:x="5732" fg:w="63"/><text x="4.5472%" y="751.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (63 samples, 0.05%)</title><rect x="4.2972%" y="725" width="0.0472%" height="15" fill="rgb(237,142,3)" fg:x="5732" fg:w="63"/><text x="4.5472%" y="735.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (62 samples, 0.05%)</title><rect x="4.2979%" y="709" width="0.0465%" height="15" fill="rgb(241,107,1)" fg:x="5733" fg:w="62"/><text x="4.5479%" y="719.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (62 samples, 0.05%)</title><rect x="4.2979%" y="693" width="0.0465%" height="15" fill="rgb(229,83,13)" fg:x="5733" fg:w="62"/><text x="4.5479%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (62 samples, 0.05%)</title><rect x="4.2979%" y="677" width="0.0465%" height="15" fill="rgb(241,91,40)" fg:x="5733" fg:w="62"/><text x="4.5479%" y="687.50"></text></g><g><title>itertools::Itertools::collect_vec (15 samples, 0.01%)</title><rect x="4.3482%" y="741" width="0.0112%" height="15" fill="rgb(225,3,45)" fg:x="5800" fg:w="15"/><text x="4.5982%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15 samples, 0.01%)</title><rect x="4.3482%" y="725" width="0.0112%" height="15" fill="rgb(244,223,14)" fg:x="5800" fg:w="15"/><text x="4.5982%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (15 samples, 0.01%)</title><rect x="4.3482%" y="709" width="0.0112%" height="15" fill="rgb(224,124,37)" fg:x="5800" fg:w="15"/><text x="4.5982%" y="719.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (144 samples, 0.11%)</title><rect x="4.2559%" y="757" width="0.1080%" height="15" fill="rgb(251,171,30)" fg:x="5677" fg:w="144"/><text x="4.5059%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="4.3661%" y="725" width="0.0157%" height="15" fill="rgb(236,46,54)" fg:x="5824" fg:w="21"/><text x="4.6161%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (21 samples, 0.02%)</title><rect x="4.3661%" y="709" width="0.0157%" height="15" fill="rgb(245,213,5)" fg:x="5824" fg:w="21"/><text x="4.6161%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.02%)</title><rect x="4.3661%" y="693" width="0.0157%" height="15" fill="rgb(230,144,27)" fg:x="5824" fg:w="21"/><text x="4.6161%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 0.02%)</title><rect x="4.3661%" y="677" width="0.0157%" height="15" fill="rgb(220,86,6)" fg:x="5824" fg:w="21"/><text x="4.6161%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (21 samples, 0.02%)</title><rect x="4.3661%" y="661" width="0.0157%" height="15" fill="rgb(240,20,13)" fg:x="5824" fg:w="21"/><text x="4.6161%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 0.02%)</title><rect x="4.3661%" y="757" width="0.0165%" height="15" fill="rgb(217,89,34)" fg:x="5824" fg:w="22"/><text x="4.6161%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (22 samples, 0.02%)</title><rect x="4.3661%" y="741" width="0.0165%" height="15" fill="rgb(229,13,5)" fg:x="5824" fg:w="22"/><text x="4.6161%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (22 samples, 0.02%)</title><rect x="4.3976%" y="469" width="0.0165%" height="15" fill="rgb(244,67,35)" fg:x="5866" fg:w="22"/><text x="4.6476%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (22 samples, 0.02%)</title><rect x="4.3976%" y="453" width="0.0165%" height="15" fill="rgb(221,40,2)" fg:x="5866" fg:w="22"/><text x="4.6476%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (22 samples, 0.02%)</title><rect x="4.3976%" y="437" width="0.0165%" height="15" fill="rgb(237,157,21)" fg:x="5866" fg:w="22"/><text x="4.6476%" y="447.50"></text></g><g><title>hashbrown::map::make_insert_hash (42 samples, 0.03%)</title><rect x="4.3939%" y="501" width="0.0315%" height="15" fill="rgb(222,94,11)" fg:x="5861" fg:w="42"/><text x="4.6439%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (41 samples, 0.03%)</title><rect x="4.3946%" y="485" width="0.0307%" height="15" fill="rgb(249,113,6)" fg:x="5862" fg:w="41"/><text x="4.6446%" y="495.50"></text></g><g><title>hashbrown::raw::h2 (15 samples, 0.01%)</title><rect x="4.4336%" y="453" width="0.0112%" height="15" fill="rgb(238,137,36)" fg:x="5914" fg:w="15"/><text x="4.6836%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (37 samples, 0.03%)</title><rect x="4.4254%" y="501" width="0.0277%" height="15" fill="rgb(210,102,26)" fg:x="5903" fg:w="37"/><text x="4.6754%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (37 samples, 0.03%)</title><rect x="4.4254%" y="485" width="0.0277%" height="15" fill="rgb(218,30,30)" fg:x="5903" fg:w="37"/><text x="4.6754%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (37 samples, 0.03%)</title><rect x="4.4254%" y="469" width="0.0277%" height="15" fill="rgb(214,67,26)" fg:x="5903" fg:w="37"/><text x="4.6754%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (18 samples, 0.01%)</title><rect x="4.4584%" y="485" width="0.0135%" height="15" fill="rgb(251,9,53)" fg:x="5947" fg:w="18"/><text x="4.7084%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (111 samples, 0.08%)</title><rect x="4.3916%" y="661" width="0.0832%" height="15" fill="rgb(228,204,25)" fg:x="5858" fg:w="111"/><text x="4.6416%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (111 samples, 0.08%)</title><rect x="4.3916%" y="645" width="0.0832%" height="15" fill="rgb(207,153,8)" fg:x="5858" fg:w="111"/><text x="4.6416%" y="655.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (110 samples, 0.08%)</title><rect x="4.3924%" y="629" width="0.0825%" height="15" fill="rgb(242,9,16)" fg:x="5859" fg:w="110"/><text x="4.6424%" y="639.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (110 samples, 0.08%)</title><rect x="4.3924%" y="613" width="0.0825%" height="15" fill="rgb(217,211,10)" fg:x="5859" fg:w="110"/><text x="4.6424%" y="623.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (110 samples, 0.08%)</title><rect x="4.3924%" y="597" width="0.0825%" height="15" fill="rgb(219,228,52)" fg:x="5859" fg:w="110"/><text x="4.6424%" y="607.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (108 samples, 0.08%)</title><rect x="4.3939%" y="581" width="0.0810%" height="15" fill="rgb(231,92,29)" fg:x="5861" fg:w="108"/><text x="4.6439%" y="591.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (108 samples, 0.08%)</title><rect x="4.3939%" y="565" width="0.0810%" height="15" fill="rgb(232,8,23)" fg:x="5861" fg:w="108"/><text x="4.6439%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (108 samples, 0.08%)</title><rect x="4.3939%" y="549" width="0.0810%" height="15" fill="rgb(216,211,34)" fg:x="5861" fg:w="108"/><text x="4.6439%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (108 samples, 0.08%)</title><rect x="4.3939%" y="533" width="0.0810%" height="15" fill="rgb(236,151,0)" fg:x="5861" fg:w="108"/><text x="4.6439%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (108 samples, 0.08%)</title><rect x="4.3939%" y="517" width="0.0810%" height="15" fill="rgb(209,168,3)" fg:x="5861" fg:w="108"/><text x="4.6439%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (29 samples, 0.02%)</title><rect x="4.4531%" y="501" width="0.0217%" height="15" fill="rgb(208,129,28)" fg:x="5940" fg:w="29"/><text x="4.7031%" y="511.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (121 samples, 0.09%)</title><rect x="4.3916%" y="725" width="0.0907%" height="15" fill="rgb(229,78,22)" fg:x="5858" fg:w="121"/><text x="4.6416%" y="735.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (121 samples, 0.09%)</title><rect x="4.3916%" y="709" width="0.0907%" height="15" fill="rgb(228,187,13)" fg:x="5858" fg:w="121"/><text x="4.6416%" y="719.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (121 samples, 0.09%)</title><rect x="4.3916%" y="693" width="0.0907%" height="15" fill="rgb(240,119,24)" fg:x="5858" fg:w="121"/><text x="4.6416%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (121 samples, 0.09%)</title><rect x="4.3916%" y="677" width="0.0907%" height="15" fill="rgb(209,194,42)" fg:x="5858" fg:w="121"/><text x="4.6416%" y="687.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.01%)</title><rect x="4.5236%" y="549" width="0.0120%" height="15" fill="rgb(247,200,46)" fg:x="6034" fg:w="16"/><text x="4.7736%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (22 samples, 0.02%)</title><rect x="4.5221%" y="661" width="0.0165%" height="15" fill="rgb(218,76,16)" fg:x="6032" fg:w="22"/><text x="4.7721%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22 samples, 0.02%)</title><rect x="4.5221%" y="645" width="0.0165%" height="15" fill="rgb(225,21,48)" fg:x="6032" fg:w="22"/><text x="4.7721%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 0.02%)</title><rect x="4.5221%" y="629" width="0.0165%" height="15" fill="rgb(239,223,50)" fg:x="6032" fg:w="22"/><text x="4.7721%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (22 samples, 0.02%)</title><rect x="4.5221%" y="613" width="0.0165%" height="15" fill="rgb(244,45,21)" fg:x="6032" fg:w="22"/><text x="4.7721%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="4.5221%" y="597" width="0.0165%" height="15" fill="rgb(232,33,43)" fg:x="6032" fg:w="22"/><text x="4.7721%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="4.5221%" y="581" width="0.0165%" height="15" fill="rgb(209,8,3)" fg:x="6032" fg:w="22"/><text x="4.7721%" y="591.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.01%)</title><rect x="4.5236%" y="565" width="0.0150%" height="15" fill="rgb(214,25,53)" fg:x="6034" fg:w="20"/><text x="4.7736%" y="575.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.05%)</title><rect x="4.4921%" y="677" width="0.0510%" height="15" fill="rgb(254,186,54)" fg:x="5992" fg:w="68"/><text x="4.7421%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30 samples, 0.02%)</title><rect x="4.5483%" y="501" width="0.0225%" height="15" fill="rgb(208,174,49)" fg:x="6067" fg:w="30"/><text x="4.7983%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (30 samples, 0.02%)</title><rect x="4.5483%" y="485" width="0.0225%" height="15" fill="rgb(233,191,51)" fg:x="6067" fg:w="30"/><text x="4.7983%" y="495.50"></text></g><g><title>_int_free (21 samples, 0.02%)</title><rect x="4.5551%" y="469" width="0.0157%" height="15" fill="rgb(222,134,10)" fg:x="6076" fg:w="21"/><text x="4.8051%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (110 samples, 0.08%)</title><rect x="4.4891%" y="725" width="0.0825%" height="15" fill="rgb(230,226,20)" fg:x="5988" fg:w="110"/><text x="4.7391%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (110 samples, 0.08%)</title><rect x="4.4891%" y="709" width="0.0825%" height="15" fill="rgb(251,111,25)" fg:x="5988" fg:w="110"/><text x="4.7391%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (110 samples, 0.08%)</title><rect x="4.4891%" y="693" width="0.0825%" height="15" fill="rgb(224,40,46)" fg:x="5988" fg:w="110"/><text x="4.7391%" y="703.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (38 samples, 0.03%)</title><rect x="4.5431%" y="677" width="0.0285%" height="15" fill="rgb(236,108,47)" fg:x="6060" fg:w="38"/><text x="4.7931%" y="687.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}} (38 samples, 0.03%)</title><rect x="4.5431%" y="661" width="0.0285%" height="15" fill="rgb(234,93,0)" fg:x="6060" fg:w="38"/><text x="4.7931%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (38 samples, 0.03%)</title><rect x="4.5431%" y="645" width="0.0285%" height="15" fill="rgb(224,213,32)" fg:x="6060" fg:w="38"/><text x="4.7931%" y="655.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&gt;::sum (38 samples, 0.03%)</title><rect x="4.5431%" y="629" width="0.0285%" height="15" fill="rgb(251,11,48)" fg:x="6060" fg:w="38"/><text x="4.7931%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (38 samples, 0.03%)</title><rect x="4.5431%" y="613" width="0.0285%" height="15" fill="rgb(236,173,5)" fg:x="6060" fg:w="38"/><text x="4.7931%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (31 samples, 0.02%)</title><rect x="4.5483%" y="597" width="0.0232%" height="15" fill="rgb(230,95,12)" fg:x="6067" fg:w="31"/><text x="4.7983%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="4.5483%" y="581" width="0.0232%" height="15" fill="rgb(232,209,1)" fg:x="6067" fg:w="31"/><text x="4.7983%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (31 samples, 0.02%)</title><rect x="4.5483%" y="565" width="0.0232%" height="15" fill="rgb(232,6,1)" fg:x="6067" fg:w="31"/><text x="4.7983%" y="575.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="4.5483%" y="549" width="0.0232%" height="15" fill="rgb(210,224,50)" fg:x="6067" fg:w="31"/><text x="4.7983%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (31 samples, 0.02%)</title><rect x="4.5483%" y="533" width="0.0232%" height="15" fill="rgb(228,127,35)" fg:x="6067" fg:w="31"/><text x="4.7983%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="4.5483%" y="517" width="0.0232%" height="15" fill="rgb(245,102,45)" fg:x="6067" fg:w="31"/><text x="4.7983%" y="527.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="4.5821%" y="565" width="0.0105%" height="15" fill="rgb(214,1,49)" fg:x="6112" fg:w="14"/><text x="4.8321%" y="575.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="4.5821%" y="549" width="0.0105%" height="15" fill="rgb(226,163,40)" fg:x="6112" fg:w="14"/><text x="4.8321%" y="559.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="4.5821%" y="533" width="0.0105%" height="15" fill="rgb(239,212,28)" fg:x="6112" fg:w="14"/><text x="4.8321%" y="543.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="4.5821%" y="517" width="0.0105%" height="15" fill="rgb(220,20,13)" fg:x="6112" fg:w="14"/><text x="4.8321%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (16 samples, 0.01%)</title><rect x="4.6135%" y="405" width="0.0120%" height="15" fill="rgb(210,164,35)" fg:x="6154" fg:w="16"/><text x="4.8635%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (45 samples, 0.03%)</title><rect x="4.5970%" y="469" width="0.0337%" height="15" fill="rgb(248,109,41)" fg:x="6132" fg:w="45"/><text x="4.8470%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (45 samples, 0.03%)</title><rect x="4.5970%" y="453" width="0.0337%" height="15" fill="rgb(238,23,50)" fg:x="6132" fg:w="45"/><text x="4.8470%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (45 samples, 0.03%)</title><rect x="4.5970%" y="437" width="0.0337%" height="15" fill="rgb(211,48,49)" fg:x="6132" fg:w="45"/><text x="4.8470%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (26 samples, 0.02%)</title><rect x="4.6113%" y="421" width="0.0195%" height="15" fill="rgb(223,36,21)" fg:x="6151" fg:w="26"/><text x="4.8613%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (69 samples, 0.05%)</title><rect x="4.5933%" y="501" width="0.0517%" height="15" fill="rgb(207,123,46)" fg:x="6127" fg:w="69"/><text x="4.8433%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (67 samples, 0.05%)</title><rect x="4.5948%" y="485" width="0.0502%" height="15" fill="rgb(240,218,32)" fg:x="6129" fg:w="67"/><text x="4.8448%" y="495.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (130 samples, 0.10%)</title><rect x="4.5806%" y="581" width="0.0975%" height="15" fill="rgb(252,5,43)" fg:x="6110" fg:w="130"/><text x="4.8306%" y="591.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (114 samples, 0.09%)</title><rect x="4.5925%" y="565" width="0.0855%" height="15" fill="rgb(252,84,19)" fg:x="6126" fg:w="114"/><text x="4.8425%" y="575.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (114 samples, 0.09%)</title><rect x="4.5925%" y="549" width="0.0855%" height="15" fill="rgb(243,152,39)" fg:x="6126" fg:w="114"/><text x="4.8425%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (114 samples, 0.09%)</title><rect x="4.5925%" y="533" width="0.0855%" height="15" fill="rgb(234,160,15)" fg:x="6126" fg:w="114"/><text x="4.8425%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (114 samples, 0.09%)</title><rect x="4.5925%" y="517" width="0.0855%" height="15" fill="rgb(237,34,20)" fg:x="6126" fg:w="114"/><text x="4.8425%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (44 samples, 0.03%)</title><rect x="4.6450%" y="501" width="0.0330%" height="15" fill="rgb(229,97,13)" fg:x="6196" fg:w="44"/><text x="4.8950%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (44 samples, 0.03%)</title><rect x="4.6450%" y="485" width="0.0330%" height="15" fill="rgb(234,71,50)" fg:x="6196" fg:w="44"/><text x="4.8950%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (44 samples, 0.03%)</title><rect x="4.6450%" y="469" width="0.0330%" height="15" fill="rgb(253,155,4)" fg:x="6196" fg:w="44"/><text x="4.8950%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (29 samples, 0.02%)</title><rect x="4.6803%" y="469" width="0.0217%" height="15" fill="rgb(222,185,37)" fg:x="6243" fg:w="29"/><text x="4.9303%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (29 samples, 0.02%)</title><rect x="4.6803%" y="453" width="0.0217%" height="15" fill="rgb(251,177,13)" fg:x="6243" fg:w="29"/><text x="4.9303%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (29 samples, 0.02%)</title><rect x="4.6803%" y="437" width="0.0217%" height="15" fill="rgb(250,179,40)" fg:x="6243" fg:w="29"/><text x="4.9303%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (19 samples, 0.01%)</title><rect x="4.6878%" y="421" width="0.0142%" height="15" fill="rgb(242,44,2)" fg:x="6253" fg:w="19"/><text x="4.9378%" y="431.50"></text></g><g><title>hashbrown::map::make_insert_hash (45 samples, 0.03%)</title><rect x="4.6780%" y="501" width="0.0337%" height="15" fill="rgb(216,177,13)" fg:x="6240" fg:w="45"/><text x="4.9280%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (45 samples, 0.03%)</title><rect x="4.6780%" y="485" width="0.0337%" height="15" fill="rgb(216,106,43)" fg:x="6240" fg:w="45"/><text x="4.9280%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (19 samples, 0.01%)</title><rect x="4.7357%" y="421" width="0.0142%" height="15" fill="rgb(216,183,2)" fg:x="6317" fg:w="19"/><text x="4.9857%" y="431.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (19 samples, 0.01%)</title><rect x="4.7357%" y="405" width="0.0142%" height="15" fill="rgb(249,75,3)" fg:x="6317" fg:w="19"/><text x="4.9857%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 0.01%)</title><rect x="4.7357%" y="389" width="0.0142%" height="15" fill="rgb(219,67,39)" fg:x="6317" fg:w="19"/><text x="4.9857%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.01%)</title><rect x="4.7357%" y="373" width="0.0142%" height="15" fill="rgb(253,228,2)" fg:x="6317" fg:w="19"/><text x="4.9857%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (20 samples, 0.01%)</title><rect x="4.7507%" y="421" width="0.0150%" height="15" fill="rgb(235,138,27)" fg:x="6337" fg:w="20"/><text x="5.0007%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (20 samples, 0.01%)</title><rect x="4.7507%" y="405" width="0.0150%" height="15" fill="rgb(236,97,51)" fg:x="6337" fg:w="20"/><text x="5.0007%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (58 samples, 0.04%)</title><rect x="4.7297%" y="485" width="0.0435%" height="15" fill="rgb(240,80,30)" fg:x="6309" fg:w="58"/><text x="4.9797%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (58 samples, 0.04%)</title><rect x="4.7297%" y="469" width="0.0435%" height="15" fill="rgb(230,178,19)" fg:x="6309" fg:w="58"/><text x="4.9797%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (58 samples, 0.04%)</title><rect x="4.7297%" y="453" width="0.0435%" height="15" fill="rgb(210,190,27)" fg:x="6309" fg:w="58"/><text x="4.9797%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (58 samples, 0.04%)</title><rect x="4.7297%" y="437" width="0.0435%" height="15" fill="rgb(222,107,31)" fg:x="6309" fg:w="58"/><text x="4.9797%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (34 samples, 0.03%)</title><rect x="4.7732%" y="485" width="0.0255%" height="15" fill="rgb(216,127,34)" fg:x="6367" fg:w="34"/><text x="5.0232%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (303 samples, 0.23%)</title><rect x="4.5783%" y="613" width="0.2272%" height="15" fill="rgb(234,116,52)" fg:x="6107" fg:w="303"/><text x="4.8283%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (300 samples, 0.22%)</title><rect x="4.5806%" y="597" width="0.2249%" height="15" fill="rgb(222,124,15)" fg:x="6110" fg:w="300"/><text x="4.8306%" y="607.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (170 samples, 0.13%)</title><rect x="4.6780%" y="581" width="0.1274%" height="15" fill="rgb(231,179,28)" fg:x="6240" fg:w="170"/><text x="4.9280%" y="591.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (170 samples, 0.13%)</title><rect x="4.6780%" y="565" width="0.1274%" height="15" fill="rgb(226,93,45)" fg:x="6240" fg:w="170"/><text x="4.9280%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (170 samples, 0.13%)</title><rect x="4.6780%" y="549" width="0.1274%" height="15" fill="rgb(215,8,51)" fg:x="6240" fg:w="170"/><text x="4.9280%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (170 samples, 0.13%)</title><rect x="4.6780%" y="533" width="0.1274%" height="15" fill="rgb(223,106,5)" fg:x="6240" fg:w="170"/><text x="4.9280%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (170 samples, 0.13%)</title><rect x="4.6780%" y="517" width="0.1274%" height="15" fill="rgb(250,191,5)" fg:x="6240" fg:w="170"/><text x="4.9280%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (112 samples, 0.08%)</title><rect x="4.7215%" y="501" width="0.0840%" height="15" fill="rgb(242,132,44)" fg:x="6298" fg:w="112"/><text x="4.9715%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (23 samples, 0.02%)</title><rect x="4.8100%" y="501" width="0.0172%" height="15" fill="rgb(251,152,29)" fg:x="6416" fg:w="23"/><text x="5.0600%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (23 samples, 0.02%)</title><rect x="4.8100%" y="485" width="0.0172%" height="15" fill="rgb(218,179,5)" fg:x="6416" fg:w="23"/><text x="5.0600%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (23 samples, 0.02%)</title><rect x="4.8100%" y="469" width="0.0172%" height="15" fill="rgb(227,67,19)" fg:x="6416" fg:w="23"/><text x="5.0600%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 0.01%)</title><rect x="4.8160%" y="453" width="0.0112%" height="15" fill="rgb(233,119,31)" fg:x="6424" fg:w="15"/><text x="5.0660%" y="463.50"></text></g><g><title>hashbrown::map::make_insert_hash (29 samples, 0.02%)</title><rect x="4.8085%" y="533" width="0.0217%" height="15" fill="rgb(241,120,22)" fg:x="6414" fg:w="29"/><text x="5.0585%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29 samples, 0.02%)</title><rect x="4.8085%" y="517" width="0.0217%" height="15" fill="rgb(224,102,30)" fg:x="6414" fg:w="29"/><text x="5.0585%" y="527.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (40 samples, 0.03%)</title><rect x="4.8085%" y="597" width="0.0300%" height="15" fill="rgb(210,164,37)" fg:x="6414" fg:w="40"/><text x="5.0585%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (40 samples, 0.03%)</title><rect x="4.8085%" y="581" width="0.0300%" height="15" fill="rgb(226,191,16)" fg:x="6414" fg:w="40"/><text x="5.0585%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (40 samples, 0.03%)</title><rect x="4.8085%" y="565" width="0.0300%" height="15" fill="rgb(214,40,45)" fg:x="6414" fg:w="40"/><text x="5.0585%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (40 samples, 0.03%)</title><rect x="4.8085%" y="549" width="0.0300%" height="15" fill="rgb(244,29,26)" fg:x="6414" fg:w="40"/><text x="5.0585%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (350 samples, 0.26%)</title><rect x="4.5776%" y="645" width="0.2624%" height="15" fill="rgb(216,16,5)" fg:x="6106" fg:w="350"/><text x="4.8276%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (350 samples, 0.26%)</title><rect x="4.5776%" y="629" width="0.2624%" height="15" fill="rgb(249,76,35)" fg:x="6106" fg:w="350"/><text x="4.8276%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (46 samples, 0.03%)</title><rect x="4.8055%" y="613" width="0.0345%" height="15" fill="rgb(207,11,44)" fg:x="6410" fg:w="46"/><text x="5.0555%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (367 samples, 0.28%)</title><rect x="4.5716%" y="725" width="0.2751%" height="15" fill="rgb(228,190,49)" fg:x="6098" fg:w="367"/><text x="4.8216%" y="735.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (367 samples, 0.28%)</title><rect x="4.5716%" y="709" width="0.2751%" height="15" fill="rgb(214,173,12)" fg:x="6098" fg:w="367"/><text x="4.8216%" y="719.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (360 samples, 0.27%)</title><rect x="4.5768%" y="693" width="0.2699%" height="15" fill="rgb(218,26,35)" fg:x="6105" fg:w="360"/><text x="4.8268%" y="703.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (360 samples, 0.27%)</title><rect x="4.5768%" y="677" width="0.2699%" height="15" fill="rgb(220,200,19)" fg:x="6105" fg:w="360"/><text x="4.8268%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (360 samples, 0.27%)</title><rect x="4.5768%" y="661" width="0.2699%" height="15" fill="rgb(239,95,49)" fg:x="6105" fg:w="360"/><text x="4.8268%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 0.01%)</title><rect x="4.8654%" y="677" width="0.0142%" height="15" fill="rgb(235,85,53)" fg:x="6490" fg:w="19"/><text x="5.1154%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (19 samples, 0.01%)</title><rect x="4.8654%" y="661" width="0.0142%" height="15" fill="rgb(233,133,31)" fg:x="6490" fg:w="19"/><text x="5.1154%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (14 samples, 0.01%)</title><rect x="4.8692%" y="645" width="0.0105%" height="15" fill="rgb(218,25,20)" fg:x="6495" fg:w="14"/><text x="5.1192%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="4.8692%" y="629" width="0.0105%" height="15" fill="rgb(252,210,38)" fg:x="6495" fg:w="14"/><text x="5.1192%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="4.8692%" y="613" width="0.0105%" height="15" fill="rgb(242,134,21)" fg:x="6495" fg:w="14"/><text x="5.1192%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="4.8692%" y="597" width="0.0105%" height="15" fill="rgb(213,28,48)" fg:x="6495" fg:w="14"/><text x="5.1192%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="4.8692%" y="581" width="0.0105%" height="15" fill="rgb(250,196,2)" fg:x="6495" fg:w="14"/><text x="5.1192%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="4.8692%" y="565" width="0.0105%" height="15" fill="rgb(227,5,17)" fg:x="6495" fg:w="14"/><text x="5.1192%" y="575.50"></text></g><g><title>itertools::Itertools::collect_vec (40 samples, 0.03%)</title><rect x="4.8654%" y="725" width="0.0300%" height="15" fill="rgb(221,226,24)" fg:x="6490" fg:w="40"/><text x="5.1154%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40 samples, 0.03%)</title><rect x="4.8654%" y="709" width="0.0300%" height="15" fill="rgb(211,5,48)" fg:x="6490" fg:w="40"/><text x="5.1154%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (40 samples, 0.03%)</title><rect x="4.8654%" y="693" width="0.0300%" height="15" fill="rgb(219,150,6)" fg:x="6490" fg:w="40"/><text x="5.1154%" y="703.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="4.8797%" y="677" width="0.0157%" height="15" fill="rgb(251,46,16)" fg:x="6509" fg:w="21"/><text x="5.1297%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (16 samples, 0.01%)</title><rect x="4.8834%" y="661" width="0.0120%" height="15" fill="rgb(220,204,40)" fg:x="6514" fg:w="16"/><text x="5.1334%" y="671.50"></text></g><g><title>itertools::Itertools::combinations (33 samples, 0.02%)</title><rect x="4.8954%" y="725" width="0.0247%" height="15" fill="rgb(211,85,2)" fg:x="6530" fg:w="33"/><text x="5.1454%" y="735.50"></text></g><g><title>itertools::combinations::combinations (33 samples, 0.02%)</title><rect x="4.8954%" y="709" width="0.0247%" height="15" fill="rgb(229,17,7)" fg:x="6530" fg:w="33"/><text x="5.1454%" y="719.50"></text></g><g><title>itertools::combinations::LazyBuffer&lt;I&gt;::new (17 samples, 0.01%)</title><rect x="4.9074%" y="693" width="0.0127%" height="15" fill="rgb(239,72,28)" fg:x="6546" fg:w="17"/><text x="5.1574%" y="703.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (721 samples, 0.54%)</title><rect x="4.3834%" y="741" width="0.5405%" height="15" fill="rgb(230,47,54)" fg:x="5847" fg:w="721"/><text x="4.6334%" y="751.50"></text></g><g><title>alloc::string::String::push_str (16 samples, 0.01%)</title><rect x="4.9277%" y="597" width="0.0120%" height="15" fill="rgb(214,50,8)" fg:x="6573" fg:w="16"/><text x="5.1777%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (16 samples, 0.01%)</title><rect x="4.9277%" y="581" width="0.0120%" height="15" fill="rgb(216,198,43)" fg:x="6573" fg:w="16"/><text x="5.1777%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (16 samples, 0.01%)</title><rect x="4.9277%" y="565" width="0.0120%" height="15" fill="rgb(234,20,35)" fg:x="6573" fg:w="16"/><text x="5.1777%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (16 samples, 0.01%)</title><rect x="4.9277%" y="549" width="0.0120%" height="15" fill="rgb(254,45,19)" fg:x="6573" fg:w="16"/><text x="5.1777%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (54 samples, 0.04%)</title><rect x="4.9277%" y="629" width="0.0405%" height="15" fill="rgb(219,14,44)" fg:x="6573" fg:w="54"/><text x="5.1777%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (54 samples, 0.04%)</title><rect x="4.9277%" y="613" width="0.0405%" height="15" fill="rgb(217,220,26)" fg:x="6573" fg:w="54"/><text x="5.1777%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (38 samples, 0.03%)</title><rect x="4.9397%" y="597" width="0.0285%" height="15" fill="rgb(213,158,28)" fg:x="6589" fg:w="38"/><text x="5.1897%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (38 samples, 0.03%)</title><rect x="4.9397%" y="581" width="0.0285%" height="15" fill="rgb(252,51,52)" fg:x="6589" fg:w="38"/><text x="5.1897%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (38 samples, 0.03%)</title><rect x="4.9397%" y="565" width="0.0285%" height="15" fill="rgb(246,89,16)" fg:x="6589" fg:w="38"/><text x="5.1897%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="4.9397%" y="549" width="0.0285%" height="15" fill="rgb(216,158,49)" fg:x="6589" fg:w="38"/><text x="5.1897%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (38 samples, 0.03%)</title><rect x="4.9397%" y="533" width="0.0285%" height="15" fill="rgb(236,107,19)" fg:x="6589" fg:w="38"/><text x="5.1897%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 0.03%)</title><rect x="4.9397%" y="517" width="0.0285%" height="15" fill="rgb(228,185,30)" fg:x="6589" fg:w="38"/><text x="5.1897%" y="527.50"></text></g><g><title>_int_free (26 samples, 0.02%)</title><rect x="4.9486%" y="501" width="0.0195%" height="15" fill="rgb(246,134,8)" fg:x="6601" fg:w="26"/><text x="5.1986%" y="511.50"></text></g><g><title>__GI___libc_malloc (26 samples, 0.02%)</title><rect x="4.9711%" y="389" width="0.0195%" height="15" fill="rgb(214,143,50)" fg:x="6631" fg:w="26"/><text x="5.2211%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (34 samples, 0.03%)</title><rect x="4.9681%" y="485" width="0.0255%" height="15" fill="rgb(228,75,8)" fg:x="6627" fg:w="34"/><text x="5.2181%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 0.03%)</title><rect x="4.9681%" y="469" width="0.0255%" height="15" fill="rgb(207,175,4)" fg:x="6627" fg:w="34"/><text x="5.2181%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 0.03%)</title><rect x="4.9681%" y="453" width="0.0255%" height="15" fill="rgb(205,108,24)" fg:x="6627" fg:w="34"/><text x="5.2181%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="4.9681%" y="437" width="0.0255%" height="15" fill="rgb(244,120,49)" fg:x="6627" fg:w="34"/><text x="5.2181%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.03%)</title><rect x="4.9681%" y="421" width="0.0255%" height="15" fill="rgb(223,47,38)" fg:x="6627" fg:w="34"/><text x="5.2181%" y="431.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.02%)</title><rect x="4.9704%" y="405" width="0.0232%" height="15" fill="rgb(229,179,11)" fg:x="6630" fg:w="31"/><text x="5.2204%" y="415.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (35 samples, 0.03%)</title><rect x="4.9681%" y="613" width="0.0262%" height="15" fill="rgb(231,122,1)" fg:x="6627" fg:w="35"/><text x="5.2181%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (35 samples, 0.03%)</title><rect x="4.9681%" y="597" width="0.0262%" height="15" fill="rgb(245,119,9)" fg:x="6627" fg:w="35"/><text x="5.2181%" y="607.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (35 samples, 0.03%)</title><rect x="4.9681%" y="581" width="0.0262%" height="15" fill="rgb(241,163,25)" fg:x="6627" fg:w="35"/><text x="5.2181%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (35 samples, 0.03%)</title><rect x="4.9681%" y="565" width="0.0262%" height="15" fill="rgb(217,214,3)" fg:x="6627" fg:w="35"/><text x="5.2181%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (35 samples, 0.03%)</title><rect x="4.9681%" y="549" width="0.0262%" height="15" fill="rgb(240,86,28)" fg:x="6627" fg:w="35"/><text x="5.2181%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (35 samples, 0.03%)</title><rect x="4.9681%" y="533" width="0.0262%" height="15" fill="rgb(215,47,9)" fg:x="6627" fg:w="35"/><text x="5.2181%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 0.03%)</title><rect x="4.9681%" y="517" width="0.0262%" height="15" fill="rgb(252,25,45)" fg:x="6627" fg:w="35"/><text x="5.2181%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (35 samples, 0.03%)</title><rect x="4.9681%" y="501" width="0.0262%" height="15" fill="rgb(251,164,9)" fg:x="6627" fg:w="35"/><text x="5.2181%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (113 samples, 0.08%)</title><rect x="4.9269%" y="741" width="0.0847%" height="15" fill="rgb(233,194,0)" fg:x="6572" fg:w="113"/><text x="5.1769%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (113 samples, 0.08%)</title><rect x="4.9269%" y="725" width="0.0847%" height="15" fill="rgb(249,111,24)" fg:x="6572" fg:w="113"/><text x="5.1769%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (112 samples, 0.08%)</title><rect x="4.9277%" y="709" width="0.0840%" height="15" fill="rgb(250,223,3)" fg:x="6573" fg:w="112"/><text x="5.1777%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (112 samples, 0.08%)</title><rect x="4.9277%" y="693" width="0.0840%" height="15" fill="rgb(236,178,37)" fg:x="6573" fg:w="112"/><text x="5.1777%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (112 samples, 0.08%)</title><rect x="4.9277%" y="677" width="0.0840%" height="15" fill="rgb(241,158,50)" fg:x="6573" fg:w="112"/><text x="5.1777%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (112 samples, 0.08%)</title><rect x="4.9277%" y="661" width="0.0840%" height="15" fill="rgb(213,121,41)" fg:x="6573" fg:w="112"/><text x="5.1777%" y="671.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (112 samples, 0.08%)</title><rect x="4.9277%" y="645" width="0.0840%" height="15" fill="rgb(240,92,3)" fg:x="6573" fg:w="112"/><text x="5.1777%" y="655.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (58 samples, 0.04%)</title><rect x="4.9681%" y="629" width="0.0435%" height="15" fill="rgb(205,123,3)" fg:x="6627" fg:w="58"/><text x="5.2181%" y="639.50"></text></g><g><title>alloc::fmt::format (23 samples, 0.02%)</title><rect x="4.9944%" y="613" width="0.0172%" height="15" fill="rgb(205,97,47)" fg:x="6662" fg:w="23"/><text x="5.2444%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (22 samples, 0.02%)</title><rect x="4.9951%" y="597" width="0.0165%" height="15" fill="rgb(247,152,14)" fg:x="6663" fg:w="22"/><text x="5.2451%" y="607.50"></text></g><g><title>core::fmt::write (17 samples, 0.01%)</title><rect x="4.9989%" y="581" width="0.0127%" height="15" fill="rgb(248,195,53)" fg:x="6668" fg:w="17"/><text x="5.2489%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="5.0176%" y="709" width="0.0105%" height="15" fill="rgb(226,201,16)" fg:x="6693" fg:w="14"/><text x="5.2676%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (16 samples, 0.01%)</title><rect x="5.0641%" y="389" width="0.0120%" height="15" fill="rgb(205,98,0)" fg:x="6755" fg:w="16"/><text x="5.3141%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (54 samples, 0.04%)</title><rect x="5.0431%" y="453" width="0.0405%" height="15" fill="rgb(214,191,48)" fg:x="6727" fg:w="54"/><text x="5.2931%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (54 samples, 0.04%)</title><rect x="5.0431%" y="437" width="0.0405%" height="15" fill="rgb(237,112,39)" fg:x="6727" fg:w="54"/><text x="5.2931%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (54 samples, 0.04%)</title><rect x="5.0431%" y="421" width="0.0405%" height="15" fill="rgb(247,203,27)" fg:x="6727" fg:w="54"/><text x="5.2931%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (37 samples, 0.03%)</title><rect x="5.0559%" y="405" width="0.0277%" height="15" fill="rgb(235,124,28)" fg:x="6744" fg:w="37"/><text x="5.3059%" y="415.50"></text></g><g><title>hashbrown::map::make_insert_hash (87 samples, 0.07%)</title><rect x="5.0356%" y="485" width="0.0652%" height="15" fill="rgb(208,207,46)" fg:x="6717" fg:w="87"/><text x="5.2856%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (83 samples, 0.06%)</title><rect x="5.0386%" y="469" width="0.0622%" height="15" fill="rgb(234,176,4)" fg:x="6721" fg:w="83"/><text x="5.2886%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (19 samples, 0.01%)</title><rect x="5.0866%" y="453" width="0.0142%" height="15" fill="rgb(230,133,28)" fg:x="6785" fg:w="19"/><text x="5.3366%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (19 samples, 0.01%)</title><rect x="5.0866%" y="437" width="0.0142%" height="15" fill="rgb(211,137,40)" fg:x="6785" fg:w="19"/><text x="5.3366%" y="447.50"></text></g><g><title>core::hash::Hasher::write_u8 (19 samples, 0.01%)</title><rect x="5.0866%" y="421" width="0.0142%" height="15" fill="rgb(254,35,13)" fg:x="6785" fg:w="19"/><text x="5.3366%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.01%)</title><rect x="5.0888%" y="405" width="0.0120%" height="15" fill="rgb(225,49,51)" fg:x="6788" fg:w="16"/><text x="5.3388%" y="415.50"></text></g><g><title>hashbrown::raw::h2 (28 samples, 0.02%)</title><rect x="5.1196%" y="437" width="0.0210%" height="15" fill="rgb(251,10,15)" fg:x="6829" fg:w="28"/><text x="5.3696%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (58 samples, 0.04%)</title><rect x="5.1008%" y="485" width="0.0435%" height="15" fill="rgb(228,207,15)" fg:x="6804" fg:w="58"/><text x="5.3508%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (58 samples, 0.04%)</title><rect x="5.1008%" y="469" width="0.0435%" height="15" fill="rgb(241,99,19)" fg:x="6804" fg:w="58"/><text x="5.3508%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (58 samples, 0.04%)</title><rect x="5.1008%" y="453" width="0.0435%" height="15" fill="rgb(207,104,49)" fg:x="6804" fg:w="58"/><text x="5.3508%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (29 samples, 0.02%)</title><rect x="5.1526%" y="469" width="0.0217%" height="15" fill="rgb(234,99,18)" fg:x="6873" fg:w="29"/><text x="5.4026%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (204 samples, 0.15%)</title><rect x="5.0326%" y="645" width="0.1529%" height="15" fill="rgb(213,191,49)" fg:x="6713" fg:w="204"/><text x="5.2826%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (203 samples, 0.15%)</title><rect x="5.0334%" y="629" width="0.1522%" height="15" fill="rgb(210,226,19)" fg:x="6714" fg:w="203"/><text x="5.2834%" y="639.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (203 samples, 0.15%)</title><rect x="5.0334%" y="613" width="0.1522%" height="15" fill="rgb(229,97,18)" fg:x="6714" fg:w="203"/><text x="5.2834%" y="623.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (203 samples, 0.15%)</title><rect x="5.0334%" y="597" width="0.1522%" height="15" fill="rgb(211,167,15)" fg:x="6714" fg:w="203"/><text x="5.2834%" y="607.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (203 samples, 0.15%)</title><rect x="5.0334%" y="581" width="0.1522%" height="15" fill="rgb(210,169,34)" fg:x="6714" fg:w="203"/><text x="5.2834%" y="591.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (201 samples, 0.15%)</title><rect x="5.0349%" y="565" width="0.1507%" height="15" fill="rgb(241,121,31)" fg:x="6716" fg:w="201"/><text x="5.2849%" y="575.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (201 samples, 0.15%)</title><rect x="5.0349%" y="549" width="0.1507%" height="15" fill="rgb(232,40,11)" fg:x="6716" fg:w="201"/><text x="5.2849%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (201 samples, 0.15%)</title><rect x="5.0349%" y="533" width="0.1507%" height="15" fill="rgb(205,86,26)" fg:x="6716" fg:w="201"/><text x="5.2849%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (201 samples, 0.15%)</title><rect x="5.0349%" y="517" width="0.1507%" height="15" fill="rgb(231,126,28)" fg:x="6716" fg:w="201"/><text x="5.2849%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (201 samples, 0.15%)</title><rect x="5.0349%" y="501" width="0.1507%" height="15" fill="rgb(219,221,18)" fg:x="6716" fg:w="201"/><text x="5.2849%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (55 samples, 0.04%)</title><rect x="5.1443%" y="485" width="0.0412%" height="15" fill="rgb(211,40,0)" fg:x="6862" fg:w="55"/><text x="5.3943%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (15 samples, 0.01%)</title><rect x="5.1743%" y="469" width="0.0112%" height="15" fill="rgb(239,85,43)" fg:x="6902" fg:w="15"/><text x="5.4243%" y="479.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (230 samples, 0.17%)</title><rect x="5.0326%" y="693" width="0.1724%" height="15" fill="rgb(231,55,21)" fg:x="6713" fg:w="230"/><text x="5.2826%" y="703.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (230 samples, 0.17%)</title><rect x="5.0326%" y="677" width="0.1724%" height="15" fill="rgb(225,184,43)" fg:x="6713" fg:w="230"/><text x="5.2826%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (230 samples, 0.17%)</title><rect x="5.0326%" y="661" width="0.1724%" height="15" fill="rgb(251,158,41)" fg:x="6713" fg:w="230"/><text x="5.2826%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (26 samples, 0.02%)</title><rect x="5.1855%" y="645" width="0.0195%" height="15" fill="rgb(234,159,37)" fg:x="6917" fg:w="26"/><text x="5.4355%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (26 samples, 0.02%)</title><rect x="5.1855%" y="629" width="0.0195%" height="15" fill="rgb(216,204,22)" fg:x="6917" fg:w="26"/><text x="5.4355%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (26 samples, 0.02%)</title><rect x="5.1855%" y="613" width="0.0195%" height="15" fill="rgb(214,17,3)" fg:x="6917" fg:w="26"/><text x="5.4355%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (24 samples, 0.02%)</title><rect x="5.1870%" y="597" width="0.0180%" height="15" fill="rgb(212,111,17)" fg:x="6919" fg:w="24"/><text x="5.4370%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (24 samples, 0.02%)</title><rect x="5.1870%" y="581" width="0.0180%" height="15" fill="rgb(221,157,24)" fg:x="6919" fg:w="24"/><text x="5.4370%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (16 samples, 0.01%)</title><rect x="5.1930%" y="565" width="0.0120%" height="15" fill="rgb(252,16,13)" fg:x="6927" fg:w="16"/><text x="5.4430%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (16 samples, 0.01%)</title><rect x="5.1930%" y="549" width="0.0120%" height="15" fill="rgb(221,62,2)" fg:x="6927" fg:w="16"/><text x="5.4430%" y="559.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (233 samples, 0.17%)</title><rect x="5.0311%" y="709" width="0.1747%" height="15" fill="rgb(247,87,22)" fg:x="6711" fg:w="233"/><text x="5.2811%" y="719.50"></text></g><g><title>__GI___libc_malloc (28 samples, 0.02%)</title><rect x="5.2665%" y="533" width="0.0210%" height="15" fill="rgb(215,73,9)" fg:x="7025" fg:w="28"/><text x="5.5165%" y="543.50"></text></g><g><title>tcache_get (16 samples, 0.01%)</title><rect x="5.2755%" y="517" width="0.0120%" height="15" fill="rgb(207,175,33)" fg:x="7037" fg:w="16"/><text x="5.5255%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (38 samples, 0.03%)</title><rect x="5.2628%" y="645" width="0.0285%" height="15" fill="rgb(243,129,54)" fg:x="7020" fg:w="38"/><text x="5.5128%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (38 samples, 0.03%)</title><rect x="5.2628%" y="629" width="0.0285%" height="15" fill="rgb(227,119,45)" fg:x="7020" fg:w="38"/><text x="5.5128%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.03%)</title><rect x="5.2628%" y="613" width="0.0285%" height="15" fill="rgb(205,109,36)" fg:x="7020" fg:w="38"/><text x="5.5128%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.03%)</title><rect x="5.2628%" y="597" width="0.0285%" height="15" fill="rgb(205,6,39)" fg:x="7020" fg:w="38"/><text x="5.5128%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="5.2628%" y="581" width="0.0285%" height="15" fill="rgb(221,32,16)" fg:x="7020" fg:w="38"/><text x="5.5128%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="5.2628%" y="565" width="0.0285%" height="15" fill="rgb(228,144,50)" fg:x="7020" fg:w="38"/><text x="5.5128%" y="575.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.02%)</title><rect x="5.2665%" y="549" width="0.0247%" height="15" fill="rgb(229,201,53)" fg:x="7025" fg:w="33"/><text x="5.5165%" y="559.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (98 samples, 0.07%)</title><rect x="5.2245%" y="661" width="0.0735%" height="15" fill="rgb(249,153,27)" fg:x="6969" fg:w="98"/><text x="5.4745%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37 samples, 0.03%)</title><rect x="5.3070%" y="485" width="0.0277%" height="15" fill="rgb(227,106,25)" fg:x="7079" fg:w="37"/><text x="5.5570%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 0.03%)</title><rect x="5.3070%" y="469" width="0.0277%" height="15" fill="rgb(230,65,29)" fg:x="7079" fg:w="37"/><text x="5.5570%" y="479.50"></text></g><g><title>_int_free (28 samples, 0.02%)</title><rect x="5.3137%" y="453" width="0.0210%" height="15" fill="rgb(221,57,46)" fg:x="7088" fg:w="28"/><text x="5.5637%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (161 samples, 0.12%)</title><rect x="5.2163%" y="709" width="0.1207%" height="15" fill="rgb(229,161,17)" fg:x="6958" fg:w="161"/><text x="5.4663%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (161 samples, 0.12%)</title><rect x="5.2163%" y="693" width="0.1207%" height="15" fill="rgb(222,213,11)" fg:x="6958" fg:w="161"/><text x="5.4663%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (161 samples, 0.12%)</title><rect x="5.2163%" y="677" width="0.1207%" height="15" fill="rgb(235,35,13)" fg:x="6958" fg:w="161"/><text x="5.4663%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (52 samples, 0.04%)</title><rect x="5.2980%" y="661" width="0.0390%" height="15" fill="rgb(233,158,34)" fg:x="7067" fg:w="52"/><text x="5.5480%" y="671.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}} (52 samples, 0.04%)</title><rect x="5.2980%" y="645" width="0.0390%" height="15" fill="rgb(215,151,48)" fg:x="7067" fg:w="52"/><text x="5.5480%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (51 samples, 0.04%)</title><rect x="5.2987%" y="629" width="0.0382%" height="15" fill="rgb(229,84,14)" fg:x="7068" fg:w="51"/><text x="5.5487%" y="639.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&gt;::sum (51 samples, 0.04%)</title><rect x="5.2987%" y="613" width="0.0382%" height="15" fill="rgb(229,68,14)" fg:x="7068" fg:w="51"/><text x="5.5487%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (51 samples, 0.04%)</title><rect x="5.2987%" y="597" width="0.0382%" height="15" fill="rgb(243,106,26)" fg:x="7068" fg:w="51"/><text x="5.5487%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (40 samples, 0.03%)</title><rect x="5.3070%" y="581" width="0.0300%" height="15" fill="rgb(206,45,38)" fg:x="7079" fg:w="40"/><text x="5.5570%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="5.3070%" y="565" width="0.0300%" height="15" fill="rgb(226,6,15)" fg:x="7079" fg:w="40"/><text x="5.5570%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (40 samples, 0.03%)</title><rect x="5.3070%" y="549" width="0.0300%" height="15" fill="rgb(232,22,54)" fg:x="7079" fg:w="40"/><text x="5.5570%" y="559.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="5.3070%" y="533" width="0.0300%" height="15" fill="rgb(229,222,32)" fg:x="7079" fg:w="40"/><text x="5.5570%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (40 samples, 0.03%)</title><rect x="5.3070%" y="517" width="0.0300%" height="15" fill="rgb(228,62,29)" fg:x="7079" fg:w="40"/><text x="5.5570%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="5.3070%" y="501" width="0.0300%" height="15" fill="rgb(251,103,34)" fg:x="7079" fg:w="40"/><text x="5.5570%" y="511.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="5.3565%" y="549" width="0.0127%" height="15" fill="rgb(233,12,30)" fg:x="7145" fg:w="17"/><text x="5.6065%" y="559.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="5.3565%" y="533" width="0.0127%" height="15" fill="rgb(238,52,0)" fg:x="7145" fg:w="17"/><text x="5.6065%" y="543.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="5.3565%" y="517" width="0.0127%" height="15" fill="rgb(223,98,5)" fg:x="7145" fg:w="17"/><text x="5.6065%" y="527.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="5.3565%" y="501" width="0.0127%" height="15" fill="rgb(228,75,37)" fg:x="7145" fg:w="17"/><text x="5.6065%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (27 samples, 0.02%)</title><rect x="5.4060%" y="389" width="0.0202%" height="15" fill="rgb(205,115,49)" fg:x="7211" fg:w="27"/><text x="5.6560%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (78 samples, 0.06%)</title><rect x="5.3790%" y="453" width="0.0585%" height="15" fill="rgb(250,154,43)" fg:x="7175" fg:w="78"/><text x="5.6290%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (78 samples, 0.06%)</title><rect x="5.3790%" y="437" width="0.0585%" height="15" fill="rgb(226,43,29)" fg:x="7175" fg:w="78"/><text x="5.6290%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (78 samples, 0.06%)</title><rect x="5.3790%" y="421" width="0.0585%" height="15" fill="rgb(249,228,39)" fg:x="7175" fg:w="78"/><text x="5.6290%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (54 samples, 0.04%)</title><rect x="5.3970%" y="405" width="0.0405%" height="15" fill="rgb(216,79,43)" fg:x="7199" fg:w="54"/><text x="5.6470%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (15 samples, 0.01%)</title><rect x="5.4262%" y="389" width="0.0112%" height="15" fill="rgb(228,95,12)" fg:x="7238" fg:w="15"/><text x="5.6762%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (14 samples, 0.01%)</title><rect x="5.4374%" y="453" width="0.0105%" height="15" fill="rgb(249,221,15)" fg:x="7253" fg:w="14"/><text x="5.6874%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (123 samples, 0.09%)</title><rect x="5.3707%" y="485" width="0.0922%" height="15" fill="rgb(233,34,13)" fg:x="7164" fg:w="123"/><text x="5.6207%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (123 samples, 0.09%)</title><rect x="5.3707%" y="469" width="0.0922%" height="15" fill="rgb(214,103,39)" fg:x="7164" fg:w="123"/><text x="5.6207%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20 samples, 0.01%)</title><rect x="5.4479%" y="453" width="0.0150%" height="15" fill="rgb(251,126,39)" fg:x="7267" fg:w="20"/><text x="5.6979%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (20 samples, 0.01%)</title><rect x="5.4479%" y="437" width="0.0150%" height="15" fill="rgb(214,216,36)" fg:x="7267" fg:w="20"/><text x="5.6979%" y="447.50"></text></g><g><title>core::hash::Hasher::write_u8 (20 samples, 0.01%)</title><rect x="5.4479%" y="421" width="0.0150%" height="15" fill="rgb(220,221,8)" fg:x="7267" fg:w="20"/><text x="5.6979%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (19 samples, 0.01%)</title><rect x="5.4487%" y="405" width="0.0142%" height="15" fill="rgb(240,216,3)" fg:x="7268" fg:w="19"/><text x="5.6987%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (19 samples, 0.01%)</title><rect x="5.4487%" y="389" width="0.0142%" height="15" fill="rgb(232,218,17)" fg:x="7268" fg:w="19"/><text x="5.6987%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.01%)</title><rect x="5.4487%" y="373" width="0.0142%" height="15" fill="rgb(229,163,45)" fg:x="7268" fg:w="19"/><text x="5.6987%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="5.4892%" y="437" width="0.0150%" height="15" fill="rgb(231,110,42)" fg:x="7322" fg:w="20"/><text x="5.7392%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (17 samples, 0.01%)</title><rect x="5.4914%" y="421" width="0.0127%" height="15" fill="rgb(208,170,48)" fg:x="7325" fg:w="17"/><text x="5.7414%" y="431.50"></text></g><g><title>hashbrown::raw::h2 (21 samples, 0.02%)</title><rect x="5.5057%" y="437" width="0.0157%" height="15" fill="rgb(239,116,25)" fg:x="7344" fg:w="21"/><text x="5.7557%" y="447.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (237 samples, 0.18%)</title><rect x="5.3550%" y="565" width="0.1777%" height="15" fill="rgb(219,200,50)" fg:x="7143" fg:w="237"/><text x="5.6050%" y="575.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (218 samples, 0.16%)</title><rect x="5.3692%" y="549" width="0.1634%" height="15" fill="rgb(245,200,0)" fg:x="7162" fg:w="218"/><text x="5.6192%" y="559.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (218 samples, 0.16%)</title><rect x="5.3692%" y="533" width="0.1634%" height="15" fill="rgb(245,119,33)" fg:x="7162" fg:w="218"/><text x="5.6192%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (218 samples, 0.16%)</title><rect x="5.3692%" y="517" width="0.1634%" height="15" fill="rgb(231,125,12)" fg:x="7162" fg:w="218"/><text x="5.6192%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (218 samples, 0.16%)</title><rect x="5.3692%" y="501" width="0.1634%" height="15" fill="rgb(216,96,41)" fg:x="7162" fg:w="218"/><text x="5.6192%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (93 samples, 0.07%)</title><rect x="5.4629%" y="485" width="0.0697%" height="15" fill="rgb(248,43,45)" fg:x="7287" fg:w="93"/><text x="5.7129%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (93 samples, 0.07%)</title><rect x="5.4629%" y="469" width="0.0697%" height="15" fill="rgb(217,222,7)" fg:x="7287" fg:w="93"/><text x="5.7129%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (93 samples, 0.07%)</title><rect x="5.4629%" y="453" width="0.0697%" height="15" fill="rgb(233,28,6)" fg:x="7287" fg:w="93"/><text x="5.7129%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (32 samples, 0.02%)</title><rect x="5.5626%" y="389" width="0.0240%" height="15" fill="rgb(231,218,15)" fg:x="7420" fg:w="32"/><text x="5.8126%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (73 samples, 0.05%)</title><rect x="5.5386%" y="453" width="0.0547%" height="15" fill="rgb(226,171,48)" fg:x="7388" fg:w="73"/><text x="5.7886%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (73 samples, 0.05%)</title><rect x="5.5386%" y="437" width="0.0547%" height="15" fill="rgb(235,201,9)" fg:x="7388" fg:w="73"/><text x="5.7886%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (73 samples, 0.05%)</title><rect x="5.5386%" y="421" width="0.0547%" height="15" fill="rgb(217,80,15)" fg:x="7388" fg:w="73"/><text x="5.7886%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (49 samples, 0.04%)</title><rect x="5.5566%" y="405" width="0.0367%" height="15" fill="rgb(219,152,8)" fg:x="7412" fg:w="49"/><text x="5.8066%" y="415.50"></text></g><g><title>hashbrown::map::make_insert_hash (106 samples, 0.08%)</title><rect x="5.5326%" y="485" width="0.0795%" height="15" fill="rgb(243,107,38)" fg:x="7380" fg:w="106"/><text x="5.7826%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (105 samples, 0.08%)</title><rect x="5.5334%" y="469" width="0.0787%" height="15" fill="rgb(231,17,5)" fg:x="7381" fg:w="105"/><text x="5.7834%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20 samples, 0.01%)</title><rect x="5.5971%" y="453" width="0.0150%" height="15" fill="rgb(209,25,54)" fg:x="7466" fg:w="20"/><text x="5.8471%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (20 samples, 0.01%)</title><rect x="5.5971%" y="437" width="0.0150%" height="15" fill="rgb(219,0,2)" fg:x="7466" fg:w="20"/><text x="5.8471%" y="447.50"></text></g><g><title>core::hash::Hasher::write_u8 (20 samples, 0.01%)</title><rect x="5.5971%" y="421" width="0.0150%" height="15" fill="rgb(246,9,5)" fg:x="7466" fg:w="20"/><text x="5.8471%" y="431.50"></text></g><g><title>hashbrown::raw::h2 (26 samples, 0.02%)</title><rect x="5.6301%" y="437" width="0.0195%" height="15" fill="rgb(226,159,4)" fg:x="7510" fg:w="26"/><text x="5.8801%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (51 samples, 0.04%)</title><rect x="5.6121%" y="485" width="0.0382%" height="15" fill="rgb(219,175,34)" fg:x="7486" fg:w="51"/><text x="5.8621%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (51 samples, 0.04%)</title><rect x="5.6121%" y="469" width="0.0382%" height="15" fill="rgb(236,10,46)" fg:x="7486" fg:w="51"/><text x="5.8621%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (51 samples, 0.04%)</title><rect x="5.6121%" y="453" width="0.0382%" height="15" fill="rgb(240,211,16)" fg:x="7486" fg:w="51"/><text x="5.8621%" y="463.50"></text></g><g><title>core::mem::swap (14 samples, 0.01%)</title><rect x="5.6668%" y="405" width="0.0105%" height="15" fill="rgb(205,3,43)" fg:x="7559" fg:w="14"/><text x="5.9168%" y="415.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (14 samples, 0.01%)</title><rect x="5.6668%" y="389" width="0.0105%" height="15" fill="rgb(245,7,22)" fg:x="7559" fg:w="14"/><text x="5.9168%" y="399.50"></text></g><g><title>core::ptr::swap_nonoverlapping (14 samples, 0.01%)</title><rect x="5.6668%" y="373" width="0.0105%" height="15" fill="rgb(239,132,32)" fg:x="7559" fg:w="14"/><text x="5.9168%" y="383.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (14 samples, 0.01%)</title><rect x="5.6668%" y="357" width="0.0105%" height="15" fill="rgb(228,202,34)" fg:x="7559" fg:w="14"/><text x="5.9168%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="5.6668%" y="341" width="0.0105%" height="15" fill="rgb(254,200,22)" fg:x="7559" fg:w="14"/><text x="5.9168%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (29 samples, 0.02%)</title><rect x="5.6848%" y="341" width="0.0217%" height="15" fill="rgb(219,10,39)" fg:x="7583" fg:w="29"/><text x="5.9348%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (29 samples, 0.02%)</title><rect x="5.6848%" y="325" width="0.0217%" height="15" fill="rgb(226,210,39)" fg:x="7583" fg:w="29"/><text x="5.9348%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (29 samples, 0.02%)</title><rect x="5.6848%" y="309" width="0.0217%" height="15" fill="rgb(208,219,16)" fg:x="7583" fg:w="29"/><text x="5.9348%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (19 samples, 0.01%)</title><rect x="5.6923%" y="293" width="0.0142%" height="15" fill="rgb(216,158,51)" fg:x="7593" fg:w="19"/><text x="5.9423%" y="303.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (43 samples, 0.03%)</title><rect x="5.6818%" y="389" width="0.0322%" height="15" fill="rgb(233,14,44)" fg:x="7579" fg:w="43"/><text x="5.9318%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (43 samples, 0.03%)</title><rect x="5.6818%" y="373" width="0.0322%" height="15" fill="rgb(237,97,39)" fg:x="7579" fg:w="43"/><text x="5.9318%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (43 samples, 0.03%)</title><rect x="5.6818%" y="357" width="0.0322%" height="15" fill="rgb(218,198,43)" fg:x="7579" fg:w="43"/><text x="5.9318%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (44 samples, 0.03%)</title><rect x="5.6818%" y="405" width="0.0330%" height="15" fill="rgb(231,104,20)" fg:x="7579" fg:w="44"/><text x="5.9318%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (34 samples, 0.03%)</title><rect x="5.7163%" y="405" width="0.0255%" height="15" fill="rgb(254,36,13)" fg:x="7625" fg:w="34"/><text x="5.9663%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (34 samples, 0.03%)</title><rect x="5.7163%" y="389" width="0.0255%" height="15" fill="rgb(248,14,50)" fg:x="7625" fg:w="34"/><text x="5.9663%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (116 samples, 0.09%)</title><rect x="5.6653%" y="421" width="0.0870%" height="15" fill="rgb(217,107,29)" fg:x="7557" fg:w="116"/><text x="5.9153%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (124 samples, 0.09%)</title><rect x="5.6608%" y="469" width="0.0930%" height="15" fill="rgb(251,169,33)" fg:x="7551" fg:w="124"/><text x="5.9108%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (124 samples, 0.09%)</title><rect x="5.6608%" y="453" width="0.0930%" height="15" fill="rgb(217,108,32)" fg:x="7551" fg:w="124"/><text x="5.9108%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (120 samples, 0.09%)</title><rect x="5.6638%" y="437" width="0.0900%" height="15" fill="rgb(219,66,42)" fg:x="7555" fg:w="120"/><text x="5.9138%" y="447.50"></text></g><g><title>hashbrown::raw::is_full (20 samples, 0.01%)</title><rect x="5.7785%" y="453" width="0.0150%" height="15" fill="rgb(206,180,7)" fg:x="7708" fg:w="20"/><text x="6.0285%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (61 samples, 0.05%)</title><rect x="5.7538%" y="469" width="0.0457%" height="15" fill="rgb(208,226,31)" fg:x="7675" fg:w="61"/><text x="6.0038%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (613 samples, 0.46%)</title><rect x="5.3445%" y="597" width="0.4596%" height="15" fill="rgb(218,26,49)" fg:x="7129" fg:w="613"/><text x="5.5945%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (599 samples, 0.45%)</title><rect x="5.3550%" y="581" width="0.4491%" height="15" fill="rgb(233,197,48)" fg:x="7143" fg:w="599"/><text x="5.6050%" y="591.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (362 samples, 0.27%)</title><rect x="5.5326%" y="565" width="0.2714%" height="15" fill="rgb(252,181,51)" fg:x="7380" fg:w="362"/><text x="5.7826%" y="575.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (362 samples, 0.27%)</title><rect x="5.5326%" y="549" width="0.2714%" height="15" fill="rgb(253,90,19)" fg:x="7380" fg:w="362"/><text x="5.7826%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (362 samples, 0.27%)</title><rect x="5.5326%" y="533" width="0.2714%" height="15" fill="rgb(215,171,30)" fg:x="7380" fg:w="362"/><text x="5.7826%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (362 samples, 0.27%)</title><rect x="5.5326%" y="517" width="0.2714%" height="15" fill="rgb(214,222,9)" fg:x="7380" fg:w="362"/><text x="5.7826%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (362 samples, 0.27%)</title><rect x="5.5326%" y="501" width="0.2714%" height="15" fill="rgb(223,3,22)" fg:x="7380" fg:w="362"/><text x="5.7826%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (205 samples, 0.15%)</title><rect x="5.6503%" y="485" width="0.1537%" height="15" fill="rgb(225,196,46)" fg:x="7537" fg:w="205"/><text x="5.9003%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (31 samples, 0.02%)</title><rect x="5.8078%" y="485" width="0.0232%" height="15" fill="rgb(209,110,37)" fg:x="7747" fg:w="31"/><text x="6.0578%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (31 samples, 0.02%)</title><rect x="5.8078%" y="469" width="0.0232%" height="15" fill="rgb(249,89,12)" fg:x="7747" fg:w="31"/><text x="6.0578%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (31 samples, 0.02%)</title><rect x="5.8078%" y="453" width="0.0232%" height="15" fill="rgb(226,27,33)" fg:x="7747" fg:w="31"/><text x="6.0578%" y="463.50"></text></g><g><title>hashbrown::map::make_insert_hash (49 samples, 0.04%)</title><rect x="5.8040%" y="517" width="0.0367%" height="15" fill="rgb(213,82,22)" fg:x="7742" fg:w="49"/><text x="6.0540%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (49 samples, 0.04%)</title><rect x="5.8040%" y="501" width="0.0367%" height="15" fill="rgb(248,140,0)" fg:x="7742" fg:w="49"/><text x="6.0540%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (18 samples, 0.01%)</title><rect x="5.8408%" y="517" width="0.0135%" height="15" fill="rgb(228,106,3)" fg:x="7791" fg:w="18"/><text x="6.0908%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 0.01%)</title><rect x="5.8408%" y="501" width="0.0135%" height="15" fill="rgb(209,23,37)" fg:x="7791" fg:w="18"/><text x="6.0908%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (18 samples, 0.01%)</title><rect x="5.8408%" y="485" width="0.0135%" height="15" fill="rgb(241,93,50)" fg:x="7791" fg:w="18"/><text x="6.0908%" y="495.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (82 samples, 0.06%)</title><rect x="5.8040%" y="581" width="0.0615%" height="15" fill="rgb(253,46,43)" fg:x="7742" fg:w="82"/><text x="6.0540%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (82 samples, 0.06%)</title><rect x="5.8040%" y="565" width="0.0615%" height="15" fill="rgb(226,206,43)" fg:x="7742" fg:w="82"/><text x="6.0540%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (82 samples, 0.06%)</title><rect x="5.8040%" y="549" width="0.0615%" height="15" fill="rgb(217,54,7)" fg:x="7742" fg:w="82"/><text x="6.0540%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (82 samples, 0.06%)</title><rect x="5.8040%" y="533" width="0.0615%" height="15" fill="rgb(223,5,52)" fg:x="7742" fg:w="82"/><text x="6.0540%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.01%)</title><rect x="5.8543%" y="517" width="0.0112%" height="15" fill="rgb(206,52,46)" fg:x="7809" fg:w="15"/><text x="6.1043%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (705 samples, 0.53%)</title><rect x="5.3430%" y="629" width="0.5285%" height="15" fill="rgb(253,136,11)" fg:x="7127" fg:w="705"/><text x="5.5930%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (704 samples, 0.53%)</title><rect x="5.3437%" y="613" width="0.5278%" height="15" fill="rgb(208,106,33)" fg:x="7128" fg:w="704"/><text x="5.5937%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (90 samples, 0.07%)</title><rect x="5.8040%" y="597" width="0.0675%" height="15" fill="rgb(206,54,4)" fg:x="7742" fg:w="90"/><text x="6.0540%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (16 samples, 0.01%)</title><rect x="5.8745%" y="565" width="0.0120%" height="15" fill="rgb(213,3,15)" fg:x="7836" fg:w="16"/><text x="6.1245%" y="575.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (728 samples, 0.55%)</title><rect x="5.3415%" y="677" width="0.5458%" height="15" fill="rgb(252,211,39)" fg:x="7125" fg:w="728"/><text x="5.5915%" y="687.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (728 samples, 0.55%)</title><rect x="5.3415%" y="661" width="0.5458%" height="15" fill="rgb(223,6,36)" fg:x="7125" fg:w="728"/><text x="5.5915%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (728 samples, 0.55%)</title><rect x="5.3415%" y="645" width="0.5458%" height="15" fill="rgb(252,169,45)" fg:x="7125" fg:w="728"/><text x="5.5915%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (21 samples, 0.02%)</title><rect x="5.8715%" y="629" width="0.0157%" height="15" fill="rgb(212,48,26)" fg:x="7832" fg:w="21"/><text x="6.1215%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (21 samples, 0.02%)</title><rect x="5.8715%" y="613" width="0.0157%" height="15" fill="rgb(251,102,48)" fg:x="7832" fg:w="21"/><text x="6.1215%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 0.01%)</title><rect x="5.8730%" y="597" width="0.0142%" height="15" fill="rgb(243,208,16)" fg:x="7834" fg:w="19"/><text x="6.1230%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (17 samples, 0.01%)</title><rect x="5.8745%" y="581" width="0.0127%" height="15" fill="rgb(219,96,24)" fg:x="7836" fg:w="17"/><text x="6.1245%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (736 samples, 0.55%)</title><rect x="5.3370%" y="709" width="0.5518%" height="15" fill="rgb(219,33,29)" fg:x="7119" fg:w="736"/><text x="5.5870%" y="719.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (736 samples, 0.55%)</title><rect x="5.3370%" y="693" width="0.5518%" height="15" fill="rgb(223,176,5)" fg:x="7119" fg:w="736"/><text x="5.5870%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;,&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}}&gt;&gt; (19 samples, 0.01%)</title><rect x="5.8992%" y="709" width="0.0142%" height="15" fill="rgb(228,140,14)" fg:x="7869" fg:w="19"/><text x="6.1492%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="5.8992%" y="693" width="0.0142%" height="15" fill="rgb(217,179,31)" fg:x="7869" fg:w="19"/><text x="6.1492%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 0.02%)</title><rect x="5.9210%" y="661" width="0.0180%" height="15" fill="rgb(230,9,30)" fg:x="7898" fg:w="24"/><text x="6.1710%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (24 samples, 0.02%)</title><rect x="5.9210%" y="645" width="0.0180%" height="15" fill="rgb(230,136,20)" fg:x="7898" fg:w="24"/><text x="6.1710%" y="655.50"></text></g><g><title>itertools::Itertools::collect_vec (48 samples, 0.04%)</title><rect x="5.9202%" y="709" width="0.0360%" height="15" fill="rgb(215,210,22)" fg:x="7897" fg:w="48"/><text x="6.1702%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (48 samples, 0.04%)</title><rect x="5.9202%" y="693" width="0.0360%" height="15" fill="rgb(218,43,5)" fg:x="7897" fg:w="48"/><text x="6.1702%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (48 samples, 0.04%)</title><rect x="5.9202%" y="677" width="0.0360%" height="15" fill="rgb(216,11,5)" fg:x="7897" fg:w="48"/><text x="6.1702%" y="687.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (23 samples, 0.02%)</title><rect x="5.9390%" y="661" width="0.0172%" height="15" fill="rgb(209,82,29)" fg:x="7922" fg:w="23"/><text x="6.1890%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="5.9405%" y="645" width="0.0157%" height="15" fill="rgb(244,115,12)" fg:x="7924" fg:w="21"/><text x="6.1905%" y="655.50"></text></g><g><title>itertools::Itertools::combinations (43 samples, 0.03%)</title><rect x="5.9562%" y="709" width="0.0322%" height="15" fill="rgb(222,82,18)" fg:x="7945" fg:w="43"/><text x="6.2062%" y="719.50"></text></g><g><title>itertools::combinations::combinations (42 samples, 0.03%)</title><rect x="5.9570%" y="693" width="0.0315%" height="15" fill="rgb(249,227,8)" fg:x="7946" fg:w="42"/><text x="6.2070%" y="703.50"></text></g><g><title>itertools::combinations::LazyBuffer&lt;I&gt;::new (26 samples, 0.02%)</title><rect x="5.9690%" y="677" width="0.0195%" height="15" fill="rgb(253,141,45)" fg:x="7962" fg:w="26"/><text x="6.2190%" y="687.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (1,305 samples, 0.98%)</title><rect x="5.0139%" y="725" width="0.9783%" height="15" fill="rgb(234,184,4)" fg:x="6688" fg:w="1305"/><text x="5.2639%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.01%)</title><rect x="5.9967%" y="453" width="0.0120%" height="15" fill="rgb(218,194,23)" fg:x="7999" fg:w="16"/><text x="6.2467%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (20 samples, 0.01%)</title><rect x="5.9945%" y="517" width="0.0150%" height="15" fill="rgb(235,66,41)" fg:x="7996" fg:w="20"/><text x="6.2445%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.01%)</title><rect x="5.9945%" y="501" width="0.0150%" height="15" fill="rgb(245,217,1)" fg:x="7996" fg:w="20"/><text x="6.2445%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 0.01%)</title><rect x="5.9967%" y="485" width="0.0127%" height="15" fill="rgb(229,91,1)" fg:x="7999" fg:w="17"/><text x="6.2467%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.01%)</title><rect x="5.9967%" y="469" width="0.0127%" height="15" fill="rgb(207,101,30)" fg:x="7999" fg:w="17"/><text x="6.2467%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.02%)</title><rect x="6.0094%" y="517" width="0.0172%" height="15" fill="rgb(223,82,49)" fg:x="8016" fg:w="23"/><text x="6.2594%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (18 samples, 0.01%)</title><rect x="6.0132%" y="501" width="0.0135%" height="15" fill="rgb(218,167,17)" fg:x="8021" fg:w="18"/><text x="6.2632%" y="511.50"></text></g><g><title>alloc::string::String::push_str (44 samples, 0.03%)</title><rect x="5.9945%" y="581" width="0.0330%" height="15" fill="rgb(208,103,14)" fg:x="7996" fg:w="44"/><text x="6.2445%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (44 samples, 0.03%)</title><rect x="5.9945%" y="565" width="0.0330%" height="15" fill="rgb(238,20,8)" fg:x="7996" fg:w="44"/><text x="6.2445%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (44 samples, 0.03%)</title><rect x="5.9945%" y="549" width="0.0330%" height="15" fill="rgb(218,80,54)" fg:x="7996" fg:w="44"/><text x="6.2445%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (44 samples, 0.03%)</title><rect x="5.9945%" y="533" width="0.0330%" height="15" fill="rgb(240,144,17)" fg:x="7996" fg:w="44"/><text x="6.2445%" y="543.50"></text></g><g><title>__GI___libc_free (18 samples, 0.01%)</title><rect x="6.0304%" y="485" width="0.0135%" height="15" fill="rgb(245,27,50)" fg:x="8044" fg:w="18"/><text x="6.2804%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (135 samples, 0.10%)</title><rect x="5.9945%" y="613" width="0.1012%" height="15" fill="rgb(251,51,7)" fg:x="7996" fg:w="135"/><text x="6.2445%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (135 samples, 0.10%)</title><rect x="5.9945%" y="597" width="0.1012%" height="15" fill="rgb(245,217,29)" fg:x="7996" fg:w="135"/><text x="6.2445%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (91 samples, 0.07%)</title><rect x="6.0274%" y="581" width="0.0682%" height="15" fill="rgb(221,176,29)" fg:x="8040" fg:w="91"/><text x="6.2774%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (91 samples, 0.07%)</title><rect x="6.0274%" y="565" width="0.0682%" height="15" fill="rgb(212,180,24)" fg:x="8040" fg:w="91"/><text x="6.2774%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (91 samples, 0.07%)</title><rect x="6.0274%" y="549" width="0.0682%" height="15" fill="rgb(254,24,2)" fg:x="8040" fg:w="91"/><text x="6.2774%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 0.07%)</title><rect x="6.0274%" y="533" width="0.0682%" height="15" fill="rgb(230,100,2)" fg:x="8040" fg:w="91"/><text x="6.2774%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (91 samples, 0.07%)</title><rect x="6.0274%" y="517" width="0.0682%" height="15" fill="rgb(219,142,25)" fg:x="8040" fg:w="91"/><text x="6.2774%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (91 samples, 0.07%)</title><rect x="6.0274%" y="501" width="0.0682%" height="15" fill="rgb(240,73,43)" fg:x="8040" fg:w="91"/><text x="6.2774%" y="511.50"></text></g><g><title>_int_free (56 samples, 0.04%)</title><rect x="6.0537%" y="485" width="0.0420%" height="15" fill="rgb(214,114,15)" fg:x="8075" fg:w="56"/><text x="6.3037%" y="495.50"></text></g><g><title>__GI___libc_malloc (29 samples, 0.02%)</title><rect x="6.1062%" y="373" width="0.0217%" height="15" fill="rgb(207,130,4)" fg:x="8145" fg:w="29"/><text x="6.3562%" y="383.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (56 samples, 0.04%)</title><rect x="6.0964%" y="597" width="0.0420%" height="15" fill="rgb(221,25,40)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (56 samples, 0.04%)</title><rect x="6.0964%" y="581" width="0.0420%" height="15" fill="rgb(241,184,7)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="591.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (56 samples, 0.04%)</title><rect x="6.0964%" y="565" width="0.0420%" height="15" fill="rgb(235,159,4)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (56 samples, 0.04%)</title><rect x="6.0964%" y="549" width="0.0420%" height="15" fill="rgb(214,87,48)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (56 samples, 0.04%)</title><rect x="6.0964%" y="533" width="0.0420%" height="15" fill="rgb(246,198,24)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (56 samples, 0.04%)</title><rect x="6.0964%" y="517" width="0.0420%" height="15" fill="rgb(209,66,40)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (56 samples, 0.04%)</title><rect x="6.0964%" y="501" width="0.0420%" height="15" fill="rgb(233,147,39)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (56 samples, 0.04%)</title><rect x="6.0964%" y="485" width="0.0420%" height="15" fill="rgb(231,145,52)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (56 samples, 0.04%)</title><rect x="6.0964%" y="469" width="0.0420%" height="15" fill="rgb(206,20,26)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (56 samples, 0.04%)</title><rect x="6.0964%" y="453" width="0.0420%" height="15" fill="rgb(238,220,4)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (56 samples, 0.04%)</title><rect x="6.0964%" y="437" width="0.0420%" height="15" fill="rgb(252,195,42)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.04%)</title><rect x="6.0964%" y="421" width="0.0420%" height="15" fill="rgb(209,10,6)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.04%)</title><rect x="6.0964%" y="405" width="0.0420%" height="15" fill="rgb(229,3,52)" fg:x="8132" fg:w="56"/><text x="6.3464%" y="415.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.03%)</title><rect x="6.1047%" y="389" width="0.0337%" height="15" fill="rgb(253,49,37)" fg:x="8143" fg:w="45"/><text x="6.3547%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (15 samples, 0.01%)</title><rect x="6.1661%" y="421" width="0.0112%" height="15" fill="rgb(240,103,49)" fg:x="8225" fg:w="15"/><text x="6.4161%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.01%)</title><rect x="6.1661%" y="405" width="0.0112%" height="15" fill="rgb(250,182,30)" fg:x="8225" fg:w="15"/><text x="6.4161%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.01%)</title><rect x="6.1661%" y="389" width="0.0112%" height="15" fill="rgb(248,8,30)" fg:x="8225" fg:w="15"/><text x="6.4161%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.01%)</title><rect x="6.1661%" y="373" width="0.0112%" height="15" fill="rgb(237,120,30)" fg:x="8225" fg:w="15"/><text x="6.4161%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (19 samples, 0.01%)</title><rect x="6.1646%" y="517" width="0.0142%" height="15" fill="rgb(221,146,34)" fg:x="8223" fg:w="19"/><text x="6.4146%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (18 samples, 0.01%)</title><rect x="6.1654%" y="501" width="0.0135%" height="15" fill="rgb(242,55,13)" fg:x="8224" fg:w="18"/><text x="6.4154%" y="511.50"></text></g><g><title>alloc::string::String::push_str (18 samples, 0.01%)</title><rect x="6.1654%" y="485" width="0.0135%" height="15" fill="rgb(242,112,31)" fg:x="8224" fg:w="18"/><text x="6.4154%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (18 samples, 0.01%)</title><rect x="6.1654%" y="469" width="0.0135%" height="15" fill="rgb(249,192,27)" fg:x="8224" fg:w="18"/><text x="6.4154%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (18 samples, 0.01%)</title><rect x="6.1654%" y="453" width="0.0135%" height="15" fill="rgb(208,204,44)" fg:x="8224" fg:w="18"/><text x="6.4154%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (18 samples, 0.01%)</title><rect x="6.1654%" y="437" width="0.0135%" height="15" fill="rgb(208,93,54)" fg:x="8224" fg:w="18"/><text x="6.4154%" y="447.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (36 samples, 0.03%)</title><rect x="6.1631%" y="549" width="0.0270%" height="15" fill="rgb(242,1,31)" fg:x="8221" fg:w="36"/><text x="6.4131%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (34 samples, 0.03%)</title><rect x="6.1646%" y="533" width="0.0255%" height="15" fill="rgb(241,83,25)" fg:x="8223" fg:w="34"/><text x="6.4146%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad_integral (15 samples, 0.01%)</title><rect x="6.1789%" y="517" width="0.0112%" height="15" fill="rgb(205,169,50)" fg:x="8242" fg:w="15"/><text x="6.4289%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (263 samples, 0.20%)</title><rect x="5.9945%" y="693" width="0.1972%" height="15" fill="rgb(239,186,37)" fg:x="7996" fg:w="263"/><text x="6.2445%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (263 samples, 0.20%)</title><rect x="5.9945%" y="677" width="0.1972%" height="15" fill="rgb(205,221,10)" fg:x="7996" fg:w="263"/><text x="6.2445%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (263 samples, 0.20%)</title><rect x="5.9945%" y="661" width="0.1972%" height="15" fill="rgb(218,196,15)" fg:x="7996" fg:w="263"/><text x="6.2445%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (263 samples, 0.20%)</title><rect x="5.9945%" y="645" width="0.1972%" height="15" fill="rgb(218,196,35)" fg:x="7996" fg:w="263"/><text x="6.2445%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (263 samples, 0.20%)</title><rect x="5.9945%" y="629" width="0.1972%" height="15" fill="rgb(233,63,24)" fg:x="7996" fg:w="263"/><text x="6.2445%" y="639.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (128 samples, 0.10%)</title><rect x="6.0957%" y="613" width="0.0960%" height="15" fill="rgb(225,8,4)" fg:x="8131" fg:w="128"/><text x="6.3457%" y="623.50"></text></g><g><title>alloc::fmt::format (71 samples, 0.05%)</title><rect x="6.1384%" y="597" width="0.0532%" height="15" fill="rgb(234,105,35)" fg:x="8188" fg:w="71"/><text x="6.3884%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (62 samples, 0.05%)</title><rect x="6.1451%" y="581" width="0.0465%" height="15" fill="rgb(236,21,32)" fg:x="8197" fg:w="62"/><text x="6.3951%" y="591.50"></text></g><g><title>core::fmt::write (42 samples, 0.03%)</title><rect x="6.1601%" y="565" width="0.0315%" height="15" fill="rgb(228,109,6)" fg:x="8217" fg:w="42"/><text x="6.4101%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (268 samples, 0.20%)</title><rect x="5.9945%" y="725" width="0.2009%" height="15" fill="rgb(229,215,31)" fg:x="7996" fg:w="268"/><text x="6.2445%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (268 samples, 0.20%)</title><rect x="5.9945%" y="709" width="0.2009%" height="15" fill="rgb(221,52,54)" fg:x="7996" fg:w="268"/><text x="6.2445%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (31 samples, 0.02%)</title><rect x="6.2089%" y="437" width="0.0232%" height="15" fill="rgb(252,129,43)" fg:x="8282" fg:w="31"/><text x="6.4589%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (31 samples, 0.02%)</title><rect x="6.2089%" y="421" width="0.0232%" height="15" fill="rgb(248,183,27)" fg:x="8282" fg:w="31"/><text x="6.4589%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (31 samples, 0.02%)</title><rect x="6.2089%" y="405" width="0.0232%" height="15" fill="rgb(250,0,22)" fg:x="8282" fg:w="31"/><text x="6.4589%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (23 samples, 0.02%)</title><rect x="6.2149%" y="389" width="0.0172%" height="15" fill="rgb(213,166,10)" fg:x="8290" fg:w="23"/><text x="6.4649%" y="399.50"></text></g><g><title>hashbrown::map::make_insert_hash (40 samples, 0.03%)</title><rect x="6.2074%" y="469" width="0.0300%" height="15" fill="rgb(207,163,36)" fg:x="8280" fg:w="40"/><text x="6.4574%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (40 samples, 0.03%)</title><rect x="6.2074%" y="453" width="0.0300%" height="15" fill="rgb(208,122,22)" fg:x="8280" fg:w="40"/><text x="6.4574%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (25 samples, 0.02%)</title><rect x="6.2373%" y="469" width="0.0187%" height="15" fill="rgb(207,104,49)" fg:x="8320" fg:w="25"/><text x="6.4873%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (25 samples, 0.02%)</title><rect x="6.2373%" y="453" width="0.0187%" height="15" fill="rgb(248,211,50)" fg:x="8320" fg:w="25"/><text x="6.4873%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (25 samples, 0.02%)</title><rect x="6.2373%" y="437" width="0.0187%" height="15" fill="rgb(217,13,45)" fg:x="8320" fg:w="25"/><text x="6.4873%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (27 samples, 0.02%)</title><rect x="6.2583%" y="453" width="0.0202%" height="15" fill="rgb(211,216,49)" fg:x="8348" fg:w="27"/><text x="6.5083%" y="463.50"></text></g><g><title>hashbrown::raw::is_full (14 samples, 0.01%)</title><rect x="6.2681%" y="437" width="0.0105%" height="15" fill="rgb(221,58,53)" fg:x="8361" fg:w="14"/><text x="6.5181%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (107 samples, 0.08%)</title><rect x="6.2044%" y="629" width="0.0802%" height="15" fill="rgb(220,112,41)" fg:x="8276" fg:w="107"/><text x="6.4544%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (106 samples, 0.08%)</title><rect x="6.2051%" y="613" width="0.0795%" height="15" fill="rgb(236,38,28)" fg:x="8277" fg:w="106"/><text x="6.4551%" y="623.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (106 samples, 0.08%)</title><rect x="6.2051%" y="597" width="0.0795%" height="15" fill="rgb(227,195,22)" fg:x="8277" fg:w="106"/><text x="6.4551%" y="607.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (106 samples, 0.08%)</title><rect x="6.2051%" y="581" width="0.0795%" height="15" fill="rgb(214,55,33)" fg:x="8277" fg:w="106"/><text x="6.4551%" y="591.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (106 samples, 0.08%)</title><rect x="6.2051%" y="565" width="0.0795%" height="15" fill="rgb(248,80,13)" fg:x="8277" fg:w="106"/><text x="6.4551%" y="575.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (103 samples, 0.08%)</title><rect x="6.2074%" y="549" width="0.0772%" height="15" fill="rgb(238,52,6)" fg:x="8280" fg:w="103"/><text x="6.4574%" y="559.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (103 samples, 0.08%)</title><rect x="6.2074%" y="533" width="0.0772%" height="15" fill="rgb(224,198,47)" fg:x="8280" fg:w="103"/><text x="6.4574%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (103 samples, 0.08%)</title><rect x="6.2074%" y="517" width="0.0772%" height="15" fill="rgb(233,171,20)" fg:x="8280" fg:w="103"/><text x="6.4574%" y="527.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (103 samples, 0.08%)</title><rect x="6.2074%" y="501" width="0.0772%" height="15" fill="rgb(241,30,25)" fg:x="8280" fg:w="103"/><text x="6.4574%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (103 samples, 0.08%)</title><rect x="6.2074%" y="485" width="0.0772%" height="15" fill="rgb(207,171,38)" fg:x="8280" fg:w="103"/><text x="6.4574%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (38 samples, 0.03%)</title><rect x="6.2561%" y="469" width="0.0285%" height="15" fill="rgb(234,70,1)" fg:x="8345" fg:w="38"/><text x="6.5061%" y="479.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (129 samples, 0.10%)</title><rect x="6.2036%" y="693" width="0.0967%" height="15" fill="rgb(232,178,18)" fg:x="8275" fg:w="129"/><text x="6.4536%" y="703.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (128 samples, 0.10%)</title><rect x="6.2044%" y="677" width="0.0960%" height="15" fill="rgb(241,78,40)" fg:x="8276" fg:w="128"/><text x="6.4544%" y="687.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (128 samples, 0.10%)</title><rect x="6.2044%" y="661" width="0.0960%" height="15" fill="rgb(222,35,25)" fg:x="8276" fg:w="128"/><text x="6.4544%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (128 samples, 0.10%)</title><rect x="6.2044%" y="645" width="0.0960%" height="15" fill="rgb(207,92,16)" fg:x="8276" fg:w="128"/><text x="6.4544%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (21 samples, 0.02%)</title><rect x="6.2846%" y="629" width="0.0157%" height="15" fill="rgb(216,59,51)" fg:x="8383" fg:w="21"/><text x="6.5346%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (21 samples, 0.02%)</title><rect x="6.2846%" y="613" width="0.0157%" height="15" fill="rgb(213,80,28)" fg:x="8383" fg:w="21"/><text x="6.5346%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.02%)</title><rect x="6.2846%" y="597" width="0.0157%" height="15" fill="rgb(220,93,7)" fg:x="8383" fg:w="21"/><text x="6.5346%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (20 samples, 0.01%)</title><rect x="6.2853%" y="581" width="0.0150%" height="15" fill="rgb(225,24,44)" fg:x="8384" fg:w="20"/><text x="6.5353%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (20 samples, 0.01%)</title><rect x="6.2853%" y="565" width="0.0150%" height="15" fill="rgb(243,74,40)" fg:x="8384" fg:w="20"/><text x="6.5353%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (15 samples, 0.01%)</title><rect x="6.2891%" y="549" width="0.0112%" height="15" fill="rgb(228,39,7)" fg:x="8389" fg:w="15"/><text x="6.5391%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (15 samples, 0.01%)</title><rect x="6.2891%" y="533" width="0.0112%" height="15" fill="rgb(227,79,8)" fg:x="8389" fg:w="15"/><text x="6.5391%" y="543.50"></text></g><g><title>__GI___libc_malloc (21 samples, 0.02%)</title><rect x="6.3311%" y="517" width="0.0157%" height="15" fill="rgb(236,58,11)" fg:x="8445" fg:w="21"/><text x="6.5811%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (32 samples, 0.02%)</title><rect x="6.3281%" y="629" width="0.0240%" height="15" fill="rgb(249,63,35)" fg:x="8441" fg:w="32"/><text x="6.5781%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (32 samples, 0.02%)</title><rect x="6.3281%" y="613" width="0.0240%" height="15" fill="rgb(252,114,16)" fg:x="8441" fg:w="32"/><text x="6.5781%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (32 samples, 0.02%)</title><rect x="6.3281%" y="597" width="0.0240%" height="15" fill="rgb(254,151,24)" fg:x="8441" fg:w="32"/><text x="6.5781%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (32 samples, 0.02%)</title><rect x="6.3281%" y="581" width="0.0240%" height="15" fill="rgb(253,54,39)" fg:x="8441" fg:w="32"/><text x="6.5781%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.02%)</title><rect x="6.3281%" y="565" width="0.0240%" height="15" fill="rgb(243,25,45)" fg:x="8441" fg:w="32"/><text x="6.5781%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.02%)</title><rect x="6.3281%" y="549" width="0.0240%" height="15" fill="rgb(234,134,9)" fg:x="8441" fg:w="32"/><text x="6.5781%" y="559.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.02%)</title><rect x="6.3311%" y="533" width="0.0210%" height="15" fill="rgb(227,166,31)" fg:x="8445" fg:w="28"/><text x="6.5811%" y="543.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.04%)</title><rect x="6.3108%" y="645" width="0.0427%" height="15" fill="rgb(245,143,41)" fg:x="8418" fg:w="57"/><text x="6.5608%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (88 samples, 0.07%)</title><rect x="6.3071%" y="693" width="0.0660%" height="15" fill="rgb(238,181,32)" fg:x="8413" fg:w="88"/><text x="6.5571%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (88 samples, 0.07%)</title><rect x="6.3071%" y="677" width="0.0660%" height="15" fill="rgb(224,113,18)" fg:x="8413" fg:w="88"/><text x="6.5571%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (88 samples, 0.07%)</title><rect x="6.3071%" y="661" width="0.0660%" height="15" fill="rgb(240,229,28)" fg:x="8413" fg:w="88"/><text x="6.5571%" y="671.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (26 samples, 0.02%)</title><rect x="6.3535%" y="645" width="0.0195%" height="15" fill="rgb(250,185,3)" fg:x="8475" fg:w="26"/><text x="6.6035%" y="655.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}} (26 samples, 0.02%)</title><rect x="6.3535%" y="629" width="0.0195%" height="15" fill="rgb(212,59,25)" fg:x="8475" fg:w="26"/><text x="6.6035%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (26 samples, 0.02%)</title><rect x="6.3535%" y="613" width="0.0195%" height="15" fill="rgb(221,87,20)" fg:x="8475" fg:w="26"/><text x="6.6035%" y="623.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&gt;::sum (26 samples, 0.02%)</title><rect x="6.3535%" y="597" width="0.0195%" height="15" fill="rgb(213,74,28)" fg:x="8475" fg:w="26"/><text x="6.6035%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (26 samples, 0.02%)</title><rect x="6.3535%" y="581" width="0.0195%" height="15" fill="rgb(224,132,34)" fg:x="8475" fg:w="26"/><text x="6.6035%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (20 samples, 0.01%)</title><rect x="6.3580%" y="565" width="0.0150%" height="15" fill="rgb(222,101,24)" fg:x="8481" fg:w="20"/><text x="6.6080%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="6.3580%" y="549" width="0.0150%" height="15" fill="rgb(254,142,4)" fg:x="8481" fg:w="20"/><text x="6.6080%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (20 samples, 0.01%)</title><rect x="6.3580%" y="533" width="0.0150%" height="15" fill="rgb(230,229,49)" fg:x="8481" fg:w="20"/><text x="6.6080%" y="543.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="6.3580%" y="517" width="0.0150%" height="15" fill="rgb(238,70,47)" fg:x="8481" fg:w="20"/><text x="6.6080%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (20 samples, 0.01%)</title><rect x="6.3580%" y="501" width="0.0150%" height="15" fill="rgb(231,160,17)" fg:x="8481" fg:w="20"/><text x="6.6080%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="6.3580%" y="485" width="0.0150%" height="15" fill="rgb(218,68,53)" fg:x="8481" fg:w="20"/><text x="6.6080%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.01%)</title><rect x="6.3580%" y="469" width="0.0150%" height="15" fill="rgb(236,111,10)" fg:x="8481" fg:w="20"/><text x="6.6080%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.01%)</title><rect x="6.3580%" y="453" width="0.0150%" height="15" fill="rgb(224,34,41)" fg:x="8481" fg:w="20"/><text x="6.6080%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (27 samples, 0.02%)</title><rect x="6.3993%" y="437" width="0.0202%" height="15" fill="rgb(241,118,19)" fg:x="8536" fg:w="27"/><text x="6.6493%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (27 samples, 0.02%)</title><rect x="6.3993%" y="421" width="0.0202%" height="15" fill="rgb(238,129,25)" fg:x="8536" fg:w="27"/><text x="6.6493%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (27 samples, 0.02%)</title><rect x="6.3993%" y="405" width="0.0202%" height="15" fill="rgb(238,22,31)" fg:x="8536" fg:w="27"/><text x="6.6493%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16 samples, 0.01%)</title><rect x="6.4075%" y="389" width="0.0120%" height="15" fill="rgb(222,174,48)" fg:x="8547" fg:w="16"/><text x="6.6575%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (46 samples, 0.03%)</title><rect x="6.3978%" y="469" width="0.0345%" height="15" fill="rgb(206,152,40)" fg:x="8534" fg:w="46"/><text x="6.6478%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (46 samples, 0.03%)</title><rect x="6.3978%" y="453" width="0.0345%" height="15" fill="rgb(218,99,54)" fg:x="8534" fg:w="46"/><text x="6.6478%" y="463.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 0.08%)</title><rect x="6.3865%" y="549" width="0.0765%" height="15" fill="rgb(220,174,26)" fg:x="8519" fg:w="102"/><text x="6.6365%" y="559.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (89 samples, 0.07%)</title><rect x="6.3963%" y="533" width="0.0667%" height="15" fill="rgb(245,116,9)" fg:x="8532" fg:w="89"/><text x="6.6463%" y="543.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (89 samples, 0.07%)</title><rect x="6.3963%" y="517" width="0.0667%" height="15" fill="rgb(209,72,35)" fg:x="8532" fg:w="89"/><text x="6.6463%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (89 samples, 0.07%)</title><rect x="6.3963%" y="501" width="0.0667%" height="15" fill="rgb(226,126,21)" fg:x="8532" fg:w="89"/><text x="6.6463%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (89 samples, 0.07%)</title><rect x="6.3963%" y="485" width="0.0667%" height="15" fill="rgb(227,192,1)" fg:x="8532" fg:w="89"/><text x="6.6463%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (41 samples, 0.03%)</title><rect x="6.4323%" y="469" width="0.0307%" height="15" fill="rgb(237,180,29)" fg:x="8580" fg:w="41"/><text x="6.6823%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (41 samples, 0.03%)</title><rect x="6.4323%" y="453" width="0.0307%" height="15" fill="rgb(230,197,35)" fg:x="8580" fg:w="41"/><text x="6.6823%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (41 samples, 0.03%)</title><rect x="6.4323%" y="437" width="0.0307%" height="15" fill="rgb(246,193,31)" fg:x="8580" fg:w="41"/><text x="6.6823%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (17 samples, 0.01%)</title><rect x="6.4742%" y="373" width="0.0127%" height="15" fill="rgb(241,36,4)" fg:x="8636" fg:w="17"/><text x="6.7242%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (30 samples, 0.02%)</title><rect x="6.4675%" y="437" width="0.0225%" height="15" fill="rgb(241,130,17)" fg:x="8627" fg:w="30"/><text x="6.7175%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (30 samples, 0.02%)</title><rect x="6.4675%" y="421" width="0.0225%" height="15" fill="rgb(206,137,32)" fg:x="8627" fg:w="30"/><text x="6.7175%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (30 samples, 0.02%)</title><rect x="6.4675%" y="405" width="0.0225%" height="15" fill="rgb(237,228,51)" fg:x="8627" fg:w="30"/><text x="6.7175%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (21 samples, 0.02%)</title><rect x="6.4742%" y="389" width="0.0157%" height="15" fill="rgb(243,6,42)" fg:x="8636" fg:w="21"/><text x="6.7242%" y="399.50"></text></g><g><title>hashbrown::map::make_insert_hash (43 samples, 0.03%)</title><rect x="6.4630%" y="469" width="0.0322%" height="15" fill="rgb(251,74,28)" fg:x="8621" fg:w="43"/><text x="6.7130%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (43 samples, 0.03%)</title><rect x="6.4630%" y="453" width="0.0322%" height="15" fill="rgb(218,20,49)" fg:x="8621" fg:w="43"/><text x="6.7130%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (26 samples, 0.02%)</title><rect x="6.4952%" y="469" width="0.0195%" height="15" fill="rgb(238,28,14)" fg:x="8664" fg:w="26"/><text x="6.7452%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (26 samples, 0.02%)</title><rect x="6.4952%" y="453" width="0.0195%" height="15" fill="rgb(229,40,46)" fg:x="8664" fg:w="26"/><text x="6.7452%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (26 samples, 0.02%)</title><rect x="6.4952%" y="437" width="0.0195%" height="15" fill="rgb(244,195,20)" fg:x="8664" fg:w="26"/><text x="6.7452%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (16 samples, 0.01%)</title><rect x="6.5357%" y="325" width="0.0120%" height="15" fill="rgb(253,56,35)" fg:x="8718" fg:w="16"/><text x="6.7857%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (16 samples, 0.01%)</title><rect x="6.5357%" y="309" width="0.0120%" height="15" fill="rgb(210,149,44)" fg:x="8718" fg:w="16"/><text x="6.7857%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (16 samples, 0.01%)</title><rect x="6.5357%" y="293" width="0.0120%" height="15" fill="rgb(240,135,12)" fg:x="8718" fg:w="16"/><text x="6.7857%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (25 samples, 0.02%)</title><rect x="6.5335%" y="389" width="0.0187%" height="15" fill="rgb(251,24,50)" fg:x="8715" fg:w="25"/><text x="6.7835%" y="399.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (25 samples, 0.02%)</title><rect x="6.5335%" y="373" width="0.0187%" height="15" fill="rgb(243,200,47)" fg:x="8715" fg:w="25"/><text x="6.7835%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.02%)</title><rect x="6.5335%" y="357" width="0.0187%" height="15" fill="rgb(224,166,26)" fg:x="8715" fg:w="25"/><text x="6.7835%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.02%)</title><rect x="6.5335%" y="341" width="0.0187%" height="15" fill="rgb(233,0,47)" fg:x="8715" fg:w="25"/><text x="6.7835%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (15 samples, 0.01%)</title><rect x="6.5522%" y="373" width="0.0112%" height="15" fill="rgb(253,80,5)" fg:x="8740" fg:w="15"/><text x="6.8022%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (16 samples, 0.01%)</title><rect x="6.5522%" y="389" width="0.0120%" height="15" fill="rgb(214,133,25)" fg:x="8740" fg:w="16"/><text x="6.8022%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (64 samples, 0.05%)</title><rect x="6.5252%" y="453" width="0.0480%" height="15" fill="rgb(209,27,14)" fg:x="8704" fg:w="64"/><text x="6.7752%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (64 samples, 0.05%)</title><rect x="6.5252%" y="437" width="0.0480%" height="15" fill="rgb(219,102,51)" fg:x="8704" fg:w="64"/><text x="6.7752%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (63 samples, 0.05%)</title><rect x="6.5260%" y="421" width="0.0472%" height="15" fill="rgb(237,18,16)" fg:x="8705" fg:w="63"/><text x="6.7760%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (60 samples, 0.04%)</title><rect x="6.5282%" y="405" width="0.0450%" height="15" fill="rgb(241,85,17)" fg:x="8708" fg:w="60"/><text x="6.7782%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (29 samples, 0.02%)</title><rect x="6.5732%" y="453" width="0.0217%" height="15" fill="rgb(236,90,42)" fg:x="8768" fg:w="29"/><text x="6.8232%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (294 samples, 0.22%)</title><rect x="6.3783%" y="581" width="0.2204%" height="15" fill="rgb(249,57,21)" fg:x="8508" fg:w="294"/><text x="6.6283%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (283 samples, 0.21%)</title><rect x="6.3865%" y="565" width="0.2122%" height="15" fill="rgb(243,12,36)" fg:x="8519" fg:w="283"/><text x="6.6365%" y="575.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (181 samples, 0.14%)</title><rect x="6.4630%" y="549" width="0.1357%" height="15" fill="rgb(253,128,47)" fg:x="8621" fg:w="181"/><text x="6.7130%" y="559.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (181 samples, 0.14%)</title><rect x="6.4630%" y="533" width="0.1357%" height="15" fill="rgb(207,33,20)" fg:x="8621" fg:w="181"/><text x="6.7130%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (181 samples, 0.14%)</title><rect x="6.4630%" y="517" width="0.1357%" height="15" fill="rgb(233,215,35)" fg:x="8621" fg:w="181"/><text x="6.7130%" y="527.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (181 samples, 0.14%)</title><rect x="6.4630%" y="501" width="0.1357%" height="15" fill="rgb(249,188,52)" fg:x="8621" fg:w="181"/><text x="6.7130%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (181 samples, 0.14%)</title><rect x="6.4630%" y="485" width="0.1357%" height="15" fill="rgb(225,12,32)" fg:x="8621" fg:w="181"/><text x="6.7130%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (112 samples, 0.08%)</title><rect x="6.5147%" y="469" width="0.0840%" height="15" fill="rgb(247,98,14)" fg:x="8690" fg:w="112"/><text x="6.7647%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (24 samples, 0.02%)</title><rect x="6.6002%" y="469" width="0.0180%" height="15" fill="rgb(247,219,48)" fg:x="8804" fg:w="24"/><text x="6.8502%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (24 samples, 0.02%)</title><rect x="6.6002%" y="453" width="0.0180%" height="15" fill="rgb(253,60,48)" fg:x="8804" fg:w="24"/><text x="6.8502%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (24 samples, 0.02%)</title><rect x="6.6002%" y="437" width="0.0180%" height="15" fill="rgb(245,15,52)" fg:x="8804" fg:w="24"/><text x="6.8502%" y="447.50"></text></g><g><title>hashbrown::map::make_insert_hash (29 samples, 0.02%)</title><rect x="6.5994%" y="501" width="0.0217%" height="15" fill="rgb(220,133,28)" fg:x="8803" fg:w="29"/><text x="6.8494%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29 samples, 0.02%)</title><rect x="6.5994%" y="485" width="0.0217%" height="15" fill="rgb(217,180,4)" fg:x="8803" fg:w="29"/><text x="6.8494%" y="495.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (43 samples, 0.03%)</title><rect x="6.5994%" y="565" width="0.0322%" height="15" fill="rgb(251,24,1)" fg:x="8803" fg:w="43"/><text x="6.8494%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (43 samples, 0.03%)</title><rect x="6.5994%" y="549" width="0.0322%" height="15" fill="rgb(212,185,49)" fg:x="8803" fg:w="43"/><text x="6.8494%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (43 samples, 0.03%)</title><rect x="6.5994%" y="533" width="0.0322%" height="15" fill="rgb(215,175,22)" fg:x="8803" fg:w="43"/><text x="6.8494%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (43 samples, 0.03%)</title><rect x="6.5994%" y="517" width="0.0322%" height="15" fill="rgb(250,205,14)" fg:x="8803" fg:w="43"/><text x="6.8494%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (344 samples, 0.26%)</title><rect x="6.3768%" y="613" width="0.2579%" height="15" fill="rgb(225,211,22)" fg:x="8506" fg:w="344"/><text x="6.6268%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (343 samples, 0.26%)</title><rect x="6.3775%" y="597" width="0.2571%" height="15" fill="rgb(251,179,42)" fg:x="8507" fg:w="343"/><text x="6.6275%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (48 samples, 0.04%)</title><rect x="6.5987%" y="581" width="0.0360%" height="15" fill="rgb(208,216,51)" fg:x="8802" fg:w="48"/><text x="6.8487%" y="591.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (356 samples, 0.27%)</title><rect x="6.3745%" y="661" width="0.2669%" height="15" fill="rgb(235,36,11)" fg:x="8503" fg:w="356"/><text x="6.6245%" y="671.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (356 samples, 0.27%)</title><rect x="6.3745%" y="645" width="0.2669%" height="15" fill="rgb(213,189,28)" fg:x="8503" fg:w="356"/><text x="6.6245%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (356 samples, 0.27%)</title><rect x="6.3745%" y="629" width="0.2669%" height="15" fill="rgb(227,203,42)" fg:x="8503" fg:w="356"/><text x="6.6245%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (359 samples, 0.27%)</title><rect x="6.3730%" y="693" width="0.2691%" height="15" fill="rgb(244,72,36)" fg:x="8501" fg:w="359"/><text x="6.6230%" y="703.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (359 samples, 0.27%)</title><rect x="6.3730%" y="677" width="0.2691%" height="15" fill="rgb(213,53,17)" fg:x="8501" fg:w="359"/><text x="6.6230%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;,&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}}&gt;&gt; (18 samples, 0.01%)</title><rect x="6.6452%" y="693" width="0.0135%" height="15" fill="rgb(207,167,3)" fg:x="8864" fg:w="18"/><text x="6.8952%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="6.6452%" y="677" width="0.0135%" height="15" fill="rgb(216,98,30)" fg:x="8864" fg:w="18"/><text x="6.8952%" y="687.50"></text></g><g><title>itertools::Itertools::collect_vec (22 samples, 0.02%)</title><rect x="6.6647%" y="693" width="0.0165%" height="15" fill="rgb(236,123,15)" fg:x="8890" fg:w="22"/><text x="6.9147%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 0.02%)</title><rect x="6.6647%" y="677" width="0.0165%" height="15" fill="rgb(248,81,50)" fg:x="8890" fg:w="22"/><text x="6.9147%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (22 samples, 0.02%)</title><rect x="6.6647%" y="661" width="0.0165%" height="15" fill="rgb(214,120,4)" fg:x="8890" fg:w="22"/><text x="6.9147%" y="671.50"></text></g><g><title>itertools::Itertools::combinations (30 samples, 0.02%)</title><rect x="6.6812%" y="693" width="0.0225%" height="15" fill="rgb(208,179,34)" fg:x="8912" fg:w="30"/><text x="6.9312%" y="703.50"></text></g><g><title>itertools::combinations::combinations (30 samples, 0.02%)</title><rect x="6.6812%" y="677" width="0.0225%" height="15" fill="rgb(227,140,7)" fg:x="8912" fg:w="30"/><text x="6.9312%" y="687.50"></text></g><g><title>itertools::combinations::LazyBuffer&lt;I&gt;::new (16 samples, 0.01%)</title><rect x="6.6917%" y="661" width="0.0120%" height="15" fill="rgb(214,22,6)" fg:x="8926" fg:w="16"/><text x="6.9417%" y="671.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (679 samples, 0.51%)</title><rect x="6.1984%" y="709" width="0.5090%" height="15" fill="rgb(207,137,27)" fg:x="8268" fg:w="679"/><text x="6.4484%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (16 samples, 0.01%)</title><rect x="6.7134%" y="501" width="0.0120%" height="15" fill="rgb(210,8,46)" fg:x="8955" fg:w="16"/><text x="6.9634%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.01%)</title><rect x="6.7134%" y="485" width="0.0120%" height="15" fill="rgb(240,16,54)" fg:x="8955" fg:w="16"/><text x="6.9634%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.01%)</title><rect x="6.7149%" y="469" width="0.0105%" height="15" fill="rgb(211,209,29)" fg:x="8957" fg:w="14"/><text x="6.9649%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.01%)</title><rect x="6.7149%" y="453" width="0.0105%" height="15" fill="rgb(226,228,24)" fg:x="8957" fg:w="14"/><text x="6.9649%" y="463.50"></text></g><g><title>alloc::string::String::push_str (25 samples, 0.02%)</title><rect x="6.7134%" y="565" width="0.0187%" height="15" fill="rgb(222,84,9)" fg:x="8955" fg:w="25"/><text x="6.9634%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (25 samples, 0.02%)</title><rect x="6.7134%" y="549" width="0.0187%" height="15" fill="rgb(234,203,30)" fg:x="8955" fg:w="25"/><text x="6.9634%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (25 samples, 0.02%)</title><rect x="6.7134%" y="533" width="0.0187%" height="15" fill="rgb(238,109,14)" fg:x="8955" fg:w="25"/><text x="6.9634%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (25 samples, 0.02%)</title><rect x="6.7134%" y="517" width="0.0187%" height="15" fill="rgb(233,206,34)" fg:x="8955" fg:w="25"/><text x="6.9634%" y="527.50"></text></g><g><title>__GI___libc_free (14 samples, 0.01%)</title><rect x="6.7374%" y="469" width="0.0105%" height="15" fill="rgb(220,167,47)" fg:x="8987" fg:w="14"/><text x="6.9874%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (91 samples, 0.07%)</title><rect x="6.7134%" y="597" width="0.0682%" height="15" fill="rgb(238,105,10)" fg:x="8955" fg:w="91"/><text x="6.9634%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (91 samples, 0.07%)</title><rect x="6.7134%" y="581" width="0.0682%" height="15" fill="rgb(213,227,17)" fg:x="8955" fg:w="91"/><text x="6.9634%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (66 samples, 0.05%)</title><rect x="6.7321%" y="565" width="0.0495%" height="15" fill="rgb(217,132,38)" fg:x="8980" fg:w="66"/><text x="6.9821%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (66 samples, 0.05%)</title><rect x="6.7321%" y="549" width="0.0495%" height="15" fill="rgb(242,146,4)" fg:x="8980" fg:w="66"/><text x="6.9821%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (66 samples, 0.05%)</title><rect x="6.7321%" y="533" width="0.0495%" height="15" fill="rgb(212,61,9)" fg:x="8980" fg:w="66"/><text x="6.9821%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.05%)</title><rect x="6.7321%" y="517" width="0.0495%" height="15" fill="rgb(247,126,22)" fg:x="8980" fg:w="66"/><text x="6.9821%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (66 samples, 0.05%)</title><rect x="6.7321%" y="501" width="0.0495%" height="15" fill="rgb(220,196,2)" fg:x="8980" fg:w="66"/><text x="6.9821%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (66 samples, 0.05%)</title><rect x="6.7321%" y="485" width="0.0495%" height="15" fill="rgb(208,46,4)" fg:x="8980" fg:w="66"/><text x="6.9821%" y="495.50"></text></g><g><title>_int_free (39 samples, 0.03%)</title><rect x="6.7524%" y="469" width="0.0292%" height="15" fill="rgb(252,104,46)" fg:x="9007" fg:w="39"/><text x="7.0024%" y="479.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.01%)</title><rect x="6.7899%" y="357" width="0.0135%" height="15" fill="rgb(237,152,48)" fg:x="9057" fg:w="18"/><text x="7.0399%" y="367.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (38 samples, 0.03%)</title><rect x="6.7824%" y="581" width="0.0285%" height="15" fill="rgb(221,59,37)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (38 samples, 0.03%)</title><rect x="6.7824%" y="565" width="0.0285%" height="15" fill="rgb(209,202,51)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="575.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (38 samples, 0.03%)</title><rect x="6.7824%" y="549" width="0.0285%" height="15" fill="rgb(228,81,30)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (38 samples, 0.03%)</title><rect x="6.7824%" y="533" width="0.0285%" height="15" fill="rgb(227,42,39)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (38 samples, 0.03%)</title><rect x="6.7824%" y="517" width="0.0285%" height="15" fill="rgb(221,26,2)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (38 samples, 0.03%)</title><rect x="6.7824%" y="501" width="0.0285%" height="15" fill="rgb(254,61,31)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (38 samples, 0.03%)</title><rect x="6.7824%" y="485" width="0.0285%" height="15" fill="rgb(222,173,38)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (38 samples, 0.03%)</title><rect x="6.7824%" y="469" width="0.0285%" height="15" fill="rgb(218,50,12)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (38 samples, 0.03%)</title><rect x="6.7824%" y="453" width="0.0285%" height="15" fill="rgb(223,88,40)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.03%)</title><rect x="6.7824%" y="437" width="0.0285%" height="15" fill="rgb(237,54,19)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.03%)</title><rect x="6.7824%" y="421" width="0.0285%" height="15" fill="rgb(251,129,25)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="6.7824%" y="405" width="0.0285%" height="15" fill="rgb(238,97,19)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="6.7824%" y="389" width="0.0285%" height="15" fill="rgb(240,169,18)" fg:x="9047" fg:w="38"/><text x="7.0324%" y="399.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.02%)</title><rect x="6.7891%" y="373" width="0.0217%" height="15" fill="rgb(230,187,49)" fg:x="9056" fg:w="29"/><text x="7.0391%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (14 samples, 0.01%)</title><rect x="6.8288%" y="501" width="0.0105%" height="15" fill="rgb(209,44,26)" fg:x="9109" fg:w="14"/><text x="7.0788%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (14 samples, 0.01%)</title><rect x="6.8288%" y="485" width="0.0105%" height="15" fill="rgb(244,0,6)" fg:x="9109" fg:w="14"/><text x="7.0788%" y="495.50"></text></g><g><title>alloc::string::String::push_str (14 samples, 0.01%)</title><rect x="6.8288%" y="469" width="0.0105%" height="15" fill="rgb(248,18,21)" fg:x="9109" fg:w="14"/><text x="7.0788%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (14 samples, 0.01%)</title><rect x="6.8288%" y="453" width="0.0105%" height="15" fill="rgb(245,180,19)" fg:x="9109" fg:w="14"/><text x="7.0788%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.01%)</title><rect x="6.8288%" y="437" width="0.0105%" height="15" fill="rgb(252,118,36)" fg:x="9109" fg:w="14"/><text x="7.0788%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (14 samples, 0.01%)</title><rect x="6.8288%" y="421" width="0.0105%" height="15" fill="rgb(210,224,19)" fg:x="9109" fg:w="14"/><text x="7.0788%" y="431.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (20 samples, 0.01%)</title><rect x="6.8273%" y="533" width="0.0150%" height="15" fill="rgb(218,30,24)" fg:x="9107" fg:w="20"/><text x="7.0773%" y="543.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (18 samples, 0.01%)</title><rect x="6.8288%" y="517" width="0.0135%" height="15" fill="rgb(219,75,50)" fg:x="9109" fg:w="18"/><text x="7.0788%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (177 samples, 0.13%)</title><rect x="6.7104%" y="677" width="0.1327%" height="15" fill="rgb(234,72,50)" fg:x="8951" fg:w="177"/><text x="6.9604%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (177 samples, 0.13%)</title><rect x="6.7104%" y="661" width="0.1327%" height="15" fill="rgb(219,100,48)" fg:x="8951" fg:w="177"/><text x="6.9604%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (177 samples, 0.13%)</title><rect x="6.7104%" y="645" width="0.1327%" height="15" fill="rgb(253,5,41)" fg:x="8951" fg:w="177"/><text x="6.9604%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (174 samples, 0.13%)</title><rect x="6.7126%" y="629" width="0.1304%" height="15" fill="rgb(247,181,11)" fg:x="8954" fg:w="174"/><text x="6.9626%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (173 samples, 0.13%)</title><rect x="6.7134%" y="613" width="0.1297%" height="15" fill="rgb(222,223,25)" fg:x="8955" fg:w="173"/><text x="6.9634%" y="623.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (82 samples, 0.06%)</title><rect x="6.7816%" y="597" width="0.0615%" height="15" fill="rgb(214,198,28)" fg:x="9046" fg:w="82"/><text x="7.0316%" y="607.50"></text></g><g><title>alloc::fmt::format (43 samples, 0.03%)</title><rect x="6.8109%" y="581" width="0.0322%" height="15" fill="rgb(230,46,43)" fg:x="9085" fg:w="43"/><text x="7.0609%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (36 samples, 0.03%)</title><rect x="6.8161%" y="565" width="0.0270%" height="15" fill="rgb(233,65,53)" fg:x="9092" fg:w="36"/><text x="7.0661%" y="575.50"></text></g><g><title>core::fmt::write (29 samples, 0.02%)</title><rect x="6.8214%" y="549" width="0.0217%" height="15" fill="rgb(221,121,27)" fg:x="9099" fg:w="29"/><text x="7.0714%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (181 samples, 0.14%)</title><rect x="6.7104%" y="709" width="0.1357%" height="15" fill="rgb(247,70,47)" fg:x="8951" fg:w="181"/><text x="6.9604%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (181 samples, 0.14%)</title><rect x="6.7104%" y="693" width="0.1357%" height="15" fill="rgb(228,85,35)" fg:x="8951" fg:w="181"/><text x="6.9604%" y="703.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (21 samples, 0.02%)</title><rect x="6.8468%" y="693" width="0.0157%" height="15" fill="rgb(209,50,18)" fg:x="9133" fg:w="21"/><text x="7.0968%" y="703.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (23 samples, 0.02%)</title><rect x="6.8678%" y="677" width="0.0172%" height="15" fill="rgb(250,19,35)" fg:x="9161" fg:w="23"/><text x="7.1178%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (17 samples, 0.01%)</title><rect x="6.8956%" y="565" width="0.0127%" height="15" fill="rgb(253,107,29)" fg:x="9198" fg:w="17"/><text x="7.1456%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.01%)</title><rect x="6.8956%" y="549" width="0.0127%" height="15" fill="rgb(252,179,29)" fg:x="9198" fg:w="17"/><text x="7.1456%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (18 samples, 0.01%)</title><rect x="6.8956%" y="645" width="0.0135%" height="15" fill="rgb(238,194,6)" fg:x="9198" fg:w="18"/><text x="7.1456%" y="655.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (18 samples, 0.01%)</title><rect x="6.8956%" y="629" width="0.0135%" height="15" fill="rgb(238,164,29)" fg:x="9198" fg:w="18"/><text x="7.1456%" y="639.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (18 samples, 0.01%)</title><rect x="6.8956%" y="613" width="0.0135%" height="15" fill="rgb(224,25,9)" fg:x="9198" fg:w="18"/><text x="7.1456%" y="623.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (18 samples, 0.01%)</title><rect x="6.8956%" y="597" width="0.0135%" height="15" fill="rgb(244,153,23)" fg:x="9198" fg:w="18"/><text x="7.1456%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (18 samples, 0.01%)</title><rect x="6.8956%" y="581" width="0.0135%" height="15" fill="rgb(212,203,14)" fg:x="9198" fg:w="18"/><text x="7.1456%" y="591.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (36 samples, 0.03%)</title><rect x="6.8866%" y="661" width="0.0270%" height="15" fill="rgb(220,164,20)" fg:x="9186" fg:w="36"/><text x="7.1366%" y="671.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (17 samples, 0.01%)</title><rect x="6.9166%" y="645" width="0.0127%" height="15" fill="rgb(222,203,48)" fg:x="9226" fg:w="17"/><text x="7.1666%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15 samples, 0.01%)</title><rect x="6.9443%" y="613" width="0.0112%" height="15" fill="rgb(215,159,22)" fg:x="9263" fg:w="15"/><text x="7.1943%" y="623.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (15 samples, 0.01%)</title><rect x="6.9443%" y="597" width="0.0112%" height="15" fill="rgb(216,183,47)" fg:x="9263" fg:w="15"/><text x="7.1943%" y="607.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (14 samples, 0.01%)</title><rect x="6.9450%" y="581" width="0.0105%" height="15" fill="rgb(229,195,25)" fg:x="9264" fg:w="14"/><text x="7.1950%" y="591.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (14 samples, 0.01%)</title><rect x="6.9450%" y="565" width="0.0105%" height="15" fill="rgb(224,132,51)" fg:x="9264" fg:w="14"/><text x="7.1950%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (14 samples, 0.01%)</title><rect x="6.9450%" y="549" width="0.0105%" height="15" fill="rgb(240,63,7)" fg:x="9264" fg:w="14"/><text x="7.1950%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14 samples, 0.01%)</title><rect x="6.9450%" y="533" width="0.0105%" height="15" fill="rgb(249,182,41)" fg:x="9264" fg:w="14"/><text x="7.1950%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.01%)</title><rect x="6.9450%" y="517" width="0.0105%" height="15" fill="rgb(243,47,26)" fg:x="9264" fg:w="14"/><text x="7.1950%" y="527.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (29 samples, 0.02%)</title><rect x="6.9361%" y="629" width="0.0217%" height="15" fill="rgb(233,48,2)" fg:x="9252" fg:w="29"/><text x="7.1861%" y="639.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (14 samples, 0.01%)</title><rect x="6.9675%" y="581" width="0.0105%" height="15" fill="rgb(244,165,34)" fg:x="9294" fg:w="14"/><text x="7.2175%" y="591.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (14 samples, 0.01%)</title><rect x="6.9675%" y="565" width="0.0105%" height="15" fill="rgb(207,89,7)" fg:x="9294" fg:w="14"/><text x="7.2175%" y="575.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (14 samples, 0.01%)</title><rect x="6.9675%" y="549" width="0.0105%" height="15" fill="rgb(244,117,36)" fg:x="9294" fg:w="14"/><text x="7.2175%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (14 samples, 0.01%)</title><rect x="6.9675%" y="533" width="0.0105%" height="15" fill="rgb(226,144,34)" fg:x="9294" fg:w="14"/><text x="7.2175%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="6.9848%" y="437" width="0.0127%" height="15" fill="rgb(213,23,19)" fg:x="9317" fg:w="17"/><text x="7.2348%" y="447.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (17 samples, 0.01%)</title><rect x="6.9848%" y="421" width="0.0127%" height="15" fill="rgb(217,75,12)" fg:x="9317" fg:w="17"/><text x="7.2348%" y="431.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (17 samples, 0.01%)</title><rect x="6.9848%" y="405" width="0.0127%" height="15" fill="rgb(224,159,17)" fg:x="9317" fg:w="17"/><text x="7.2348%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (17 samples, 0.01%)</title><rect x="6.9848%" y="389" width="0.0127%" height="15" fill="rgb(217,118,1)" fg:x="9317" fg:w="17"/><text x="7.2348%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (17 samples, 0.01%)</title><rect x="6.9848%" y="373" width="0.0127%" height="15" fill="rgb(232,180,48)" fg:x="9317" fg:w="17"/><text x="7.2348%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 0.02%)</title><rect x="6.9840%" y="469" width="0.0240%" height="15" fill="rgb(230,27,33)" fg:x="9316" fg:w="32"/><text x="7.2340%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (31 samples, 0.02%)</title><rect x="6.9848%" y="453" width="0.0232%" height="15" fill="rgb(205,31,21)" fg:x="9317" fg:w="31"/><text x="7.2348%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (14 samples, 0.01%)</title><rect x="6.9975%" y="437" width="0.0105%" height="15" fill="rgb(253,59,4)" fg:x="9334" fg:w="14"/><text x="7.2475%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (14 samples, 0.01%)</title><rect x="6.9975%" y="421" width="0.0105%" height="15" fill="rgb(224,201,9)" fg:x="9334" fg:w="14"/><text x="7.2475%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (14 samples, 0.01%)</title><rect x="6.9975%" y="405" width="0.0105%" height="15" fill="rgb(229,206,30)" fg:x="9334" fg:w="14"/><text x="7.2475%" y="415.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (14 samples, 0.01%)</title><rect x="6.9975%" y="389" width="0.0105%" height="15" fill="rgb(212,67,47)" fg:x="9334" fg:w="14"/><text x="7.2475%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14 samples, 0.01%)</title><rect x="6.9975%" y="373" width="0.0105%" height="15" fill="rgb(211,96,50)" fg:x="9334" fg:w="14"/><text x="7.2475%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (39 samples, 0.03%)</title><rect x="6.9840%" y="581" width="0.0292%" height="15" fill="rgb(252,114,18)" fg:x="9316" fg:w="39"/><text x="7.2340%" y="591.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (39 samples, 0.03%)</title><rect x="6.9840%" y="565" width="0.0292%" height="15" fill="rgb(223,58,37)" fg:x="9316" fg:w="39"/><text x="7.2340%" y="575.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (39 samples, 0.03%)</title><rect x="6.9840%" y="549" width="0.0292%" height="15" fill="rgb(237,70,4)" fg:x="9316" fg:w="39"/><text x="7.2340%" y="559.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (39 samples, 0.03%)</title><rect x="6.9840%" y="533" width="0.0292%" height="15" fill="rgb(244,85,46)" fg:x="9316" fg:w="39"/><text x="7.2340%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (39 samples, 0.03%)</title><rect x="6.9840%" y="517" width="0.0292%" height="15" fill="rgb(223,39,52)" fg:x="9316" fg:w="39"/><text x="7.2340%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (39 samples, 0.03%)</title><rect x="6.9840%" y="501" width="0.0292%" height="15" fill="rgb(218,200,14)" fg:x="9316" fg:w="39"/><text x="7.2340%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39 samples, 0.03%)</title><rect x="6.9840%" y="485" width="0.0292%" height="15" fill="rgb(208,171,16)" fg:x="9316" fg:w="39"/><text x="7.2340%" y="495.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (74 samples, 0.06%)</title><rect x="6.9675%" y="597" width="0.0555%" height="15" fill="rgb(234,200,18)" fg:x="9294" fg:w="74"/><text x="7.2175%" y="607.50"></text></g><g><title>hashbrown::map::make_insert_hash (18 samples, 0.01%)</title><rect x="7.0313%" y="341" width="0.0135%" height="15" fill="rgb(228,45,11)" fg:x="9379" fg:w="18"/><text x="7.2813%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.01%)</title><rect x="7.0313%" y="325" width="0.0135%" height="15" fill="rgb(237,182,11)" fg:x="9379" fg:w="18"/><text x="7.2813%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (27 samples, 0.02%)</title><rect x="7.0313%" y="501" width="0.0202%" height="15" fill="rgb(241,175,49)" fg:x="9379" fg:w="27"/><text x="7.2813%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 0.02%)</title><rect x="7.0313%" y="485" width="0.0202%" height="15" fill="rgb(247,38,35)" fg:x="9379" fg:w="27"/><text x="7.2813%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (27 samples, 0.02%)</title><rect x="7.0313%" y="469" width="0.0202%" height="15" fill="rgb(228,39,49)" fg:x="9379" fg:w="27"/><text x="7.2813%" y="479.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (27 samples, 0.02%)</title><rect x="7.0313%" y="453" width="0.0202%" height="15" fill="rgb(226,101,26)" fg:x="9379" fg:w="27"/><text x="7.2813%" y="463.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (27 samples, 0.02%)</title><rect x="7.0313%" y="437" width="0.0202%" height="15" fill="rgb(206,141,19)" fg:x="9379" fg:w="27"/><text x="7.2813%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (27 samples, 0.02%)</title><rect x="7.0313%" y="421" width="0.0202%" height="15" fill="rgb(211,200,13)" fg:x="9379" fg:w="27"/><text x="7.2813%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (27 samples, 0.02%)</title><rect x="7.0313%" y="405" width="0.0202%" height="15" fill="rgb(241,121,6)" fg:x="9379" fg:w="27"/><text x="7.2813%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (27 samples, 0.02%)</title><rect x="7.0313%" y="389" width="0.0202%" height="15" fill="rgb(234,221,29)" fg:x="9379" fg:w="27"/><text x="7.2813%" y="399.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (27 samples, 0.02%)</title><rect x="7.0313%" y="373" width="0.0202%" height="15" fill="rgb(229,136,5)" fg:x="9379" fg:w="27"/><text x="7.2813%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (27 samples, 0.02%)</title><rect x="7.0313%" y="357" width="0.0202%" height="15" fill="rgb(238,36,11)" fg:x="9379" fg:w="27"/><text x="7.2813%" y="367.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (29 samples, 0.02%)</title><rect x="7.0313%" y="565" width="0.0217%" height="15" fill="rgb(251,55,41)" fg:x="9379" fg:w="29"/><text x="7.2813%" y="575.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (29 samples, 0.02%)</title><rect x="7.0313%" y="549" width="0.0217%" height="15" fill="rgb(242,34,40)" fg:x="9379" fg:w="29"/><text x="7.2813%" y="559.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (29 samples, 0.02%)</title><rect x="7.0313%" y="533" width="0.0217%" height="15" fill="rgb(215,42,17)" fg:x="9379" fg:w="29"/><text x="7.2813%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (29 samples, 0.02%)</title><rect x="7.0313%" y="517" width="0.0217%" height="15" fill="rgb(207,44,46)" fg:x="9379" fg:w="29"/><text x="7.2813%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (17 samples, 0.01%)</title><rect x="7.0560%" y="565" width="0.0127%" height="15" fill="rgb(211,206,28)" fg:x="9412" fg:w="17"/><text x="7.3060%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 0.01%)</title><rect x="7.0560%" y="549" width="0.0127%" height="15" fill="rgb(237,167,16)" fg:x="9412" fg:w="17"/><text x="7.3060%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (17 samples, 0.01%)</title><rect x="7.0560%" y="533" width="0.0127%" height="15" fill="rgb(233,66,6)" fg:x="9412" fg:w="17"/><text x="7.3060%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.01%)</title><rect x="7.0725%" y="309" width="0.0105%" height="15" fill="rgb(246,123,29)" fg:x="9434" fg:w="14"/><text x="7.3225%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14 samples, 0.01%)</title><rect x="7.0725%" y="293" width="0.0105%" height="15" fill="rgb(209,62,40)" fg:x="9434" fg:w="14"/><text x="7.3225%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14 samples, 0.01%)</title><rect x="7.0725%" y="277" width="0.0105%" height="15" fill="rgb(218,4,25)" fg:x="9434" fg:w="14"/><text x="7.3225%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (21 samples, 0.02%)</title><rect x="7.0717%" y="341" width="0.0157%" height="15" fill="rgb(253,91,49)" fg:x="9433" fg:w="21"/><text x="7.3217%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (21 samples, 0.02%)</title><rect x="7.0717%" y="325" width="0.0157%" height="15" fill="rgb(228,155,29)" fg:x="9433" fg:w="21"/><text x="7.3217%" y="335.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="7.0687%" y="421" width="0.0262%" height="15" fill="rgb(243,57,37)" fg:x="9429" fg:w="35"/><text x="7.3187%" y="431.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (31 samples, 0.02%)</title><rect x="7.0717%" y="405" width="0.0232%" height="15" fill="rgb(244,167,17)" fg:x="9433" fg:w="31"/><text x="7.3217%" y="415.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (31 samples, 0.02%)</title><rect x="7.0717%" y="389" width="0.0232%" height="15" fill="rgb(207,181,38)" fg:x="9433" fg:w="31"/><text x="7.3217%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (31 samples, 0.02%)</title><rect x="7.0717%" y="373" width="0.0232%" height="15" fill="rgb(211,8,23)" fg:x="9433" fg:w="31"/><text x="7.3217%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (31 samples, 0.02%)</title><rect x="7.0717%" y="357" width="0.0232%" height="15" fill="rgb(235,11,44)" fg:x="9433" fg:w="31"/><text x="7.3217%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (17 samples, 0.01%)</title><rect x="7.1070%" y="277" width="0.0127%" height="15" fill="rgb(248,18,52)" fg:x="9480" fg:w="17"/><text x="7.3570%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (18 samples, 0.01%)</title><rect x="7.1070%" y="325" width="0.0135%" height="15" fill="rgb(208,4,7)" fg:x="9480" fg:w="18"/><text x="7.3570%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.01%)</title><rect x="7.1070%" y="309" width="0.0135%" height="15" fill="rgb(240,17,39)" fg:x="9480" fg:w="18"/><text x="7.3570%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (18 samples, 0.01%)</title><rect x="7.1070%" y="293" width="0.0135%" height="15" fill="rgb(207,170,3)" fg:x="9480" fg:w="18"/><text x="7.3570%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (78 samples, 0.06%)</title><rect x="7.0687%" y="453" width="0.0585%" height="15" fill="rgb(236,100,52)" fg:x="9429" fg:w="78"/><text x="7.3187%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (78 samples, 0.06%)</title><rect x="7.0687%" y="437" width="0.0585%" height="15" fill="rgb(246,78,51)" fg:x="9429" fg:w="78"/><text x="7.3187%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (43 samples, 0.03%)</title><rect x="7.0950%" y="421" width="0.0322%" height="15" fill="rgb(211,17,15)" fg:x="9464" fg:w="43"/><text x="7.3450%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (43 samples, 0.03%)</title><rect x="7.0950%" y="405" width="0.0322%" height="15" fill="rgb(209,59,46)" fg:x="9464" fg:w="43"/><text x="7.3450%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (43 samples, 0.03%)</title><rect x="7.0950%" y="389" width="0.0322%" height="15" fill="rgb(210,92,25)" fg:x="9464" fg:w="43"/><text x="7.3450%" y="399.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (43 samples, 0.03%)</title><rect x="7.0950%" y="373" width="0.0322%" height="15" fill="rgb(238,174,52)" fg:x="9464" fg:w="43"/><text x="7.3450%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (43 samples, 0.03%)</title><rect x="7.0950%" y="357" width="0.0322%" height="15" fill="rgb(230,73,7)" fg:x="9464" fg:w="43"/><text x="7.3450%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (28 samples, 0.02%)</title><rect x="7.1062%" y="341" width="0.0210%" height="15" fill="rgb(243,124,40)" fg:x="9479" fg:w="28"/><text x="7.3562%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (91 samples, 0.07%)</title><rect x="7.0687%" y="485" width="0.0682%" height="15" fill="rgb(244,170,11)" fg:x="9429" fg:w="91"/><text x="7.3187%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (91 samples, 0.07%)</title><rect x="7.0687%" y="469" width="0.0682%" height="15" fill="rgb(207,114,54)" fg:x="9429" fg:w="91"/><text x="7.3187%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (97 samples, 0.07%)</title><rect x="7.0687%" y="565" width="0.0727%" height="15" fill="rgb(205,42,20)" fg:x="9429" fg:w="97"/><text x="7.3187%" y="575.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (97 samples, 0.07%)</title><rect x="7.0687%" y="549" width="0.0727%" height="15" fill="rgb(230,30,28)" fg:x="9429" fg:w="97"/><text x="7.3187%" y="559.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (97 samples, 0.07%)</title><rect x="7.0687%" y="533" width="0.0727%" height="15" fill="rgb(205,73,54)" fg:x="9429" fg:w="97"/><text x="7.3187%" y="543.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (97 samples, 0.07%)</title><rect x="7.0687%" y="517" width="0.0727%" height="15" fill="rgb(254,227,23)" fg:x="9429" fg:w="97"/><text x="7.3187%" y="527.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (97 samples, 0.07%)</title><rect x="7.0687%" y="501" width="0.0727%" height="15" fill="rgb(228,202,34)" fg:x="9429" fg:w="97"/><text x="7.3187%" y="511.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (174 samples, 0.13%)</title><rect x="7.0298%" y="581" width="0.1304%" height="15" fill="rgb(222,225,37)" fg:x="9377" fg:w="174"/><text x="7.2798%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (14 samples, 0.01%)</title><rect x="7.1617%" y="469" width="0.0105%" height="15" fill="rgb(221,14,54)" fg:x="9553" fg:w="14"/><text x="7.4117%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (14 samples, 0.01%)</title><rect x="7.1617%" y="453" width="0.0105%" height="15" fill="rgb(254,102,2)" fg:x="9553" fg:w="14"/><text x="7.4117%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (37 samples, 0.03%)</title><rect x="7.1617%" y="549" width="0.0277%" height="15" fill="rgb(232,104,17)" fg:x="9553" fg:w="37"/><text x="7.4117%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (37 samples, 0.03%)</title><rect x="7.1617%" y="533" width="0.0277%" height="15" fill="rgb(250,220,14)" fg:x="9553" fg:w="37"/><text x="7.4117%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (37 samples, 0.03%)</title><rect x="7.1617%" y="517" width="0.0277%" height="15" fill="rgb(241,158,9)" fg:x="9553" fg:w="37"/><text x="7.4117%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (37 samples, 0.03%)</title><rect x="7.1617%" y="501" width="0.0277%" height="15" fill="rgb(246,9,43)" fg:x="9553" fg:w="37"/><text x="7.4117%" y="511.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (37 samples, 0.03%)</title><rect x="7.1617%" y="485" width="0.0277%" height="15" fill="rgb(206,73,33)" fg:x="9553" fg:w="37"/><text x="7.4117%" y="495.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (23 samples, 0.02%)</title><rect x="7.1722%" y="469" width="0.0172%" height="15" fill="rgb(222,79,8)" fg:x="9567" fg:w="23"/><text x="7.4222%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (38 samples, 0.03%)</title><rect x="7.1617%" y="581" width="0.0285%" height="15" fill="rgb(234,8,54)" fg:x="9553" fg:w="38"/><text x="7.4117%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (38 samples, 0.03%)</title><rect x="7.1617%" y="565" width="0.0285%" height="15" fill="rgb(209,134,38)" fg:x="9553" fg:w="38"/><text x="7.4117%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (18 samples, 0.01%)</title><rect x="7.1909%" y="485" width="0.0135%" height="15" fill="rgb(230,127,29)" fg:x="9592" fg:w="18"/><text x="7.4409%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.01%)</title><rect x="7.1909%" y="469" width="0.0135%" height="15" fill="rgb(242,44,41)" fg:x="9592" fg:w="18"/><text x="7.4409%" y="479.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (18 samples, 0.01%)</title><rect x="7.1909%" y="453" width="0.0135%" height="15" fill="rgb(222,56,43)" fg:x="9592" fg:w="18"/><text x="7.4409%" y="463.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (18 samples, 0.01%)</title><rect x="7.1909%" y="437" width="0.0135%" height="15" fill="rgb(238,39,47)" fg:x="9592" fg:w="18"/><text x="7.4409%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (18 samples, 0.01%)</title><rect x="7.1909%" y="421" width="0.0135%" height="15" fill="rgb(226,79,43)" fg:x="9592" fg:w="18"/><text x="7.4409%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (18 samples, 0.01%)</title><rect x="7.1909%" y="405" width="0.0135%" height="15" fill="rgb(242,105,53)" fg:x="9592" fg:w="18"/><text x="7.4409%" y="415.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (18 samples, 0.01%)</title><rect x="7.1909%" y="389" width="0.0135%" height="15" fill="rgb(251,132,46)" fg:x="9592" fg:w="18"/><text x="7.4409%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (18 samples, 0.01%)</title><rect x="7.1909%" y="373" width="0.0135%" height="15" fill="rgb(231,77,14)" fg:x="9592" fg:w="18"/><text x="7.4409%" y="383.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (18 samples, 0.01%)</title><rect x="7.1909%" y="357" width="0.0135%" height="15" fill="rgb(240,135,9)" fg:x="9592" fg:w="18"/><text x="7.4409%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18 samples, 0.01%)</title><rect x="7.1909%" y="341" width="0.0135%" height="15" fill="rgb(248,109,14)" fg:x="9592" fg:w="18"/><text x="7.4409%" y="351.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="7.1909%" y="549" width="0.0157%" height="15" fill="rgb(227,146,52)" fg:x="9592" fg:w="21"/><text x="7.4409%" y="559.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="7.1909%" y="533" width="0.0157%" height="15" fill="rgb(232,54,3)" fg:x="9592" fg:w="21"/><text x="7.4409%" y="543.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="7.1909%" y="517" width="0.0157%" height="15" fill="rgb(229,201,43)" fg:x="9592" fg:w="21"/><text x="7.4409%" y="527.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="7.1909%" y="501" width="0.0157%" height="15" fill="rgb(252,161,33)" fg:x="9592" fg:w="21"/><text x="7.4409%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (34 samples, 0.03%)</title><rect x="7.2149%" y="437" width="0.0255%" height="15" fill="rgb(226,146,40)" fg:x="9624" fg:w="34"/><text x="7.4649%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (32 samples, 0.02%)</title><rect x="7.2164%" y="421" width="0.0240%" height="15" fill="rgb(219,47,25)" fg:x="9626" fg:w="32"/><text x="7.4664%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (20 samples, 0.01%)</title><rect x="7.2254%" y="405" width="0.0150%" height="15" fill="rgb(250,135,13)" fg:x="9638" fg:w="20"/><text x="7.4754%" y="415.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (20 samples, 0.01%)</title><rect x="7.2254%" y="389" width="0.0150%" height="15" fill="rgb(219,229,18)" fg:x="9638" fg:w="20"/><text x="7.4754%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (20 samples, 0.01%)</title><rect x="7.2254%" y="373" width="0.0150%" height="15" fill="rgb(217,152,27)" fg:x="9638" fg:w="20"/><text x="7.4754%" y="383.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (20 samples, 0.01%)</title><rect x="7.2254%" y="357" width="0.0150%" height="15" fill="rgb(225,71,47)" fg:x="9638" fg:w="20"/><text x="7.4754%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 0.01%)</title><rect x="7.2254%" y="341" width="0.0150%" height="15" fill="rgb(220,139,14)" fg:x="9638" fg:w="20"/><text x="7.4754%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (40 samples, 0.03%)</title><rect x="7.2149%" y="469" width="0.0300%" height="15" fill="rgb(247,54,32)" fg:x="9624" fg:w="40"/><text x="7.4649%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (40 samples, 0.03%)</title><rect x="7.2149%" y="453" width="0.0300%" height="15" fill="rgb(252,131,39)" fg:x="9624" fg:w="40"/><text x="7.4649%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (42 samples, 0.03%)</title><rect x="7.2142%" y="549" width="0.0315%" height="15" fill="rgb(210,108,39)" fg:x="9623" fg:w="42"/><text x="7.4642%" y="559.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (42 samples, 0.03%)</title><rect x="7.2142%" y="533" width="0.0315%" height="15" fill="rgb(205,23,29)" fg:x="9623" fg:w="42"/><text x="7.4642%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (41 samples, 0.03%)</title><rect x="7.2149%" y="517" width="0.0307%" height="15" fill="rgb(246,139,46)" fg:x="9624" fg:w="41"/><text x="7.4649%" y="527.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (41 samples, 0.03%)</title><rect x="7.2149%" y="501" width="0.0307%" height="15" fill="rgb(250,81,26)" fg:x="9624" fg:w="41"/><text x="7.4649%" y="511.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (41 samples, 0.03%)</title><rect x="7.2149%" y="485" width="0.0307%" height="15" fill="rgb(214,104,7)" fg:x="9624" fg:w="41"/><text x="7.4649%" y="495.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (82 samples, 0.06%)</title><rect x="7.1902%" y="565" width="0.0615%" height="15" fill="rgb(233,189,8)" fg:x="9591" fg:w="82"/><text x="7.4402%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (21 samples, 0.02%)</title><rect x="7.2517%" y="533" width="0.0157%" height="15" fill="rgb(228,141,17)" fg:x="9673" fg:w="21"/><text x="7.5017%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (21 samples, 0.02%)</title><rect x="7.2517%" y="517" width="0.0157%" height="15" fill="rgb(247,157,1)" fg:x="9673" fg:w="21"/><text x="7.5017%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.02%)</title><rect x="7.2517%" y="501" width="0.0157%" height="15" fill="rgb(249,225,5)" fg:x="9673" fg:w="21"/><text x="7.5017%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 0.02%)</title><rect x="7.2517%" y="485" width="0.0157%" height="15" fill="rgb(242,55,13)" fg:x="9673" fg:w="21"/><text x="7.5017%" y="495.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (21 samples, 0.02%)</title><rect x="7.2517%" y="469" width="0.0157%" height="15" fill="rgb(230,49,50)" fg:x="9673" fg:w="21"/><text x="7.5017%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 0.02%)</title><rect x="7.2517%" y="565" width="0.0165%" height="15" fill="rgb(241,111,38)" fg:x="9673" fg:w="22"/><text x="7.5017%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (22 samples, 0.02%)</title><rect x="7.2517%" y="549" width="0.0165%" height="15" fill="rgb(252,155,4)" fg:x="9673" fg:w="22"/><text x="7.5017%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (25 samples, 0.02%)</title><rect x="7.2704%" y="469" width="0.0187%" height="15" fill="rgb(212,69,32)" fg:x="9698" fg:w="25"/><text x="7.5204%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 0.02%)</title><rect x="7.2704%" y="453" width="0.0187%" height="15" fill="rgb(243,107,47)" fg:x="9698" fg:w="25"/><text x="7.5204%" y="463.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (25 samples, 0.02%)</title><rect x="7.2704%" y="437" width="0.0187%" height="15" fill="rgb(247,130,12)" fg:x="9698" fg:w="25"/><text x="7.5204%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (25 samples, 0.02%)</title><rect x="7.2704%" y="421" width="0.0187%" height="15" fill="rgb(233,74,16)" fg:x="9698" fg:w="25"/><text x="7.5204%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (25 samples, 0.02%)</title><rect x="7.2704%" y="405" width="0.0187%" height="15" fill="rgb(208,58,18)" fg:x="9698" fg:w="25"/><text x="7.5204%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (25 samples, 0.02%)</title><rect x="7.2704%" y="389" width="0.0187%" height="15" fill="rgb(242,225,1)" fg:x="9698" fg:w="25"/><text x="7.5204%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (25 samples, 0.02%)</title><rect x="7.2704%" y="373" width="0.0187%" height="15" fill="rgb(249,39,40)" fg:x="9698" fg:w="25"/><text x="7.5204%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (25 samples, 0.02%)</title><rect x="7.2704%" y="357" width="0.0187%" height="15" fill="rgb(207,72,44)" fg:x="9698" fg:w="25"/><text x="7.5204%" y="367.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (25 samples, 0.02%)</title><rect x="7.2704%" y="341" width="0.0187%" height="15" fill="rgb(215,193,12)" fg:x="9698" fg:w="25"/><text x="7.5204%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (25 samples, 0.02%)</title><rect x="7.2704%" y="325" width="0.0187%" height="15" fill="rgb(248,41,39)" fg:x="9698" fg:w="25"/><text x="7.5204%" y="335.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (29 samples, 0.02%)</title><rect x="7.2704%" y="517" width="0.0217%" height="15" fill="rgb(253,85,4)" fg:x="9698" fg:w="29"/><text x="7.5204%" y="527.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (29 samples, 0.02%)</title><rect x="7.2704%" y="501" width="0.0217%" height="15" fill="rgb(243,70,31)" fg:x="9698" fg:w="29"/><text x="7.5204%" y="511.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (29 samples, 0.02%)</title><rect x="7.2704%" y="485" width="0.0217%" height="15" fill="rgb(253,195,26)" fg:x="9698" fg:w="29"/><text x="7.5204%" y="495.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30 samples, 0.02%)</title><rect x="7.2704%" y="533" width="0.0225%" height="15" fill="rgb(243,42,11)" fg:x="9698" fg:w="30"/><text x="7.5204%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="7.3026%" y="389" width="0.0157%" height="15" fill="rgb(239,66,17)" fg:x="9741" fg:w="21"/><text x="7.5526%" y="399.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (19 samples, 0.01%)</title><rect x="7.3041%" y="373" width="0.0142%" height="15" fill="rgb(217,132,21)" fg:x="9743" fg:w="19"/><text x="7.5541%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (19 samples, 0.01%)</title><rect x="7.3041%" y="357" width="0.0142%" height="15" fill="rgb(252,202,21)" fg:x="9743" fg:w="19"/><text x="7.5541%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (19 samples, 0.01%)</title><rect x="7.3041%" y="341" width="0.0142%" height="15" fill="rgb(233,98,36)" fg:x="9743" fg:w="19"/><text x="7.5541%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (19 samples, 0.01%)</title><rect x="7.3041%" y="325" width="0.0142%" height="15" fill="rgb(216,153,54)" fg:x="9743" fg:w="19"/><text x="7.5541%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (62 samples, 0.05%)</title><rect x="7.2996%" y="421" width="0.0465%" height="15" fill="rgb(250,99,7)" fg:x="9737" fg:w="62"/><text x="7.5496%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (58 samples, 0.04%)</title><rect x="7.3026%" y="405" width="0.0435%" height="15" fill="rgb(207,56,50)" fg:x="9741" fg:w="58"/><text x="7.5526%" y="415.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (37 samples, 0.03%)</title><rect x="7.3184%" y="389" width="0.0277%" height="15" fill="rgb(244,61,34)" fg:x="9762" fg:w="37"/><text x="7.5684%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (37 samples, 0.03%)</title><rect x="7.3184%" y="373" width="0.0277%" height="15" fill="rgb(241,50,38)" fg:x="9762" fg:w="37"/><text x="7.5684%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (37 samples, 0.03%)</title><rect x="7.3184%" y="357" width="0.0277%" height="15" fill="rgb(212,166,30)" fg:x="9762" fg:w="37"/><text x="7.5684%" y="367.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (37 samples, 0.03%)</title><rect x="7.3184%" y="341" width="0.0277%" height="15" fill="rgb(249,127,32)" fg:x="9762" fg:w="37"/><text x="7.5684%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (37 samples, 0.03%)</title><rect x="7.3184%" y="325" width="0.0277%" height="15" fill="rgb(209,103,0)" fg:x="9762" fg:w="37"/><text x="7.5684%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (20 samples, 0.01%)</title><rect x="7.3311%" y="309" width="0.0150%" height="15" fill="rgb(238,209,51)" fg:x="9779" fg:w="20"/><text x="7.5811%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (73 samples, 0.05%)</title><rect x="7.2996%" y="453" width="0.0547%" height="15" fill="rgb(237,56,23)" fg:x="9737" fg:w="73"/><text x="7.5496%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (73 samples, 0.05%)</title><rect x="7.2996%" y="437" width="0.0547%" height="15" fill="rgb(215,153,46)" fg:x="9737" fg:w="73"/><text x="7.5496%" y="447.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (76 samples, 0.06%)</title><rect x="7.2996%" y="501" width="0.0570%" height="15" fill="rgb(224,49,31)" fg:x="9737" fg:w="76"/><text x="7.5496%" y="511.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (76 samples, 0.06%)</title><rect x="7.2996%" y="485" width="0.0570%" height="15" fill="rgb(250,18,42)" fg:x="9737" fg:w="76"/><text x="7.5496%" y="495.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (76 samples, 0.06%)</title><rect x="7.2996%" y="469" width="0.0570%" height="15" fill="rgb(215,176,39)" fg:x="9737" fg:w="76"/><text x="7.5496%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (78 samples, 0.06%)</title><rect x="7.2989%" y="533" width="0.0585%" height="15" fill="rgb(223,77,29)" fg:x="9736" fg:w="78"/><text x="7.5489%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (78 samples, 0.06%)</title><rect x="7.2989%" y="517" width="0.0585%" height="15" fill="rgb(234,94,52)" fg:x="9736" fg:w="78"/><text x="7.5489%" y="527.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (134 samples, 0.10%)</title><rect x="7.2697%" y="549" width="0.1005%" height="15" fill="rgb(220,154,50)" fg:x="9697" fg:w="134"/><text x="7.5197%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (31 samples, 0.02%)</title><rect x="7.3716%" y="517" width="0.0232%" height="15" fill="rgb(212,11,10)" fg:x="9833" fg:w="31"/><text x="7.6216%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (31 samples, 0.02%)</title><rect x="7.3716%" y="501" width="0.0232%" height="15" fill="rgb(205,166,19)" fg:x="9833" fg:w="31"/><text x="7.6216%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 0.02%)</title><rect x="7.3716%" y="485" width="0.0232%" height="15" fill="rgb(244,198,16)" fg:x="9833" fg:w="31"/><text x="7.6216%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (30 samples, 0.02%)</title><rect x="7.3724%" y="469" width="0.0225%" height="15" fill="rgb(219,69,12)" fg:x="9834" fg:w="30"/><text x="7.6224%" y="479.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (30 samples, 0.02%)</title><rect x="7.3724%" y="453" width="0.0225%" height="15" fill="rgb(245,30,7)" fg:x="9834" fg:w="30"/><text x="7.6224%" y="463.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (19 samples, 0.01%)</title><rect x="7.3806%" y="437" width="0.0142%" height="15" fill="rgb(218,221,48)" fg:x="9845" fg:w="19"/><text x="7.6306%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (32 samples, 0.02%)</title><rect x="7.3716%" y="549" width="0.0240%" height="15" fill="rgb(216,66,15)" fg:x="9833" fg:w="32"/><text x="7.6216%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (32 samples, 0.02%)</title><rect x="7.3716%" y="533" width="0.0240%" height="15" fill="rgb(226,122,50)" fg:x="9833" fg:w="32"/><text x="7.6216%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.02%)</title><rect x="7.4039%" y="405" width="0.0165%" height="15" fill="rgb(239,156,16)" fg:x="9876" fg:w="22"/><text x="7.6539%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (22 samples, 0.02%)</title><rect x="7.4039%" y="389" width="0.0165%" height="15" fill="rgb(224,27,38)" fg:x="9876" fg:w="22"/><text x="7.6539%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (31 samples, 0.02%)</title><rect x="7.4039%" y="517" width="0.0232%" height="15" fill="rgb(224,39,27)" fg:x="9876" fg:w="31"/><text x="7.6539%" y="527.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (31 samples, 0.02%)</title><rect x="7.4039%" y="501" width="0.0232%" height="15" fill="rgb(215,92,29)" fg:x="9876" fg:w="31"/><text x="7.6539%" y="511.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (31 samples, 0.02%)</title><rect x="7.4039%" y="485" width="0.0232%" height="15" fill="rgb(207,159,16)" fg:x="9876" fg:w="31"/><text x="7.6539%" y="495.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (31 samples, 0.02%)</title><rect x="7.4039%" y="469" width="0.0232%" height="15" fill="rgb(238,163,47)" fg:x="9876" fg:w="31"/><text x="7.6539%" y="479.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (31 samples, 0.02%)</title><rect x="7.4039%" y="453" width="0.0232%" height="15" fill="rgb(219,91,49)" fg:x="9876" fg:w="31"/><text x="7.6539%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (31 samples, 0.02%)</title><rect x="7.4039%" y="437" width="0.0232%" height="15" fill="rgb(227,167,31)" fg:x="9876" fg:w="31"/><text x="7.6539%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 0.02%)</title><rect x="7.4039%" y="421" width="0.0232%" height="15" fill="rgb(234,80,54)" fg:x="9876" fg:w="31"/><text x="7.6539%" y="431.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (51 samples, 0.04%)</title><rect x="7.3956%" y="533" width="0.0382%" height="15" fill="rgb(212,114,2)" fg:x="9865" fg:w="51"/><text x="7.6456%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (17 samples, 0.01%)</title><rect x="7.4338%" y="533" width="0.0127%" height="15" fill="rgb(234,50,24)" fg:x="9916" fg:w="17"/><text x="7.6838%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (17 samples, 0.01%)</title><rect x="7.4338%" y="517" width="0.0127%" height="15" fill="rgb(221,68,8)" fg:x="9916" fg:w="17"/><text x="7.6838%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (17 samples, 0.01%)</title><rect x="7.4338%" y="501" width="0.0127%" height="15" fill="rgb(254,180,31)" fg:x="9916" fg:w="17"/><text x="7.6838%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (17 samples, 0.01%)</title><rect x="7.4338%" y="485" width="0.0127%" height="15" fill="rgb(247,130,50)" fg:x="9916" fg:w="17"/><text x="7.6838%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.01%)</title><rect x="7.4338%" y="469" width="0.0127%" height="15" fill="rgb(211,109,4)" fg:x="9916" fg:w="17"/><text x="7.6838%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (17 samples, 0.01%)</title><rect x="7.4338%" y="453" width="0.0127%" height="15" fill="rgb(238,50,21)" fg:x="9916" fg:w="17"/><text x="7.6838%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (17 samples, 0.01%)</title><rect x="7.4338%" y="437" width="0.0127%" height="15" fill="rgb(225,57,45)" fg:x="9916" fg:w="17"/><text x="7.6838%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (17 samples, 0.01%)</title><rect x="7.4518%" y="501" width="0.0127%" height="15" fill="rgb(209,196,50)" fg:x="9940" fg:w="17"/><text x="7.7018%" y="511.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (17 samples, 0.01%)</title><rect x="7.4518%" y="485" width="0.0127%" height="15" fill="rgb(242,140,13)" fg:x="9940" fg:w="17"/><text x="7.7018%" y="495.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (16 samples, 0.01%)</title><rect x="7.4526%" y="469" width="0.0120%" height="15" fill="rgb(217,111,7)" fg:x="9941" fg:w="16"/><text x="7.7026%" y="479.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (16 samples, 0.01%)</title><rect x="7.4526%" y="453" width="0.0120%" height="15" fill="rgb(253,193,51)" fg:x="9941" fg:w="16"/><text x="7.7026%" y="463.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (16 samples, 0.01%)</title><rect x="7.4526%" y="437" width="0.0120%" height="15" fill="rgb(252,70,29)" fg:x="9941" fg:w="16"/><text x="7.7026%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (16 samples, 0.01%)</title><rect x="7.4526%" y="421" width="0.0120%" height="15" fill="rgb(232,127,12)" fg:x="9941" fg:w="16"/><text x="7.7026%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.01%)</title><rect x="7.4526%" y="405" width="0.0120%" height="15" fill="rgb(211,180,21)" fg:x="9941" fg:w="16"/><text x="7.7026%" y="415.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (26 samples, 0.02%)</title><rect x="7.4466%" y="517" width="0.0195%" height="15" fill="rgb(229,72,13)" fg:x="9933" fg:w="26"/><text x="7.6966%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (17 samples, 0.01%)</title><rect x="7.4668%" y="517" width="0.0127%" height="15" fill="rgb(240,211,49)" fg:x="9960" fg:w="17"/><text x="7.7168%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (17 samples, 0.01%)</title><rect x="7.4668%" y="501" width="0.0127%" height="15" fill="rgb(219,149,40)" fg:x="9960" fg:w="17"/><text x="7.7168%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (16 samples, 0.01%)</title><rect x="7.4676%" y="485" width="0.0120%" height="15" fill="rgb(210,127,46)" fg:x="9961" fg:w="16"/><text x="7.7176%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (16 samples, 0.01%)</title><rect x="7.4676%" y="469" width="0.0120%" height="15" fill="rgb(220,106,7)" fg:x="9961" fg:w="16"/><text x="7.7176%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.01%)</title><rect x="7.4676%" y="453" width="0.0120%" height="15" fill="rgb(249,31,22)" fg:x="9961" fg:w="16"/><text x="7.7176%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (16 samples, 0.01%)</title><rect x="7.4676%" y="437" width="0.0120%" height="15" fill="rgb(253,1,49)" fg:x="9961" fg:w="16"/><text x="7.7176%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (16 samples, 0.01%)</title><rect x="7.4676%" y="421" width="0.0120%" height="15" fill="rgb(227,144,33)" fg:x="9961" fg:w="16"/><text x="7.7176%" y="431.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (14 samples, 0.01%)</title><rect x="7.4923%" y="453" width="0.0105%" height="15" fill="rgb(249,163,44)" fg:x="9994" fg:w="14"/><text x="7.7423%" y="463.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (14 samples, 0.01%)</title><rect x="7.4923%" y="437" width="0.0105%" height="15" fill="rgb(234,15,39)" fg:x="9994" fg:w="14"/><text x="7.7423%" y="447.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (14 samples, 0.01%)</title><rect x="7.4923%" y="421" width="0.0105%" height="15" fill="rgb(207,66,16)" fg:x="9994" fg:w="14"/><text x="7.7423%" y="431.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (14 samples, 0.01%)</title><rect x="7.4923%" y="405" width="0.0105%" height="15" fill="rgb(233,112,24)" fg:x="9994" fg:w="14"/><text x="7.7423%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14 samples, 0.01%)</title><rect x="7.4923%" y="389" width="0.0105%" height="15" fill="rgb(230,90,22)" fg:x="9994" fg:w="14"/><text x="7.7423%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.01%)</title><rect x="7.4923%" y="373" width="0.0105%" height="15" fill="rgb(229,61,13)" fg:x="9994" fg:w="14"/><text x="7.7423%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (28 samples, 0.02%)</title><rect x="7.5043%" y="341" width="0.0210%" height="15" fill="rgb(225,57,24)" fg:x="10010" fg:w="28"/><text x="7.7543%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (27 samples, 0.02%)</title><rect x="7.5051%" y="325" width="0.0202%" height="15" fill="rgb(208,169,48)" fg:x="10011" fg:w="27"/><text x="7.7551%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (15 samples, 0.01%)</title><rect x="7.5141%" y="309" width="0.0112%" height="15" fill="rgb(244,218,51)" fg:x="10023" fg:w="15"/><text x="7.7641%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (15 samples, 0.01%)</title><rect x="7.5141%" y="293" width="0.0112%" height="15" fill="rgb(214,148,10)" fg:x="10023" fg:w="15"/><text x="7.7641%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (15 samples, 0.01%)</title><rect x="7.5141%" y="277" width="0.0112%" height="15" fill="rgb(225,174,27)" fg:x="10023" fg:w="15"/><text x="7.7641%" y="287.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (15 samples, 0.01%)</title><rect x="7.5141%" y="261" width="0.0112%" height="15" fill="rgb(230,96,26)" fg:x="10023" fg:w="15"/><text x="7.7641%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.01%)</title><rect x="7.5141%" y="245" width="0.0112%" height="15" fill="rgb(232,10,30)" fg:x="10023" fg:w="15"/><text x="7.7641%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (35 samples, 0.03%)</title><rect x="7.5043%" y="373" width="0.0262%" height="15" fill="rgb(222,8,50)" fg:x="10010" fg:w="35"/><text x="7.7543%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.03%)</title><rect x="7.5043%" y="357" width="0.0262%" height="15" fill="rgb(213,81,27)" fg:x="10010" fg:w="35"/><text x="7.7543%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (38 samples, 0.03%)</title><rect x="7.5036%" y="453" width="0.0285%" height="15" fill="rgb(245,50,10)" fg:x="10009" fg:w="38"/><text x="7.7536%" y="463.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (38 samples, 0.03%)</title><rect x="7.5036%" y="437" width="0.0285%" height="15" fill="rgb(216,100,18)" fg:x="10009" fg:w="38"/><text x="7.7536%" y="447.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (37 samples, 0.03%)</title><rect x="7.5043%" y="421" width="0.0277%" height="15" fill="rgb(236,147,54)" fg:x="10010" fg:w="37"/><text x="7.7543%" y="431.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (37 samples, 0.03%)</title><rect x="7.5043%" y="405" width="0.0277%" height="15" fill="rgb(205,143,26)" fg:x="10010" fg:w="37"/><text x="7.7543%" y="415.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (37 samples, 0.03%)</title><rect x="7.5043%" y="389" width="0.0277%" height="15" fill="rgb(236,26,9)" fg:x="10010" fg:w="37"/><text x="7.7543%" y="399.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (64 samples, 0.05%)</title><rect x="7.4901%" y="469" width="0.0480%" height="15" fill="rgb(221,165,53)" fg:x="9991" fg:w="64"/><text x="7.7401%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (14 samples, 0.01%)</title><rect x="7.5380%" y="469" width="0.0105%" height="15" fill="rgb(214,110,17)" fg:x="10055" fg:w="14"/><text x="7.7880%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (14 samples, 0.01%)</title><rect x="7.5380%" y="453" width="0.0105%" height="15" fill="rgb(237,197,12)" fg:x="10055" fg:w="14"/><text x="7.7880%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (14 samples, 0.01%)</title><rect x="7.5380%" y="437" width="0.0105%" height="15" fill="rgb(205,84,17)" fg:x="10055" fg:w="14"/><text x="7.7880%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14 samples, 0.01%)</title><rect x="7.5380%" y="421" width="0.0105%" height="15" fill="rgb(237,18,45)" fg:x="10055" fg:w="14"/><text x="7.7880%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.01%)</title><rect x="7.5380%" y="405" width="0.0105%" height="15" fill="rgb(221,87,14)" fg:x="10055" fg:w="14"/><text x="7.7880%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (14 samples, 0.01%)</title><rect x="7.5380%" y="389" width="0.0105%" height="15" fill="rgb(238,186,15)" fg:x="10055" fg:w="14"/><text x="7.7880%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (14 samples, 0.01%)</title><rect x="7.5380%" y="373" width="0.0105%" height="15" fill="rgb(208,115,11)" fg:x="10055" fg:w="14"/><text x="7.7880%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.01%)</title><rect x="7.5575%" y="325" width="0.0120%" height="15" fill="rgb(254,175,0)" fg:x="10081" fg:w="16"/><text x="7.8075%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (16 samples, 0.01%)</title><rect x="7.5575%" y="309" width="0.0120%" height="15" fill="rgb(227,24,42)" fg:x="10081" fg:w="16"/><text x="7.8075%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (18 samples, 0.01%)</title><rect x="7.5575%" y="357" width="0.0135%" height="15" fill="rgb(223,211,37)" fg:x="10081" fg:w="18"/><text x="7.8075%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.01%)</title><rect x="7.5575%" y="341" width="0.0135%" height="15" fill="rgb(235,49,27)" fg:x="10081" fg:w="18"/><text x="7.8075%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 0.02%)</title><rect x="7.5568%" y="437" width="0.0157%" height="15" fill="rgb(254,97,51)" fg:x="10080" fg:w="21"/><text x="7.8068%" y="447.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="7.5568%" y="421" width="0.0157%" height="15" fill="rgb(249,51,40)" fg:x="10080" fg:w="21"/><text x="7.8068%" y="431.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (20 samples, 0.01%)</title><rect x="7.5575%" y="405" width="0.0150%" height="15" fill="rgb(210,128,45)" fg:x="10081" fg:w="20"/><text x="7.8075%" y="415.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (20 samples, 0.01%)</title><rect x="7.5575%" y="389" width="0.0150%" height="15" fill="rgb(224,137,50)" fg:x="10081" fg:w="20"/><text x="7.8075%" y="399.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (20 samples, 0.01%)</title><rect x="7.5575%" y="373" width="0.0150%" height="15" fill="rgb(242,15,9)" fg:x="10081" fg:w="20"/><text x="7.8075%" y="383.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (40 samples, 0.03%)</title><rect x="7.5485%" y="453" width="0.0300%" height="15" fill="rgb(233,187,41)" fg:x="10069" fg:w="40"/><text x="7.7985%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (16 samples, 0.01%)</title><rect x="7.5800%" y="341" width="0.0120%" height="15" fill="rgb(227,2,29)" fg:x="10111" fg:w="16"/><text x="7.8300%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (16 samples, 0.01%)</title><rect x="7.5800%" y="325" width="0.0120%" height="15" fill="rgb(222,70,3)" fg:x="10111" fg:w="16"/><text x="7.8300%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (34 samples, 0.03%)</title><rect x="7.5800%" y="421" width="0.0255%" height="15" fill="rgb(213,11,42)" fg:x="10111" fg:w="34"/><text x="7.8300%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (34 samples, 0.03%)</title><rect x="7.5800%" y="405" width="0.0255%" height="15" fill="rgb(225,150,9)" fg:x="10111" fg:w="34"/><text x="7.8300%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (34 samples, 0.03%)</title><rect x="7.5800%" y="389" width="0.0255%" height="15" fill="rgb(230,162,45)" fg:x="10111" fg:w="34"/><text x="7.8300%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (34 samples, 0.03%)</title><rect x="7.5800%" y="373" width="0.0255%" height="15" fill="rgb(222,14,52)" fg:x="10111" fg:w="34"/><text x="7.8300%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (34 samples, 0.03%)</title><rect x="7.5800%" y="357" width="0.0255%" height="15" fill="rgb(254,198,14)" fg:x="10111" fg:w="34"/><text x="7.8300%" y="367.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (18 samples, 0.01%)</title><rect x="7.5920%" y="341" width="0.0135%" height="15" fill="rgb(220,217,30)" fg:x="10127" fg:w="18"/><text x="7.8420%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (36 samples, 0.03%)</title><rect x="7.5800%" y="453" width="0.0270%" height="15" fill="rgb(215,146,41)" fg:x="10111" fg:w="36"/><text x="7.8300%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (36 samples, 0.03%)</title><rect x="7.5800%" y="437" width="0.0270%" height="15" fill="rgb(217,27,36)" fg:x="10111" fg:w="36"/><text x="7.8300%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (17 samples, 0.01%)</title><rect x="7.6078%" y="437" width="0.0127%" height="15" fill="rgb(219,218,39)" fg:x="10148" fg:w="17"/><text x="7.8578%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (17 samples, 0.01%)</title><rect x="7.6078%" y="421" width="0.0127%" height="15" fill="rgb(219,4,42)" fg:x="10148" fg:w="17"/><text x="7.8578%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (17 samples, 0.01%)</title><rect x="7.6078%" y="405" width="0.0127%" height="15" fill="rgb(249,119,36)" fg:x="10148" fg:w="17"/><text x="7.8578%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (17 samples, 0.01%)</title><rect x="7.6078%" y="389" width="0.0127%" height="15" fill="rgb(209,23,33)" fg:x="10148" fg:w="17"/><text x="7.8578%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.01%)</title><rect x="7.6078%" y="373" width="0.0127%" height="15" fill="rgb(211,10,0)" fg:x="10148" fg:w="17"/><text x="7.8578%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (17 samples, 0.01%)</title><rect x="7.6078%" y="357" width="0.0127%" height="15" fill="rgb(208,99,37)" fg:x="10148" fg:w="17"/><text x="7.8578%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (17 samples, 0.01%)</title><rect x="7.6078%" y="341" width="0.0127%" height="15" fill="rgb(213,132,31)" fg:x="10148" fg:w="17"/><text x="7.8578%" y="351.50"></text></g><g><title>kakuro::main (10,192 samples, 7.64%)</title><rect x="0.0030%" y="1125" width="7.6408%" height="15" fill="rgb(243,129,40)" fg:x="4" fg:w="10192"/><text x="0.2530%" y="1135.50">kakuro::ma..</text></g><g><title>kakuro::solve (10,192 samples, 7.64%)</title><rect x="0.0030%" y="1109" width="7.6408%" height="15" fill="rgb(210,66,33)" fg:x="4" fg:w="10192"/><text x="0.2530%" y="1119.50">kakuro::so..</text></g><g><title>kakuro::raw_solve (10,192 samples, 7.64%)</title><rect x="0.0030%" y="1093" width="7.6408%" height="15" fill="rgb(209,189,4)" fg:x="4" fg:w="10192"/><text x="0.2530%" y="1103.50">kakuro::ra..</text></g><g><title>kakuro::solvers::sum_reachable::solve (10,192 samples, 7.64%)</title><rect x="0.0030%" y="1077" width="7.6408%" height="15" fill="rgb(214,107,37)" fg:x="4" fg:w="10192"/><text x="0.2530%" y="1087.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,192 samples, 7.64%)</title><rect x="0.0030%" y="1061" width="7.6408%" height="15" fill="rgb(245,88,54)" fg:x="4" fg:w="10192"/><text x="0.2530%" y="1071.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,192 samples, 7.64%)</title><rect x="0.0030%" y="1045" width="7.6408%" height="15" fill="rgb(205,146,20)" fg:x="4" fg:w="10192"/><text x="0.2530%" y="1055.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,191 samples, 7.64%)</title><rect x="0.0037%" y="1029" width="7.6400%" height="15" fill="rgb(220,161,25)" fg:x="5" fg:w="10191"/><text x="0.2537%" y="1039.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,191 samples, 7.64%)</title><rect x="0.0037%" y="1013" width="7.6400%" height="15" fill="rgb(215,152,15)" fg:x="5" fg:w="10191"/><text x="0.2537%" y="1023.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,191 samples, 7.64%)</title><rect x="0.0037%" y="997" width="7.6400%" height="15" fill="rgb(233,192,44)" fg:x="5" fg:w="10191"/><text x="0.2537%" y="1007.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,190 samples, 7.64%)</title><rect x="0.0045%" y="981" width="7.6393%" height="15" fill="rgb(240,170,46)" fg:x="6" fg:w="10190"/><text x="0.2545%" y="991.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,189 samples, 7.64%)</title><rect x="0.0052%" y="965" width="7.6385%" height="15" fill="rgb(207,104,33)" fg:x="7" fg:w="10189"/><text x="0.2552%" y="975.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,184 samples, 7.63%)</title><rect x="0.0090%" y="949" width="7.6348%" height="15" fill="rgb(219,21,39)" fg:x="12" fg:w="10184"/><text x="0.2590%" y="959.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,181 samples, 7.63%)</title><rect x="0.0112%" y="933" width="7.6325%" height="15" fill="rgb(214,133,29)" fg:x="15" fg:w="10181"/><text x="0.2612%" y="943.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,172 samples, 7.63%)</title><rect x="0.0180%" y="917" width="7.6258%" height="15" fill="rgb(226,93,6)" fg:x="24" fg:w="10172"/><text x="0.2680%" y="927.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,162 samples, 7.62%)</title><rect x="0.0255%" y="901" width="7.6183%" height="15" fill="rgb(252,222,34)" fg:x="34" fg:w="10162"/><text x="0.2755%" y="911.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,134 samples, 7.60%)</title><rect x="0.0465%" y="885" width="7.5973%" height="15" fill="rgb(252,92,48)" fg:x="62" fg:w="10134"/><text x="0.2965%" y="895.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (10,101 samples, 7.57%)</title><rect x="0.0712%" y="869" width="7.5725%" height="15" fill="rgb(245,223,24)" fg:x="95" fg:w="10101"/><text x="0.3212%" y="879.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (9,889 samples, 7.41%)</title><rect x="0.2302%" y="853" width="7.4136%" height="15" fill="rgb(205,176,3)" fg:x="307" fg:w="9889"/><text x="0.4802%" y="863.50">kakuro::so..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (8,685 samples, 6.51%)</title><rect x="1.1328%" y="837" width="6.5110%" height="15" fill="rgb(235,151,15)" fg:x="1511" fg:w="8685"/><text x="1.3828%" y="847.50">kakuro::s..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (6,638 samples, 4.98%)</title><rect x="2.6674%" y="821" width="4.9764%" height="15" fill="rgb(237,209,11)" fg:x="3558" fg:w="6638"/><text x="2.9174%" y="831.50">kakuro..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (5,050 samples, 3.79%)</title><rect x="3.8579%" y="805" width="3.7859%" height="15" fill="rgb(243,227,24)" fg:x="5146" fg:w="5050"/><text x="4.1079%" y="815.50">kaku..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (4,674 samples, 3.50%)</title><rect x="4.1397%" y="789" width="3.5040%" height="15" fill="rgb(239,193,16)" fg:x="5522" fg:w="4674"/><text x="4.3897%" y="799.50">kak..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (4,519 samples, 3.39%)</title><rect x="4.2559%" y="773" width="3.3878%" height="15" fill="rgb(231,27,9)" fg:x="5677" fg:w="4519"/><text x="4.5059%" y="783.50">kak..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (4,350 samples, 3.26%)</title><rect x="4.3826%" y="757" width="3.2611%" height="15" fill="rgb(219,169,10)" fg:x="5846" fg:w="4350"/><text x="4.6326%" y="767.50">kak..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (3,508 samples, 2.63%)</title><rect x="5.0139%" y="741" width="2.6299%" height="15" fill="rgb(244,229,43)" fg:x="6688" fg:w="3508"/><text x="5.2639%" y="751.50">ka..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (1,928 samples, 1.45%)</title><rect x="6.1984%" y="725" width="1.4454%" height="15" fill="rgb(254,38,20)" fg:x="8268" fg:w="1928"/><text x="6.4484%" y="735.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (1,063 samples, 0.80%)</title><rect x="6.8468%" y="709" width="0.7969%" height="15" fill="rgb(250,47,30)" fg:x="9133" fg:w="1063"/><text x="7.0968%" y="719.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (1,035 samples, 0.78%)</title><rect x="6.8678%" y="693" width="0.7759%" height="15" fill="rgb(224,124,36)" fg:x="9161" fg:w="1035"/><text x="7.1178%" y="703.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (1,010 samples, 0.76%)</title><rect x="6.8866%" y="677" width="0.7572%" height="15" fill="rgb(246,68,51)" fg:x="9186" fg:w="1010"/><text x="7.1366%" y="687.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (970 samples, 0.73%)</title><rect x="6.9166%" y="661" width="0.7272%" height="15" fill="rgb(253,43,49)" fg:x="9226" fg:w="970"/><text x="7.1666%" y="671.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (944 samples, 0.71%)</title><rect x="6.9361%" y="645" width="0.7077%" height="15" fill="rgb(219,54,36)" fg:x="9252" fg:w="944"/><text x="7.1861%" y="655.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (912 samples, 0.68%)</title><rect x="6.9600%" y="629" width="0.6837%" height="15" fill="rgb(227,133,34)" fg:x="9284" fg:w="912"/><text x="7.2100%" y="639.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (902 samples, 0.68%)</title><rect x="6.9675%" y="613" width="0.6762%" height="15" fill="rgb(247,227,15)" fg:x="9294" fg:w="902"/><text x="7.2175%" y="623.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (819 samples, 0.61%)</title><rect x="7.0298%" y="597" width="0.6140%" height="15" fill="rgb(229,96,14)" fg:x="9377" fg:w="819"/><text x="7.2798%" y="607.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (605 samples, 0.45%)</title><rect x="7.1902%" y="581" width="0.4536%" height="15" fill="rgb(220,79,17)" fg:x="9591" fg:w="605"/><text x="7.4402%" y="591.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (500 samples, 0.37%)</title><rect x="7.2689%" y="565" width="0.3748%" height="15" fill="rgb(205,131,53)" fg:x="9696" fg:w="500"/><text x="7.5189%" y="575.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (331 samples, 0.25%)</title><rect x="7.3956%" y="549" width="0.2481%" height="15" fill="rgb(209,50,29)" fg:x="9865" fg:w="331"/><text x="7.6456%" y="559.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (263 samples, 0.20%)</title><rect x="7.4466%" y="533" width="0.1972%" height="15" fill="rgb(245,86,46)" fg:x="9933" fg:w="263"/><text x="7.6966%" y="543.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (219 samples, 0.16%)</title><rect x="7.4796%" y="517" width="0.1642%" height="15" fill="rgb(235,66,46)" fg:x="9977" fg:w="219"/><text x="7.7296%" y="527.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (212 samples, 0.16%)</title><rect x="7.4848%" y="501" width="0.1589%" height="15" fill="rgb(232,148,31)" fg:x="9984" fg:w="212"/><text x="7.7348%" y="511.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (205 samples, 0.15%)</title><rect x="7.4901%" y="485" width="0.1537%" height="15" fill="rgb(217,149,8)" fg:x="9991" fg:w="205"/><text x="7.7401%" y="495.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (127 samples, 0.10%)</title><rect x="7.5485%" y="469" width="0.0952%" height="15" fill="rgb(209,183,11)" fg:x="10069" fg:w="127"/><text x="7.7985%" y="479.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (49 samples, 0.04%)</title><rect x="7.6070%" y="453" width="0.0367%" height="15" fill="rgb(208,55,20)" fg:x="10147" fg:w="49"/><text x="7.8570%" y="463.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (31 samples, 0.02%)</title><rect x="7.6205%" y="437" width="0.0232%" height="15" fill="rgb(218,39,14)" fg:x="10165" fg:w="31"/><text x="7.8705%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (31 samples, 0.02%)</title><rect x="7.6205%" y="421" width="0.0232%" height="15" fill="rgb(216,169,33)" fg:x="10165" fg:w="31"/><text x="7.8705%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (31 samples, 0.02%)</title><rect x="7.6205%" y="405" width="0.0232%" height="15" fill="rgb(233,80,24)" fg:x="10165" fg:w="31"/><text x="7.8705%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (31 samples, 0.02%)</title><rect x="7.6205%" y="389" width="0.0232%" height="15" fill="rgb(213,179,31)" fg:x="10165" fg:w="31"/><text x="7.8705%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (31 samples, 0.02%)</title><rect x="7.6205%" y="373" width="0.0232%" height="15" fill="rgb(209,19,5)" fg:x="10165" fg:w="31"/><text x="7.8705%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 0.02%)</title><rect x="7.6205%" y="357" width="0.0232%" height="15" fill="rgb(219,18,35)" fg:x="10165" fg:w="31"/><text x="7.8705%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (31 samples, 0.02%)</title><rect x="7.6205%" y="341" width="0.0232%" height="15" fill="rgb(209,169,16)" fg:x="10165" fg:w="31"/><text x="7.8705%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (31 samples, 0.02%)</title><rect x="7.6205%" y="325" width="0.0232%" height="15" fill="rgb(245,90,51)" fg:x="10165" fg:w="31"/><text x="7.8705%" y="335.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (19 samples, 0.01%)</title><rect x="7.6295%" y="309" width="0.0142%" height="15" fill="rgb(220,99,45)" fg:x="10177" fg:w="19"/><text x="7.8795%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.02%)</title><rect x="7.6527%" y="357" width="0.0157%" height="15" fill="rgb(249,89,25)" fg:x="10208" fg:w="21"/><text x="7.9027%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 0.02%)</title><rect x="7.6527%" y="341" width="0.0157%" height="15" fill="rgb(239,193,0)" fg:x="10208" fg:w="21"/><text x="7.9027%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (27 samples, 0.02%)</title><rect x="7.6527%" y="389" width="0.0202%" height="15" fill="rgb(231,126,1)" fg:x="10208" fg:w="27"/><text x="7.9027%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 0.02%)</title><rect x="7.6527%" y="373" width="0.0202%" height="15" fill="rgb(243,166,3)" fg:x="10208" fg:w="27"/><text x="7.9027%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30 samples, 0.02%)</title><rect x="7.6527%" y="469" width="0.0225%" height="15" fill="rgb(223,22,34)" fg:x="10208" fg:w="30"/><text x="7.9027%" y="479.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30 samples, 0.02%)</title><rect x="7.6527%" y="453" width="0.0225%" height="15" fill="rgb(251,52,51)" fg:x="10208" fg:w="30"/><text x="7.9027%" y="463.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (30 samples, 0.02%)</title><rect x="7.6527%" y="437" width="0.0225%" height="15" fill="rgb(221,165,28)" fg:x="10208" fg:w="30"/><text x="7.9027%" y="447.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (30 samples, 0.02%)</title><rect x="7.6527%" y="421" width="0.0225%" height="15" fill="rgb(218,121,47)" fg:x="10208" fg:w="30"/><text x="7.9027%" y="431.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (30 samples, 0.02%)</title><rect x="7.6527%" y="405" width="0.0225%" height="15" fill="rgb(209,120,9)" fg:x="10208" fg:w="30"/><text x="7.9027%" y="415.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (40 samples, 0.03%)</title><rect x="7.6460%" y="485" width="0.0300%" height="15" fill="rgb(236,68,12)" fg:x="10199" fg:w="40"/><text x="7.8960%" y="495.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (25 samples, 0.02%)</title><rect x="7.6767%" y="469" width="0.0187%" height="15" fill="rgb(225,194,26)" fg:x="10240" fg:w="25"/><text x="7.9267%" y="479.50"></text></g><g><title>kakuro::raw_solve (83 samples, 0.06%)</title><rect x="7.6438%" y="1125" width="0.0622%" height="15" fill="rgb(231,84,39)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="1135.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve (83 samples, 0.06%)</title><rect x="7.6438%" y="1109" width="0.0622%" height="15" fill="rgb(210,11,45)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="1119.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="1093" width="0.0622%" height="15" fill="rgb(224,54,52)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="1103.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="1077" width="0.0622%" height="15" fill="rgb(238,102,14)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="1087.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="1061" width="0.0622%" height="15" fill="rgb(243,160,52)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="1071.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="1045" width="0.0622%" height="15" fill="rgb(216,114,19)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="1055.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="1029" width="0.0622%" height="15" fill="rgb(244,166,37)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="1039.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="1013" width="0.0622%" height="15" fill="rgb(246,29,44)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="1023.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="997" width="0.0622%" height="15" fill="rgb(215,56,53)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="1007.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="981" width="0.0622%" height="15" fill="rgb(217,60,2)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="991.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="965" width="0.0622%" height="15" fill="rgb(207,26,24)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="975.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="949" width="0.0622%" height="15" fill="rgb(252,210,15)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="959.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="933" width="0.0622%" height="15" fill="rgb(253,209,26)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="943.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="917" width="0.0622%" height="15" fill="rgb(238,170,14)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="927.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="901" width="0.0622%" height="15" fill="rgb(216,178,15)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="911.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="885" width="0.0622%" height="15" fill="rgb(250,197,2)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="895.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="869" width="0.0622%" height="15" fill="rgb(212,70,42)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="879.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="853" width="0.0622%" height="15" fill="rgb(227,213,9)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="863.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="837" width="0.0622%" height="15" fill="rgb(245,99,25)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="847.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="821" width="0.0622%" height="15" fill="rgb(250,82,29)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="831.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="805" width="0.0622%" height="15" fill="rgb(241,226,54)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="815.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="789" width="0.0622%" height="15" fill="rgb(221,99,41)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="799.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="773" width="0.0622%" height="15" fill="rgb(213,90,21)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="783.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="757" width="0.0622%" height="15" fill="rgb(205,208,24)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="767.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="741" width="0.0622%" height="15" fill="rgb(246,31,12)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="751.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="725" width="0.0622%" height="15" fill="rgb(213,154,6)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="735.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="709" width="0.0622%" height="15" fill="rgb(222,163,29)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="719.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="693" width="0.0622%" height="15" fill="rgb(227,201,8)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="703.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="677" width="0.0622%" height="15" fill="rgb(233,9,32)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="687.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="661" width="0.0622%" height="15" fill="rgb(217,54,24)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="671.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="645" width="0.0622%" height="15" fill="rgb(235,192,0)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="655.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="629" width="0.0622%" height="15" fill="rgb(235,45,9)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="639.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="613" width="0.0622%" height="15" fill="rgb(246,42,40)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="623.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="597" width="0.0622%" height="15" fill="rgb(248,111,24)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="607.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="581" width="0.0622%" height="15" fill="rgb(249,65,22)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="591.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="565" width="0.0622%" height="15" fill="rgb(238,111,51)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="575.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="549" width="0.0622%" height="15" fill="rgb(250,118,22)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="559.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="533" width="0.0622%" height="15" fill="rgb(234,84,26)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="543.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (83 samples, 0.06%)</title><rect x="7.6438%" y="517" width="0.0622%" height="15" fill="rgb(243,172,12)" fg:x="10196" fg:w="83"/><text x="7.8938%" y="527.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (80 samples, 0.06%)</title><rect x="7.6460%" y="501" width="0.0600%" height="15" fill="rgb(236,150,49)" fg:x="10199" fg:w="80"/><text x="7.8960%" y="511.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (39 samples, 0.03%)</title><rect x="7.6767%" y="485" width="0.0292%" height="15" fill="rgb(225,197,26)" fg:x="10240" fg:w="39"/><text x="7.9267%" y="495.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="7.7292%" y="325" width="0.0127%" height="15" fill="rgb(214,17,42)" fg:x="10310" fg:w="17"/><text x="7.9792%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26 samples, 0.02%)</title><rect x="7.7285%" y="357" width="0.0195%" height="15" fill="rgb(224,165,40)" fg:x="10309" fg:w="26"/><text x="7.9785%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (25 samples, 0.02%)</title><rect x="7.7292%" y="341" width="0.0187%" height="15" fill="rgb(246,100,4)" fg:x="10310" fg:w="25"/><text x="7.9792%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30 samples, 0.02%)</title><rect x="7.7285%" y="469" width="0.0225%" height="15" fill="rgb(222,103,0)" fg:x="10309" fg:w="30"/><text x="7.9785%" y="479.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30 samples, 0.02%)</title><rect x="7.7285%" y="453" width="0.0225%" height="15" fill="rgb(227,189,26)" fg:x="10309" fg:w="30"/><text x="7.9785%" y="463.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (30 samples, 0.02%)</title><rect x="7.7285%" y="437" width="0.0225%" height="15" fill="rgb(214,202,17)" fg:x="10309" fg:w="30"/><text x="7.9785%" y="447.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (30 samples, 0.02%)</title><rect x="7.7285%" y="421" width="0.0225%" height="15" fill="rgb(229,111,3)" fg:x="10309" fg:w="30"/><text x="7.9785%" y="431.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (30 samples, 0.02%)</title><rect x="7.7285%" y="405" width="0.0225%" height="15" fill="rgb(229,172,15)" fg:x="10309" fg:w="30"/><text x="7.9785%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (30 samples, 0.02%)</title><rect x="7.7285%" y="389" width="0.0225%" height="15" fill="rgb(230,224,35)" fg:x="10309" fg:w="30"/><text x="7.9785%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (30 samples, 0.02%)</title><rect x="7.7285%" y="373" width="0.0225%" height="15" fill="rgb(251,141,6)" fg:x="10309" fg:w="30"/><text x="7.9785%" y="383.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (64 samples, 0.05%)</title><rect x="7.7082%" y="485" width="0.0480%" height="15" fill="rgb(225,208,6)" fg:x="10282" fg:w="64"/><text x="7.9582%" y="495.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve (76 samples, 0.06%)</title><rect x="7.7060%" y="1125" width="0.0570%" height="15" fill="rgb(246,181,16)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="1135.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="1109" width="0.0570%" height="15" fill="rgb(227,129,36)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="1119.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="1093" width="0.0570%" height="15" fill="rgb(248,117,24)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="1103.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="1077" width="0.0570%" height="15" fill="rgb(214,185,35)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="1087.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="1061" width="0.0570%" height="15" fill="rgb(236,150,34)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="1071.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="1045" width="0.0570%" height="15" fill="rgb(243,228,27)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="1055.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="1029" width="0.0570%" height="15" fill="rgb(245,77,44)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="1039.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="1013" width="0.0570%" height="15" fill="rgb(235,214,42)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="1023.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="997" width="0.0570%" height="15" fill="rgb(221,74,3)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="1007.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="981" width="0.0570%" height="15" fill="rgb(206,121,29)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="991.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="965" width="0.0570%" height="15" fill="rgb(249,131,53)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="975.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="949" width="0.0570%" height="15" fill="rgb(236,170,29)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="959.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="933" width="0.0570%" height="15" fill="rgb(247,96,15)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="943.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="917" width="0.0570%" height="15" fill="rgb(211,210,7)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="927.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="901" width="0.0570%" height="15" fill="rgb(240,88,50)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="911.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="885" width="0.0570%" height="15" fill="rgb(209,229,26)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="895.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="869" width="0.0570%" height="15" fill="rgb(210,68,23)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="879.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="853" width="0.0570%" height="15" fill="rgb(229,180,13)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="863.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="837" width="0.0570%" height="15" fill="rgb(236,53,44)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="847.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="821" width="0.0570%" height="15" fill="rgb(244,214,29)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="831.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="805" width="0.0570%" height="15" fill="rgb(220,75,29)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="815.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="789" width="0.0570%" height="15" fill="rgb(214,183,37)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="799.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="773" width="0.0570%" height="15" fill="rgb(239,117,29)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="783.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="757" width="0.0570%" height="15" fill="rgb(237,171,35)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="767.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="741" width="0.0570%" height="15" fill="rgb(229,178,53)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="751.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="725" width="0.0570%" height="15" fill="rgb(210,102,19)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="735.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="709" width="0.0570%" height="15" fill="rgb(235,127,22)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="719.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="693" width="0.0570%" height="15" fill="rgb(244,31,31)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="703.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="677" width="0.0570%" height="15" fill="rgb(231,43,21)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="687.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="661" width="0.0570%" height="15" fill="rgb(217,131,35)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="671.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="645" width="0.0570%" height="15" fill="rgb(221,149,4)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="655.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="629" width="0.0570%" height="15" fill="rgb(232,170,28)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="639.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="613" width="0.0570%" height="15" fill="rgb(238,56,10)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="623.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="597" width="0.0570%" height="15" fill="rgb(235,196,14)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="607.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="581" width="0.0570%" height="15" fill="rgb(216,45,48)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="591.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="565" width="0.0570%" height="15" fill="rgb(238,213,17)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="575.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="549" width="0.0570%" height="15" fill="rgb(212,13,2)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="559.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="533" width="0.0570%" height="15" fill="rgb(240,114,20)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="543.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (76 samples, 0.06%)</title><rect x="7.7060%" y="517" width="0.0570%" height="15" fill="rgb(228,41,40)" fg:x="10279" fg:w="76"/><text x="7.9560%" y="527.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (73 samples, 0.05%)</title><rect x="7.7082%" y="501" width="0.0547%" height="15" fill="rgb(244,132,35)" fg:x="10282" fg:w="73"/><text x="7.9582%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (61 samples, 0.05%)</title><rect x="8.0786%" y="197" width="0.0457%" height="15" fill="rgb(253,189,4)" fg:x="10776" fg:w="61"/><text x="8.3286%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (45 samples, 0.03%)</title><rect x="8.1243%" y="197" width="0.0337%" height="15" fill="rgb(224,37,19)" fg:x="10837" fg:w="45"/><text x="8.3743%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (45 samples, 0.03%)</title><rect x="8.1243%" y="181" width="0.0337%" height="15" fill="rgb(235,223,18)" fg:x="10837" fg:w="45"/><text x="8.3743%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (43 samples, 0.03%)</title><rect x="8.1258%" y="165" width="0.0322%" height="15" fill="rgb(235,163,25)" fg:x="10839" fg:w="43"/><text x="8.3758%" y="175.50"></text></g><g><title>core::mem::swap (852 samples, 0.64%)</title><rect x="8.1580%" y="197" width="0.6387%" height="15" fill="rgb(217,145,28)" fg:x="10882" fg:w="852"/><text x="8.4080%" y="207.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (852 samples, 0.64%)</title><rect x="8.1580%" y="181" width="0.6387%" height="15" fill="rgb(223,223,32)" fg:x="10882" fg:w="852"/><text x="8.4080%" y="191.50"></text></g><g><title>core::ptr::swap_nonoverlapping (852 samples, 0.64%)</title><rect x="8.1580%" y="165" width="0.6387%" height="15" fill="rgb(227,189,39)" fg:x="10882" fg:w="852"/><text x="8.4080%" y="175.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (852 samples, 0.64%)</title><rect x="8.1580%" y="149" width="0.6387%" height="15" fill="rgb(248,10,22)" fg:x="10882" fg:w="852"/><text x="8.4080%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (852 samples, 0.64%)</title><rect x="8.1580%" y="133" width="0.6387%" height="15" fill="rgb(248,46,39)" fg:x="10882" fg:w="852"/><text x="8.4080%" y="143.50"></text></g><g><title>__GI___libc_free (64 samples, 0.05%)</title><rect x="8.8050%" y="101" width="0.0480%" height="15" fill="rgb(248,113,48)" fg:x="11745" fg:w="64"/><text x="9.0550%" y="111.50"></text></g><g><title>__rdl_dealloc (33 samples, 0.02%)</title><rect x="8.8530%" y="101" width="0.0247%" height="15" fill="rgb(245,16,25)" fg:x="11809" fg:w="33"/><text x="9.1030%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (33 samples, 0.02%)</title><rect x="8.8530%" y="85" width="0.0247%" height="15" fill="rgb(249,152,16)" fg:x="11809" fg:w="33"/><text x="9.1030%" y="95.50"></text></g><g><title>__rust_dealloc (53 samples, 0.04%)</title><rect x="8.8777%" y="101" width="0.0397%" height="15" fill="rgb(250,16,1)" fg:x="11842" fg:w="53"/><text x="9.1277%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (468 samples, 0.35%)</title><rect x="8.8013%" y="133" width="0.3509%" height="15" fill="rgb(249,138,3)" fg:x="11740" fg:w="468"/><text x="9.0513%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (467 samples, 0.35%)</title><rect x="8.8020%" y="117" width="0.3501%" height="15" fill="rgb(227,71,41)" fg:x="11741" fg:w="467"/><text x="9.0520%" y="127.50"></text></g><g><title>_int_free (313 samples, 0.23%)</title><rect x="8.9175%" y="101" width="0.2347%" height="15" fill="rgb(209,184,23)" fg:x="11895" fg:w="313"/><text x="9.1675%" y="111.50"></text></g><g><title>tcache_put (37 samples, 0.03%)</title><rect x="9.1244%" y="85" width="0.0277%" height="15" fill="rgb(223,215,31)" fg:x="12171" fg:w="37"/><text x="9.3744%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (15 samples, 0.01%)</title><rect x="9.1521%" y="133" width="0.0112%" height="15" fill="rgb(210,146,28)" fg:x="12208" fg:w="15"/><text x="9.4021%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (15 samples, 0.01%)</title><rect x="9.1521%" y="117" width="0.0112%" height="15" fill="rgb(209,183,41)" fg:x="12208" fg:w="15"/><text x="9.4021%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (488 samples, 0.37%)</title><rect x="8.8013%" y="149" width="0.3658%" height="15" fill="rgb(209,224,45)" fg:x="11740" fg:w="488"/><text x="9.0513%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (522 samples, 0.39%)</title><rect x="8.7968%" y="197" width="0.3913%" height="15" fill="rgb(224,209,51)" fg:x="11734" fg:w="522"/><text x="9.0468%" y="207.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (522 samples, 0.39%)</title><rect x="8.7968%" y="181" width="0.3913%" height="15" fill="rgb(223,17,39)" fg:x="11734" fg:w="522"/><text x="9.0468%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (522 samples, 0.39%)</title><rect x="8.7968%" y="165" width="0.3913%" height="15" fill="rgb(234,204,37)" fg:x="11734" fg:w="522"/><text x="9.0468%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (28 samples, 0.02%)</title><rect x="9.1671%" y="149" width="0.0210%" height="15" fill="rgb(236,120,5)" fg:x="12228" fg:w="28"/><text x="9.4171%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (248 samples, 0.19%)</title><rect x="9.8568%" y="69" width="0.1859%" height="15" fill="rgb(248,97,27)" fg:x="13148" fg:w="248"/><text x="10.1068%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (366 samples, 0.27%)</title><rect x="9.8021%" y="85" width="0.2744%" height="15" fill="rgb(240,66,17)" fg:x="13075" fg:w="366"/><text x="10.0521%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (45 samples, 0.03%)</title><rect x="10.0427%" y="69" width="0.0337%" height="15" fill="rgb(210,79,3)" fg:x="13396" fg:w="45"/><text x="10.2927%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (867 samples, 0.65%)</title><rect x="10.2249%" y="69" width="0.6500%" height="15" fill="rgb(214,176,27)" fg:x="13639" fg:w="867"/><text x="10.4749%" y="79.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2,244 samples, 1.68%)</title><rect x="9.4100%" y="133" width="1.6823%" height="15" fill="rgb(235,185,3)" fg:x="12552" fg:w="2244"/><text x="9.6600%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,244 samples, 1.68%)</title><rect x="9.4100%" y="117" width="1.6823%" height="15" fill="rgb(227,24,12)" fg:x="12552" fg:w="2244"/><text x="9.6600%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,244 samples, 1.68%)</title><rect x="9.4100%" y="101" width="1.6823%" height="15" fill="rgb(252,169,48)" fg:x="12552" fg:w="2244"/><text x="9.6600%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,355 samples, 1.02%)</title><rect x="10.0765%" y="85" width="1.0158%" height="15" fill="rgb(212,65,1)" fg:x="13441" fg:w="1355"/><text x="10.3265%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (290 samples, 0.22%)</title><rect x="10.8749%" y="69" width="0.2174%" height="15" fill="rgb(242,39,24)" fg:x="14506" fg:w="290"/><text x="11.1249%" y="79.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (292 samples, 0.22%)</title><rect x="11.0923%" y="133" width="0.2189%" height="15" fill="rgb(249,32,23)" fg:x="14796" fg:w="292"/><text x="11.3423%" y="143.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (230 samples, 0.17%)</title><rect x="11.1388%" y="117" width="0.1724%" height="15" fill="rgb(251,195,23)" fg:x="14858" fg:w="230"/><text x="11.3888%" y="127.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (199 samples, 0.15%)</title><rect x="11.1620%" y="101" width="0.1492%" height="15" fill="rgb(236,174,8)" fg:x="14889" fg:w="199"/><text x="11.4120%" y="111.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (199 samples, 0.15%)</title><rect x="11.1620%" y="85" width="0.1492%" height="15" fill="rgb(220,197,8)" fg:x="14889" fg:w="199"/><text x="11.4120%" y="95.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (3,499 samples, 2.62%)</title><rect x="9.1881%" y="181" width="2.6231%" height="15" fill="rgb(240,108,37)" fg:x="12256" fg:w="3499"/><text x="9.4381%" y="191.50">ha..</text></g><g><title>hashbrown::map::make_hash (3,499 samples, 2.62%)</title><rect x="9.1881%" y="165" width="2.6231%" height="15" fill="rgb(232,176,24)" fg:x="12256" fg:w="3499"/><text x="9.4381%" y="175.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (3,483 samples, 2.61%)</title><rect x="9.2001%" y="149" width="2.6111%" height="15" fill="rgb(243,35,29)" fg:x="12272" fg:w="3483"/><text x="9.4501%" y="159.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (667 samples, 0.50%)</title><rect x="11.3112%" y="133" width="0.5000%" height="15" fill="rgb(210,37,18)" fg:x="15088" fg:w="667"/><text x="11.5612%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (667 samples, 0.50%)</title><rect x="11.3112%" y="117" width="0.5000%" height="15" fill="rgb(224,184,40)" fg:x="15088" fg:w="667"/><text x="11.5612%" y="127.50"></text></g><g><title>core::hash::Hasher::write_u8 (667 samples, 0.50%)</title><rect x="11.3112%" y="101" width="0.5000%" height="15" fill="rgb(236,39,29)" fg:x="15088" fg:w="667"/><text x="11.5612%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (634 samples, 0.48%)</title><rect x="11.3359%" y="85" width="0.4753%" height="15" fill="rgb(232,48,39)" fg:x="15121" fg:w="634"/><text x="11.5859%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (603 samples, 0.45%)</title><rect x="11.3592%" y="69" width="0.4521%" height="15" fill="rgb(236,34,42)" fg:x="15152" fg:w="603"/><text x="11.6092%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (603 samples, 0.45%)</title><rect x="11.3592%" y="53" width="0.4521%" height="15" fill="rgb(243,106,37)" fg:x="15152" fg:w="603"/><text x="11.6092%" y="63.50"></text></g><g><title>core::hash::sip::u8to64_le (240 samples, 0.18%)</title><rect x="11.6313%" y="37" width="0.1799%" height="15" fill="rgb(218,96,6)" fg:x="15515" fg:w="240"/><text x="11.8813%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (3,538 samples, 2.65%)</title><rect x="9.1881%" y="197" width="2.6524%" height="15" fill="rgb(235,130,12)" fg:x="12256" fg:w="3538"/><text x="9.4381%" y="207.50">ha..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (39 samples, 0.03%)</title><rect x="11.8112%" y="181" width="0.0292%" height="15" fill="rgb(231,95,0)" fg:x="15755" fg:w="39"/><text x="12.0612%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (39 samples, 0.03%)</title><rect x="11.8112%" y="165" width="0.0292%" height="15" fill="rgb(228,12,23)" fg:x="15755" fg:w="39"/><text x="12.0612%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (39 samples, 0.03%)</title><rect x="11.8112%" y="149" width="0.0292%" height="15" fill="rgb(216,12,1)" fg:x="15755" fg:w="39"/><text x="12.0612%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (39 samples, 0.03%)</title><rect x="11.8112%" y="133" width="0.0292%" height="15" fill="rgb(219,59,3)" fg:x="15755" fg:w="39"/><text x="12.0612%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket_ptr (290 samples, 0.22%)</title><rect x="11.8405%" y="197" width="0.2174%" height="15" fill="rgb(215,208,46)" fg:x="15794" fg:w="290"/><text x="12.0905%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (452 samples, 0.34%)</title><rect x="13.0385%" y="165" width="0.3389%" height="15" fill="rgb(254,224,29)" fg:x="17392" fg:w="452"/><text x="13.2885%" y="175.50"></text></g><g><title>hashbrown::raw::is_full (133 samples, 0.10%)</title><rect x="13.3788%" y="165" width="0.0997%" height="15" fill="rgb(232,14,29)" fg:x="17846" fg:w="133"/><text x="13.6288%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (109 samples, 0.08%)</title><rect x="13.4785%" y="165" width="0.0817%" height="15" fill="rgb(208,45,52)" fg:x="17979" fg:w="109"/><text x="13.7285%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (109 samples, 0.08%)</title><rect x="13.4785%" y="149" width="0.0817%" height="15" fill="rgb(234,191,28)" fg:x="17979" fg:w="109"/><text x="13.7285%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (109 samples, 0.08%)</title><rect x="13.4785%" y="133" width="0.0817%" height="15" fill="rgb(244,67,43)" fg:x="17979" fg:w="109"/><text x="13.7285%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2,581 samples, 1.93%)</title><rect x="12.0579%" y="181" width="1.9349%" height="15" fill="rgb(236,189,24)" fg:x="16084" fg:w="2581"/><text x="12.3079%" y="191.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (577 samples, 0.43%)</title><rect x="13.5602%" y="165" width="0.4326%" height="15" fill="rgb(239,214,33)" fg:x="18088" fg:w="577"/><text x="13.8102%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (577 samples, 0.43%)</title><rect x="13.5602%" y="149" width="0.4326%" height="15" fill="rgb(226,176,41)" fg:x="18088" fg:w="577"/><text x="13.8102%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (2,615 samples, 1.96%)</title><rect x="12.0579%" y="197" width="1.9604%" height="15" fill="rgb(248,47,8)" fg:x="16084" fg:w="2615"/><text x="12.3079%" y="207.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (34 samples, 0.03%)</title><rect x="13.9928%" y="181" width="0.0255%" height="15" fill="rgb(218,81,44)" fg:x="18665" fg:w="34"/><text x="14.2428%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (34 samples, 0.03%)</title><rect x="13.9928%" y="165" width="0.0255%" height="15" fill="rgb(213,98,6)" fg:x="18665" fg:w="34"/><text x="14.2428%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (347 samples, 0.26%)</title><rect x="14.0190%" y="165" width="0.2601%" height="15" fill="rgb(222,85,22)" fg:x="18700" fg:w="347"/><text x="14.2690%" y="175.50"></text></g><g><title>core::intrinsics::write_bytes (347 samples, 0.26%)</title><rect x="14.0190%" y="149" width="0.2601%" height="15" fill="rgb(239,46,39)" fg:x="18700" fg:w="347"/><text x="14.2690%" y="159.50"></text></g><g><title>__memset_avx2_unaligned_erms (318 samples, 0.24%)</title><rect x="14.0408%" y="133" width="0.2384%" height="15" fill="rgb(237,12,29)" fg:x="18729" fg:w="318"/><text x="14.2908%" y="143.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (95 samples, 0.07%)</title><rect x="14.3092%" y="149" width="0.0712%" height="15" fill="rgb(214,77,8)" fg:x="19087" fg:w="95"/><text x="14.5592%" y="159.50"></text></g><g><title>checked_request2size (69 samples, 0.05%)</title><rect x="14.6915%" y="69" width="0.0517%" height="15" fill="rgb(217,168,37)" fg:x="19597" fg:w="69"/><text x="14.9415%" y="79.50"></text></g><g><title>__GI___libc_malloc (539 samples, 0.40%)</title><rect x="14.4629%" y="85" width="0.4041%" height="15" fill="rgb(221,217,23)" fg:x="19292" fg:w="539"/><text x="14.7129%" y="95.50"></text></g><g><title>tcache_get (165 samples, 0.12%)</title><rect x="14.7432%" y="69" width="0.1237%" height="15" fill="rgb(243,229,36)" fg:x="19666" fg:w="165"/><text x="14.9932%" y="79.50"></text></g><g><title>__rdl_alloc (77 samples, 0.06%)</title><rect x="14.8669%" y="85" width="0.0577%" height="15" fill="rgb(251,163,40)" fg:x="19831" fg:w="77"/><text x="15.1169%" y="95.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (814 samples, 0.61%)</title><rect x="14.3804%" y="149" width="0.6102%" height="15" fill="rgb(237,222,12)" fg:x="19182" fg:w="814"/><text x="14.6304%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (814 samples, 0.61%)</title><rect x="14.3804%" y="133" width="0.6102%" height="15" fill="rgb(248,132,6)" fg:x="19182" fg:w="814"/><text x="14.6304%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (814 samples, 0.61%)</title><rect x="14.3804%" y="117" width="0.6102%" height="15" fill="rgb(227,167,50)" fg:x="19182" fg:w="814"/><text x="14.6304%" y="127.50"></text></g><g><title>alloc::alloc::alloc (801 samples, 0.60%)</title><rect x="14.3901%" y="101" width="0.6005%" height="15" fill="rgb(242,84,37)" fg:x="19195" fg:w="801"/><text x="14.6401%" y="111.50"></text></g><g><title>__rust_alloc (88 samples, 0.07%)</title><rect x="14.9247%" y="85" width="0.0660%" height="15" fill="rgb(212,4,50)" fg:x="19908" fg:w="88"/><text x="15.1747%" y="95.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (985 samples, 0.74%)</title><rect x="14.2792%" y="165" width="0.7384%" height="15" fill="rgb(230,228,32)" fg:x="19047" fg:w="985"/><text x="14.5292%" y="175.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (36 samples, 0.03%)</title><rect x="14.9906%" y="149" width="0.0270%" height="15" fill="rgb(248,217,23)" fg:x="19996" fg:w="36"/><text x="15.2406%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1,438 samples, 1.08%)</title><rect x="14.0183%" y="197" width="1.0780%" height="15" fill="rgb(238,197,32)" fg:x="18699" fg:w="1438"/><text x="14.2683%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,437 samples, 1.08%)</title><rect x="14.0190%" y="181" width="1.0773%" height="15" fill="rgb(236,106,1)" fg:x="18700" fg:w="1437"/><text x="14.2690%" y="191.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (105 samples, 0.08%)</title><rect x="15.0176%" y="165" width="0.0787%" height="15" fill="rgb(219,228,13)" fg:x="20032" fg:w="105"/><text x="15.2676%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (9,674 samples, 7.25%)</title><rect x="7.8971%" y="213" width="7.2524%" height="15" fill="rgb(238,30,35)" fg:x="10534" fg:w="9674"/><text x="8.1471%" y="223.50">hashbrown:..</text></g><g><title>hashbrown::raw::is_full (71 samples, 0.05%)</title><rect x="15.0963%" y="197" width="0.0532%" height="15" fill="rgb(236,70,23)" fg:x="20137" fg:w="71"/><text x="15.3463%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (9,946 samples, 7.46%)</title><rect x="7.7630%" y="501" width="7.4563%" height="15" fill="rgb(249,104,48)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="511.50">core::iter..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (9,946 samples, 7.46%)</title><rect x="7.7630%" y="485" width="7.4563%" height="15" fill="rgb(254,117,50)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="495.50">&lt;std::coll..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (9,946 samples, 7.46%)</title><rect x="7.7630%" y="469" width="7.4563%" height="15" fill="rgb(223,152,4)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="479.50">&lt;std::coll..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (9,946 samples, 7.46%)</title><rect x="7.7630%" y="453" width="7.4563%" height="15" fill="rgb(245,6,2)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="463.50">&lt;hashbrown..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (9,946 samples, 7.46%)</title><rect x="7.7630%" y="437" width="7.4563%" height="15" fill="rgb(249,150,24)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="447.50">&lt;hashbrown..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9,946 samples, 7.46%)</title><rect x="7.7630%" y="421" width="7.4563%" height="15" fill="rgb(228,185,42)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="431.50">core::iter..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,946 samples, 7.46%)</title><rect x="7.7630%" y="405" width="7.4563%" height="15" fill="rgb(226,39,33)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="415.50">&lt;core::ite..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,946 samples, 7.46%)</title><rect x="7.7630%" y="389" width="7.4563%" height="15" fill="rgb(221,166,19)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="399.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (9,946 samples, 7.46%)</title><rect x="7.7630%" y="373" width="7.4563%" height="15" fill="rgb(209,109,2)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="383.50">core::iter..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (9,946 samples, 7.46%)</title><rect x="7.7630%" y="357" width="7.4563%" height="15" fill="rgb(252,216,26)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="367.50">core::iter..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (9,946 samples, 7.46%)</title><rect x="7.7630%" y="341" width="7.4563%" height="15" fill="rgb(227,173,36)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="351.50">core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (9,946 samples, 7.46%)</title><rect x="7.7630%" y="325" width="7.4563%" height="15" fill="rgb(209,90,7)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="335.50">core::iter..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (9,946 samples, 7.46%)</title><rect x="7.7630%" y="309" width="7.4563%" height="15" fill="rgb(250,194,11)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="319.50">&lt;hashbrown..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9,946 samples, 7.46%)</title><rect x="7.7630%" y="293" width="7.4563%" height="15" fill="rgb(220,72,50)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="303.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (9,946 samples, 7.46%)</title><rect x="7.7630%" y="277" width="7.4563%" height="15" fill="rgb(222,106,48)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="287.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (9,946 samples, 7.46%)</title><rect x="7.7630%" y="261" width="7.4563%" height="15" fill="rgb(216,220,45)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="271.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9,946 samples, 7.46%)</title><rect x="7.7630%" y="245" width="7.4563%" height="15" fill="rgb(234,112,18)" fg:x="10355" fg:w="9946"/><text x="8.0130%" y="255.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (9,932 samples, 7.45%)</title><rect x="7.7734%" y="229" width="7.4458%" height="15" fill="rgb(206,179,9)" fg:x="10369" fg:w="9932"/><text x="8.0234%" y="239.50">hashbrown:..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (93 samples, 0.07%)</title><rect x="15.1496%" y="213" width="0.0697%" height="15" fill="rgb(215,115,40)" fg:x="20208" fg:w="93"/><text x="15.3996%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (40 samples, 0.03%)</title><rect x="15.2508%" y="405" width="0.0300%" height="15" fill="rgb(222,69,34)" fg:x="20343" fg:w="40"/><text x="15.5008%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (39 samples, 0.03%)</title><rect x="15.2808%" y="405" width="0.0292%" height="15" fill="rgb(209,161,10)" fg:x="20383" fg:w="39"/><text x="15.5308%" y="415.50"></text></g><g><title>checked_request2size (42 samples, 0.03%)</title><rect x="15.5244%" y="373" width="0.0315%" height="15" fill="rgb(217,6,38)" fg:x="20708" fg:w="42"/><text x="15.7744%" y="383.50"></text></g><g><title>__GI___libc_malloc (204 samples, 0.15%)</title><rect x="15.4487%" y="389" width="0.1529%" height="15" fill="rgb(229,229,48)" fg:x="20607" fg:w="204"/><text x="15.6987%" y="399.50"></text></g><g><title>tcache_get (61 samples, 0.05%)</title><rect x="15.5559%" y="373" width="0.0457%" height="15" fill="rgb(225,21,28)" fg:x="20750" fg:w="61"/><text x="15.8059%" y="383.50"></text></g><g><title>__rdl_alloc (56 samples, 0.04%)</title><rect x="15.6016%" y="389" width="0.0420%" height="15" fill="rgb(206,33,13)" fg:x="20811" fg:w="56"/><text x="15.8516%" y="399.50"></text></g><g><title>__rust_alloc (39 samples, 0.03%)</title><rect x="15.6436%" y="389" width="0.0292%" height="15" fill="rgb(242,178,17)" fg:x="20867" fg:w="39"/><text x="15.8936%" y="399.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (10,557 samples, 7.91%)</title><rect x="7.7630%" y="517" width="7.9144%" height="15" fill="rgb(220,162,5)" fg:x="10355" fg:w="10557"/><text x="8.0130%" y="527.50">&lt;kakuro::ga..</text></g><g><title>itertools::Itertools::combinations (611 samples, 0.46%)</title><rect x="15.2193%" y="501" width="0.4581%" height="15" fill="rgb(210,33,43)" fg:x="20301" fg:w="611"/><text x="15.4693%" y="511.50"></text></g><g><title>itertools::combinations::combinations (611 samples, 0.46%)</title><rect x="15.2193%" y="485" width="0.4581%" height="15" fill="rgb(216,116,54)" fg:x="20301" fg:w="611"/><text x="15.4693%" y="495.50"></text></g><g><title>itertools::combinations::LazyBuffer&lt;I&gt;::new (611 samples, 0.46%)</title><rect x="15.2193%" y="469" width="0.4581%" height="15" fill="rgb(249,92,24)" fg:x="20301" fg:w="611"/><text x="15.4693%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (611 samples, 0.46%)</title><rect x="15.2193%" y="453" width="0.4581%" height="15" fill="rgb(231,189,14)" fg:x="20301" fg:w="611"/><text x="15.4693%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (611 samples, 0.46%)</title><rect x="15.2193%" y="437" width="0.4581%" height="15" fill="rgb(230,8,41)" fg:x="20301" fg:w="611"/><text x="15.4693%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (611 samples, 0.46%)</title><rect x="15.2193%" y="421" width="0.4581%" height="15" fill="rgb(249,7,27)" fg:x="20301" fg:w="611"/><text x="15.4693%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (490 samples, 0.37%)</title><rect x="15.3100%" y="405" width="0.3673%" height="15" fill="rgb(232,86,5)" fg:x="20422" fg:w="490"/><text x="15.5600%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (261 samples, 0.20%)</title><rect x="17.0702%" y="165" width="0.1957%" height="15" fill="rgb(224,175,18)" fg:x="22770" fg:w="261"/><text x="17.3202%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (856 samples, 0.64%)</title><rect x="16.8491%" y="181" width="0.6417%" height="15" fill="rgb(220,129,12)" fg:x="22475" fg:w="856"/><text x="17.0991%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (300 samples, 0.22%)</title><rect x="17.2659%" y="165" width="0.2249%" height="15" fill="rgb(210,19,36)" fg:x="23031" fg:w="300"/><text x="17.5159%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,858 samples, 1.39%)</title><rect x="18.2278%" y="165" width="1.3929%" height="15" fill="rgb(219,96,14)" fg:x="24314" fg:w="1858"/><text x="18.4778%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,620 samples, 2.71%)</title><rect x="17.4908%" y="181" width="2.7138%" height="15" fill="rgb(249,106,1)" fg:x="23331" fg:w="3620"/><text x="17.7408%" y="191.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (779 samples, 0.58%)</title><rect x="19.6207%" y="165" width="0.5840%" height="15" fill="rgb(249,155,20)" fg:x="26172" fg:w="779"/><text x="19.8707%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5,468 samples, 4.10%)</title><rect x="16.1062%" y="229" width="4.0993%" height="15" fill="rgb(244,168,9)" fg:x="21484" fg:w="5468"/><text x="16.3562%" y="239.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5,468 samples, 4.10%)</title><rect x="16.1062%" y="213" width="4.0993%" height="15" fill="rgb(216,23,50)" fg:x="21484" fg:w="5468"/><text x="16.3562%" y="223.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5,468 samples, 4.10%)</title><rect x="16.1062%" y="197" width="4.0993%" height="15" fill="rgb(224,219,20)" fg:x="21484" fg:w="5468"/><text x="16.3562%" y="207.50">&lt;cor..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (697 samples, 0.52%)</title><rect x="20.2054%" y="229" width="0.5225%" height="15" fill="rgb(222,156,15)" fg:x="26952" fg:w="697"/><text x="20.4554%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (380 samples, 0.28%)</title><rect x="20.4431%" y="213" width="0.2849%" height="15" fill="rgb(231,97,17)" fg:x="27269" fg:w="380"/><text x="20.6931%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (322 samples, 0.24%)</title><rect x="20.4865%" y="197" width="0.2414%" height="15" fill="rgb(218,70,48)" fg:x="27327" fg:w="322"/><text x="20.7365%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (322 samples, 0.24%)</title><rect x="20.4865%" y="181" width="0.2414%" height="15" fill="rgb(212,196,52)" fg:x="27327" fg:w="322"/><text x="20.7365%" y="191.50"></text></g><g><title>hashbrown::map::make_insert_hash (8,309 samples, 6.23%)</title><rect x="15.6781%" y="261" width="6.2291%" height="15" fill="rgb(243,203,18)" fg:x="20913" fg:w="8309"/><text x="15.9281%" y="271.50">hashbrow..</text></g><g><title>core::hash::BuildHasher::hash_one (8,309 samples, 6.23%)</title><rect x="15.6781%" y="245" width="6.2291%" height="15" fill="rgb(252,125,41)" fg:x="20913" fg:w="8309"/><text x="15.9281%" y="255.50">core::ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,573 samples, 1.18%)</title><rect x="20.7279%" y="229" width="1.1792%" height="15" fill="rgb(223,180,33)" fg:x="27649" fg:w="1573"/><text x="20.9779%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1,573 samples, 1.18%)</title><rect x="20.7279%" y="213" width="1.1792%" height="15" fill="rgb(254,159,46)" fg:x="27649" fg:w="1573"/><text x="20.9779%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,573 samples, 1.18%)</title><rect x="20.7279%" y="197" width="1.1792%" height="15" fill="rgb(254,38,10)" fg:x="27649" fg:w="1573"/><text x="20.9779%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,239 samples, 0.93%)</title><rect x="20.9783%" y="181" width="0.9289%" height="15" fill="rgb(208,217,32)" fg:x="27983" fg:w="1239"/><text x="21.2283%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,175 samples, 0.88%)</title><rect x="21.0263%" y="165" width="0.8809%" height="15" fill="rgb(221,120,13)" fg:x="28047" fg:w="1175"/><text x="21.2763%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,175 samples, 0.88%)</title><rect x="21.0263%" y="149" width="0.8809%" height="15" fill="rgb(246,54,52)" fg:x="28047" fg:w="1175"/><text x="21.2763%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (666 samples, 0.50%)</title><rect x="21.4079%" y="133" width="0.4993%" height="15" fill="rgb(242,34,25)" fg:x="28556" fg:w="666"/><text x="21.6579%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (278 samples, 0.21%)</title><rect x="22.1156%" y="245" width="0.2084%" height="15" fill="rgb(247,209,9)" fg:x="29500" fg:w="278"/><text x="22.3656%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (278 samples, 0.21%)</title><rect x="22.1156%" y="229" width="0.2084%" height="15" fill="rgb(228,71,26)" fg:x="29500" fg:w="278"/><text x="22.3656%" y="239.50"></text></g><g><title>core::ptr::write (278 samples, 0.21%)</title><rect x="22.1156%" y="213" width="0.2084%" height="15" fill="rgb(222,145,49)" fg:x="29500" fg:w="278"/><text x="22.3656%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (136 samples, 0.10%)</title><rect x="23.0819%" y="229" width="0.1020%" height="15" fill="rgb(218,121,17)" fg:x="30789" fg:w="136"/><text x="23.3319%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (448 samples, 0.34%)</title><rect x="23.1839%" y="229" width="0.3359%" height="15" fill="rgb(244,50,7)" fg:x="30925" fg:w="448"/><text x="23.4339%" y="239.50"></text></g><g><title>hashbrown::raw::is_full (1,854 samples, 1.39%)</title><rect x="23.5198%" y="229" width="1.3899%" height="15" fill="rgb(246,229,37)" fg:x="31373" fg:w="1854"/><text x="23.7698%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (3,473 samples, 2.60%)</title><rect x="22.3240%" y="245" width="2.6036%" height="15" fill="rgb(225,18,5)" fg:x="29778" fg:w="3473"/><text x="22.5740%" y="255.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (24 samples, 0.02%)</title><rect x="24.9097%" y="229" width="0.0180%" height="15" fill="rgb(213,204,8)" fg:x="33227" fg:w="24"/><text x="25.1597%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.02%)</title><rect x="24.9097%" y="213" width="0.0180%" height="15" fill="rgb(238,103,6)" fg:x="33227" fg:w="24"/><text x="25.1597%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (84 samples, 0.06%)</title><rect x="25.5754%" y="213" width="0.0630%" height="15" fill="rgb(222,25,35)" fg:x="34115" fg:w="84"/><text x="25.8254%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (13,605 samples, 10.20%)</title><rect x="15.6773%" y="421" width="10.1994%" height="15" fill="rgb(213,203,35)" fg:x="20912" fg:w="13605"/><text x="15.9273%" y="431.50">core::iter::tra..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13,605 samples, 10.20%)</title><rect x="15.6773%" y="405" width="10.1994%" height="15" fill="rgb(221,79,53)" fg:x="20912" fg:w="13605"/><text x="15.9273%" y="415.50">&lt;core::iter::ad..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (13,605 samples, 10.20%)</title><rect x="15.6773%" y="389" width="10.1994%" height="15" fill="rgb(243,200,35)" fg:x="20912" fg:w="13605"/><text x="15.9273%" y="399.50">core::iter::ran..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (13,605 samples, 10.20%)</title><rect x="15.6773%" y="373" width="10.1994%" height="15" fill="rgb(248,60,25)" fg:x="20912" fg:w="13605"/><text x="15.9273%" y="383.50">core::iter::ran..</text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (13,605 samples, 10.20%)</title><rect x="15.6773%" y="357" width="10.1994%" height="15" fill="rgb(227,53,46)" fg:x="20912" fg:w="13605"/><text x="15.9273%" y="367.50">&lt;core::ops::ran..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (13,605 samples, 10.20%)</title><rect x="15.6773%" y="341" width="10.1994%" height="15" fill="rgb(216,120,32)" fg:x="20912" fg:w="13605"/><text x="15.9273%" y="351.50">core::iter::ran..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (13,605 samples, 10.20%)</title><rect x="15.6773%" y="325" width="10.1994%" height="15" fill="rgb(220,134,1)" fg:x="20912" fg:w="13605"/><text x="15.9273%" y="335.50">core::iter::ada..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (13,605 samples, 10.20%)</title><rect x="15.6773%" y="309" width="10.1994%" height="15" fill="rgb(237,168,5)" fg:x="20912" fg:w="13605"/><text x="15.9273%" y="319.50">core::iter::tra..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (13,605 samples, 10.20%)</title><rect x="15.6773%" y="293" width="10.1994%" height="15" fill="rgb(231,100,33)" fg:x="20912" fg:w="13605"/><text x="15.9273%" y="303.50">&lt;hashbrown::map..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13,605 samples, 10.20%)</title><rect x="15.6773%" y="277" width="10.1994%" height="15" fill="rgb(236,177,47)" fg:x="20912" fg:w="13605"/><text x="15.9273%" y="287.50">hashbrown::map:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (5,295 samples, 3.97%)</title><rect x="21.9072%" y="261" width="3.9696%" height="15" fill="rgb(235,7,49)" fg:x="29222" fg:w="5295"/><text x="22.1572%" y="271.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (1,266 samples, 0.95%)</title><rect x="24.9277%" y="245" width="0.9491%" height="15" fill="rgb(232,119,22)" fg:x="33251" fg:w="1266"/><text x="25.1777%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (402 samples, 0.30%)</title><rect x="25.5754%" y="229" width="0.3014%" height="15" fill="rgb(254,73,53)" fg:x="34115" fg:w="402"/><text x="25.8254%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (318 samples, 0.24%)</title><rect x="25.6384%" y="213" width="0.2384%" height="15" fill="rgb(251,35,20)" fg:x="34199" fg:w="318"/><text x="25.8884%" y="223.50"></text></g><g><title>core::mem::swap (911 samples, 0.68%)</title><rect x="25.9990%" y="341" width="0.6830%" height="15" fill="rgb(241,119,20)" fg:x="34680" fg:w="911"/><text x="26.2490%" y="351.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (911 samples, 0.68%)</title><rect x="25.9990%" y="325" width="0.6830%" height="15" fill="rgb(207,102,14)" fg:x="34680" fg:w="911"/><text x="26.2490%" y="335.50"></text></g><g><title>core::ptr::swap_nonoverlapping (911 samples, 0.68%)</title><rect x="25.9990%" y="309" width="0.6830%" height="15" fill="rgb(248,201,50)" fg:x="34680" fg:w="911"/><text x="26.2490%" y="319.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (911 samples, 0.68%)</title><rect x="25.9990%" y="293" width="0.6830%" height="15" fill="rgb(222,185,44)" fg:x="34680" fg:w="911"/><text x="26.2490%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (911 samples, 0.68%)</title><rect x="25.9990%" y="277" width="0.6830%" height="15" fill="rgb(218,107,18)" fg:x="34680" fg:w="911"/><text x="26.2490%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (213 samples, 0.16%)</title><rect x="26.6827%" y="309" width="0.1597%" height="15" fill="rgb(237,177,39)" fg:x="35592" fg:w="213"/><text x="26.9327%" y="319.50"></text></g><g><title>core::intrinsics::write_bytes (213 samples, 0.16%)</title><rect x="26.6827%" y="293" width="0.1597%" height="15" fill="rgb(246,69,6)" fg:x="35592" fg:w="213"/><text x="26.9327%" y="303.50"></text></g><g><title>__memset_avx2_unaligned_erms (212 samples, 0.16%)</title><rect x="26.6834%" y="277" width="0.1589%" height="15" fill="rgb(234,208,37)" fg:x="35593" fg:w="212"/><text x="26.9334%" y="287.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (162 samples, 0.12%)</title><rect x="26.8431%" y="293" width="0.1214%" height="15" fill="rgb(225,4,6)" fg:x="35806" fg:w="162"/><text x="27.0931%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (41 samples, 0.03%)</title><rect x="26.9338%" y="277" width="0.0307%" height="15" fill="rgb(233,45,0)" fg:x="35927" fg:w="41"/><text x="27.1838%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (41 samples, 0.03%)</title><rect x="26.9338%" y="261" width="0.0307%" height="15" fill="rgb(226,136,5)" fg:x="35927" fg:w="41"/><text x="27.1838%" y="271.50"></text></g><g><title>checked_request2size (32 samples, 0.02%)</title><rect x="27.3131%" y="213" width="0.0240%" height="15" fill="rgb(211,91,47)" fg:x="36433" fg:w="32"/><text x="27.5631%" y="223.50"></text></g><g><title>__GI___libc_malloc (593 samples, 0.44%)</title><rect x="27.0523%" y="229" width="0.4446%" height="15" fill="rgb(242,88,51)" fg:x="36085" fg:w="593"/><text x="27.3023%" y="239.50"></text></g><g><title>tcache_get (213 samples, 0.16%)</title><rect x="27.3371%" y="213" width="0.1597%" height="15" fill="rgb(230,91,28)" fg:x="36465" fg:w="213"/><text x="27.5871%" y="223.50"></text></g><g><title>__rdl_alloc (39 samples, 0.03%)</title><rect x="27.4968%" y="229" width="0.0292%" height="15" fill="rgb(254,186,29)" fg:x="36678" fg:w="39"/><text x="27.7468%" y="239.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (785 samples, 0.59%)</title><rect x="26.9645%" y="293" width="0.5885%" height="15" fill="rgb(238,6,4)" fg:x="35968" fg:w="785"/><text x="27.2145%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (785 samples, 0.59%)</title><rect x="26.9645%" y="277" width="0.5885%" height="15" fill="rgb(221,151,16)" fg:x="35968" fg:w="785"/><text x="27.2145%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (785 samples, 0.59%)</title><rect x="26.9645%" y="261" width="0.5885%" height="15" fill="rgb(251,143,52)" fg:x="35968" fg:w="785"/><text x="27.2145%" y="271.50"></text></g><g><title>alloc::alloc::alloc (752 samples, 0.56%)</title><rect x="26.9893%" y="245" width="0.5638%" height="15" fill="rgb(206,90,15)" fg:x="36001" fg:w="752"/><text x="27.2393%" y="255.50"></text></g><g><title>__rust_alloc (36 samples, 0.03%)</title><rect x="27.5261%" y="229" width="0.0270%" height="15" fill="rgb(218,35,8)" fg:x="36717" fg:w="36"/><text x="27.7761%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (983 samples, 0.74%)</title><rect x="26.8423%" y="309" width="0.7369%" height="15" fill="rgb(239,215,6)" fg:x="35805" fg:w="983"/><text x="27.0923%" y="319.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (35 samples, 0.03%)</title><rect x="27.5530%" y="293" width="0.0262%" height="15" fill="rgb(245,116,39)" fg:x="36753" fg:w="35"/><text x="27.8030%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1,814 samples, 1.36%)</title><rect x="26.6819%" y="341" width="1.3599%" height="15" fill="rgb(242,65,28)" fg:x="35591" fg:w="1814"/><text x="26.9319%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,813 samples, 1.36%)</title><rect x="26.6827%" y="325" width="1.3592%" height="15" fill="rgb(252,132,53)" fg:x="35592" fg:w="1813"/><text x="26.9327%" y="335.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (617 samples, 0.46%)</title><rect x="27.5793%" y="309" width="0.4626%" height="15" fill="rgb(224,159,50)" fg:x="36788" fg:w="617"/><text x="27.8293%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (327 samples, 0.25%)</title><rect x="27.7967%" y="293" width="0.2451%" height="15" fill="rgb(224,93,4)" fg:x="37078" fg:w="327"/><text x="28.0467%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (327 samples, 0.25%)</title><rect x="27.7967%" y="277" width="0.2451%" height="15" fill="rgb(208,81,34)" fg:x="37078" fg:w="327"/><text x="28.0467%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (2,808 samples, 2.11%)</title><rect x="25.9382%" y="357" width="2.1051%" height="15" fill="rgb(233,92,54)" fg:x="34599" fg:w="2808"/><text x="26.1882%" y="367.50">h..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16,530 samples, 12.39%)</title><rect x="15.6773%" y="485" width="12.3922%" height="15" fill="rgb(237,21,14)" fg:x="20912" fg:w="16530"/><text x="15.9273%" y="495.50">&lt;std::collections::..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (16,530 samples, 12.39%)</title><rect x="15.6773%" y="469" width="12.3922%" height="15" fill="rgb(249,128,51)" fg:x="20912" fg:w="16530"/><text x="15.9273%" y="479.50">&lt;std::collections::..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (16,530 samples, 12.39%)</title><rect x="15.6773%" y="453" width="12.3922%" height="15" fill="rgb(223,129,24)" fg:x="20912" fg:w="16530"/><text x="15.9273%" y="463.50">&lt;hashbrown::set::Ha..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (16,530 samples, 12.39%)</title><rect x="15.6773%" y="437" width="12.3922%" height="15" fill="rgb(231,168,25)" fg:x="20912" fg:w="16530"/><text x="15.9273%" y="447.50">&lt;hashbrown::map::Ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,925 samples, 2.19%)</title><rect x="25.8768%" y="421" width="2.1928%" height="15" fill="rgb(224,39,20)" fg:x="34517" fg:w="2925"/><text x="26.1268%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,925 samples, 2.19%)</title><rect x="25.8768%" y="405" width="2.1928%" height="15" fill="rgb(225,152,53)" fg:x="34517" fg:w="2925"/><text x="26.1268%" y="415.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,925 samples, 2.19%)</title><rect x="25.8768%" y="389" width="2.1928%" height="15" fill="rgb(252,17,24)" fg:x="34517" fg:w="2925"/><text x="26.1268%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,893 samples, 2.17%)</title><rect x="25.9007%" y="373" width="2.1688%" height="15" fill="rgb(250,114,30)" fg:x="34549" fg:w="2893"/><text x="26.1507%" y="383.50">h..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (35 samples, 0.03%)</title><rect x="28.0433%" y="357" width="0.0262%" height="15" fill="rgb(229,5,4)" fg:x="37407" fg:w="35"/><text x="28.2933%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (546 samples, 0.41%)</title><rect x="29.8561%" y="165" width="0.4093%" height="15" fill="rgb(225,176,49)" fg:x="39825" fg:w="546"/><text x="30.1061%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,299 samples, 0.97%)</title><rect x="29.5442%" y="181" width="0.9738%" height="15" fill="rgb(224,221,49)" fg:x="39409" fg:w="1299"/><text x="29.7942%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (337 samples, 0.25%)</title><rect x="30.2654%" y="165" width="0.2526%" height="15" fill="rgb(253,169,27)" fg:x="40371" fg:w="337"/><text x="30.5154%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,911 samples, 2.18%)</title><rect x="31.0128%" y="165" width="2.1823%" height="15" fill="rgb(211,206,16)" fg:x="41368" fg:w="2911"/><text x="31.2628%" y="175.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (7,401 samples, 5.55%)</title><rect x="28.4114%" y="229" width="5.5484%" height="15" fill="rgb(244,87,35)" fg:x="37898" fg:w="7401"/><text x="28.6614%" y="239.50">&lt;std::c..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7,401 samples, 5.55%)</title><rect x="28.4114%" y="213" width="5.5484%" height="15" fill="rgb(246,28,10)" fg:x="37898" fg:w="7401"/><text x="28.6614%" y="223.50">&lt;core::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7,401 samples, 5.55%)</title><rect x="28.4114%" y="197" width="5.5484%" height="15" fill="rgb(229,12,44)" fg:x="37898" fg:w="7401"/><text x="28.6614%" y="207.50">&lt;core::..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4,591 samples, 3.44%)</title><rect x="30.5180%" y="181" width="3.4418%" height="15" fill="rgb(210,145,37)" fg:x="40708" fg:w="4591"/><text x="30.7680%" y="191.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,020 samples, 0.76%)</title><rect x="33.1951%" y="165" width="0.7647%" height="15" fill="rgb(227,112,52)" fg:x="44279" fg:w="1020"/><text x="33.4451%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (881 samples, 0.66%)</title><rect x="33.9598%" y="229" width="0.6605%" height="15" fill="rgb(238,155,34)" fg:x="45299" fg:w="881"/><text x="34.2098%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (712 samples, 0.53%)</title><rect x="34.0865%" y="213" width="0.5338%" height="15" fill="rgb(239,226,36)" fg:x="45468" fg:w="712"/><text x="34.3365%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (555 samples, 0.42%)</title><rect x="34.2042%" y="197" width="0.4161%" height="15" fill="rgb(230,16,23)" fg:x="45625" fg:w="555"/><text x="34.4542%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (555 samples, 0.42%)</title><rect x="34.2042%" y="181" width="0.4161%" height="15" fill="rgb(236,171,36)" fg:x="45625" fg:w="555"/><text x="34.4542%" y="191.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,131 samples, 8.34%)</title><rect x="28.0696%" y="341" width="8.3447%" height="15" fill="rgb(221,22,14)" fg:x="37442" fg:w="11131"/><text x="28.3196%" y="351.50">&lt;std::collec..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (11,131 samples, 8.34%)</title><rect x="28.0696%" y="325" width="8.3447%" height="15" fill="rgb(242,43,11)" fg:x="37442" fg:w="11131"/><text x="28.3196%" y="335.50">std::collect..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (11,131 samples, 8.34%)</title><rect x="28.0696%" y="309" width="8.3447%" height="15" fill="rgb(232,69,23)" fg:x="37442" fg:w="11131"/><text x="28.3196%" y="319.50">hashbrown::s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (11,131 samples, 8.34%)</title><rect x="28.0696%" y="293" width="8.3447%" height="15" fill="rgb(216,180,54)" fg:x="37442" fg:w="11131"/><text x="28.3196%" y="303.50">hashbrown::m..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (11,131 samples, 8.34%)</title><rect x="28.0696%" y="277" width="8.3447%" height="15" fill="rgb(216,5,24)" fg:x="37442" fg:w="11131"/><text x="28.3196%" y="287.50">hashbrown::m..</text></g><g><title>hashbrown::map::make_hash (11,131 samples, 8.34%)</title><rect x="28.0696%" y="261" width="8.3447%" height="15" fill="rgb(225,89,9)" fg:x="37442" fg:w="11131"/><text x="28.3196%" y="271.50">hashbrown::m..</text></g><g><title>core::hash::BuildHasher::hash_one (11,131 samples, 8.34%)</title><rect x="28.0696%" y="245" width="8.3447%" height="15" fill="rgb(243,75,33)" fg:x="37442" fg:w="11131"/><text x="28.3196%" y="255.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,393 samples, 1.79%)</title><rect x="34.6203%" y="229" width="1.7940%" height="15" fill="rgb(247,141,45)" fg:x="46180" fg:w="2393"/><text x="34.8703%" y="239.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (2,393 samples, 1.79%)</title><rect x="34.6203%" y="213" width="1.7940%" height="15" fill="rgb(232,177,36)" fg:x="46180" fg:w="2393"/><text x="34.8703%" y="223.50">c..</text></g><g><title>core::hash::Hasher::write_u8 (2,393 samples, 1.79%)</title><rect x="34.6203%" y="197" width="1.7940%" height="15" fill="rgb(219,125,36)" fg:x="46180" fg:w="2393"/><text x="34.8703%" y="207.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,145 samples, 1.61%)</title><rect x="34.8062%" y="181" width="1.6081%" height="15" fill="rgb(227,94,9)" fg:x="46428" fg:w="2145"/><text x="35.0562%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,060 samples, 1.54%)</title><rect x="34.8699%" y="165" width="1.5443%" height="15" fill="rgb(240,34,52)" fg:x="46513" fg:w="2060"/><text x="35.1199%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,060 samples, 1.54%)</title><rect x="34.8699%" y="149" width="1.5443%" height="15" fill="rgb(216,45,12)" fg:x="46513" fg:w="2060"/><text x="35.1199%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (676 samples, 0.51%)</title><rect x="35.9075%" y="133" width="0.5068%" height="15" fill="rgb(246,21,19)" fg:x="47897" fg:w="676"/><text x="36.1575%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (335 samples, 0.25%)</title><rect x="37.8642%" y="165" width="0.2511%" height="15" fill="rgb(213,98,42)" fg:x="50507" fg:w="335"/><text x="38.1142%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (951 samples, 0.71%)</title><rect x="37.5808%" y="181" width="0.7129%" height="15" fill="rgb(250,136,47)" fg:x="50129" fg:w="951"/><text x="37.8308%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (238 samples, 0.18%)</title><rect x="38.1153%" y="165" width="0.1784%" height="15" fill="rgb(251,124,27)" fg:x="50842" fg:w="238"/><text x="38.3653%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,443 samples, 1.83%)</title><rect x="38.7001%" y="165" width="1.8315%" height="15" fill="rgb(229,180,14)" fg:x="51622" fg:w="2443"/><text x="38.9501%" y="175.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5,688 samples, 4.26%)</title><rect x="36.7621%" y="229" width="4.2642%" height="15" fill="rgb(245,216,25)" fg:x="49037" fg:w="5688"/><text x="37.0121%" y="239.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5,688 samples, 4.26%)</title><rect x="36.7621%" y="213" width="4.2642%" height="15" fill="rgb(251,43,5)" fg:x="49037" fg:w="5688"/><text x="37.0121%" y="223.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5,688 samples, 4.26%)</title><rect x="36.7621%" y="197" width="4.2642%" height="15" fill="rgb(250,128,24)" fg:x="49037" fg:w="5688"/><text x="37.0121%" y="207.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,645 samples, 2.73%)</title><rect x="38.2937%" y="181" width="2.7326%" height="15" fill="rgb(217,117,27)" fg:x="51080" fg:w="3645"/><text x="38.5437%" y="191.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (660 samples, 0.49%)</title><rect x="40.5315%" y="165" width="0.4948%" height="15" fill="rgb(245,147,4)" fg:x="54065" fg:w="660"/><text x="40.7815%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (285 samples, 0.21%)</title><rect x="41.0263%" y="229" width="0.2137%" height="15" fill="rgb(242,201,35)" fg:x="54725" fg:w="285"/><text x="41.2763%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (270 samples, 0.20%)</title><rect x="41.0376%" y="213" width="0.2024%" height="15" fill="rgb(218,181,1)" fg:x="54740" fg:w="270"/><text x="41.2876%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (63 samples, 0.05%)</title><rect x="41.1927%" y="197" width="0.0472%" height="15" fill="rgb(222,6,29)" fg:x="54947" fg:w="63"/><text x="41.4427%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (63 samples, 0.05%)</title><rect x="41.1927%" y="181" width="0.0472%" height="15" fill="rgb(208,186,3)" fg:x="54947" fg:w="63"/><text x="41.4427%" y="191.50"></text></g><g><title>hashbrown::map::make_insert_hash (7,851 samples, 5.89%)</title><rect x="36.4143%" y="261" width="5.8857%" height="15" fill="rgb(216,36,26)" fg:x="48573" fg:w="7851"/><text x="36.6643%" y="271.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (7,851 samples, 5.89%)</title><rect x="36.4143%" y="245" width="5.8857%" height="15" fill="rgb(248,201,23)" fg:x="48573" fg:w="7851"/><text x="36.6643%" y="255.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,414 samples, 1.06%)</title><rect x="41.2400%" y="229" width="1.0600%" height="15" fill="rgb(251,170,31)" fg:x="55010" fg:w="1414"/><text x="41.4900%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1,414 samples, 1.06%)</title><rect x="41.2400%" y="213" width="1.0600%" height="15" fill="rgb(207,110,25)" fg:x="55010" fg:w="1414"/><text x="41.4900%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,414 samples, 1.06%)</title><rect x="41.2400%" y="197" width="1.0600%" height="15" fill="rgb(250,54,15)" fg:x="55010" fg:w="1414"/><text x="41.4900%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,200 samples, 0.90%)</title><rect x="41.4004%" y="181" width="0.8996%" height="15" fill="rgb(227,68,33)" fg:x="55224" fg:w="1200"/><text x="41.6504%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,033 samples, 0.77%)</title><rect x="41.5256%" y="165" width="0.7744%" height="15" fill="rgb(238,34,41)" fg:x="55391" fg:w="1033"/><text x="41.7756%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,033 samples, 0.77%)</title><rect x="41.5256%" y="149" width="0.7744%" height="15" fill="rgb(220,11,15)" fg:x="55391" fg:w="1033"/><text x="41.7756%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (295 samples, 0.22%)</title><rect x="42.0789%" y="133" width="0.2212%" height="15" fill="rgb(246,111,35)" fg:x="56129" fg:w="295"/><text x="42.3289%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (101 samples, 0.08%)</title><rect x="42.7626%" y="245" width="0.0757%" height="15" fill="rgb(209,88,53)" fg:x="57041" fg:w="101"/><text x="43.0126%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (101 samples, 0.08%)</title><rect x="42.7626%" y="229" width="0.0757%" height="15" fill="rgb(231,185,47)" fg:x="57041" fg:w="101"/><text x="43.0126%" y="239.50"></text></g><g><title>core::ptr::write (101 samples, 0.08%)</title><rect x="42.7626%" y="213" width="0.0757%" height="15" fill="rgb(233,154,1)" fg:x="57041" fg:w="101"/><text x="43.0126%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (171 samples, 0.13%)</title><rect x="42.8383%" y="245" width="0.1282%" height="15" fill="rgb(225,15,46)" fg:x="57142" fg:w="171"/><text x="43.0883%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (166 samples, 0.12%)</title><rect x="42.8420%" y="229" width="0.1244%" height="15" fill="rgb(211,135,41)" fg:x="57147" fg:w="166"/><text x="43.0920%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (209 samples, 0.16%)</title><rect x="44.2402%" y="229" width="0.1567%" height="15" fill="rgb(208,54,0)" fg:x="59012" fg:w="209"/><text x="44.4902%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (539 samples, 0.40%)</title><rect x="44.3969%" y="229" width="0.4041%" height="15" fill="rgb(244,136,14)" fg:x="59221" fg:w="539"/><text x="44.6469%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (144 samples, 0.11%)</title><rect x="44.8010%" y="229" width="0.1080%" height="15" fill="rgb(241,56,14)" fg:x="59760" fg:w="144"/><text x="45.0510%" y="239.50"></text></g><g><title>hashbrown::raw::is_full (1,459 samples, 1.09%)</title><rect x="44.9089%" y="229" width="1.0938%" height="15" fill="rgb(205,80,24)" fg:x="59904" fg:w="1459"/><text x="45.1589%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (33 samples, 0.02%)</title><rect x="46.0027%" y="229" width="0.0247%" height="15" fill="rgb(220,57,4)" fg:x="61363" fg:w="33"/><text x="46.2527%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (33 samples, 0.02%)</title><rect x="46.0027%" y="213" width="0.0247%" height="15" fill="rgb(226,193,50)" fg:x="61363" fg:w="33"/><text x="46.2527%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.02%)</title><rect x="46.0027%" y="197" width="0.0247%" height="15" fill="rgb(231,168,22)" fg:x="61363" fg:w="33"/><text x="46.2527%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (4,828 samples, 3.62%)</title><rect x="42.9665%" y="245" width="3.6195%" height="15" fill="rgb(254,215,14)" fg:x="57313" fg:w="4828"/><text x="43.2165%" y="255.50">hash..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (745 samples, 0.56%)</title><rect x="46.0274%" y="229" width="0.5585%" height="15" fill="rgb(211,115,16)" fg:x="61396" fg:w="745"/><text x="46.2774%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (745 samples, 0.56%)</title><rect x="46.0274%" y="213" width="0.5585%" height="15" fill="rgb(236,210,16)" fg:x="61396" fg:w="745"/><text x="46.2774%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (130 samples, 0.10%)</title><rect x="46.9660%" y="213" width="0.0975%" height="15" fill="rgb(221,94,12)" fg:x="62648" fg:w="130"/><text x="47.2160%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25,494 samples, 19.11%)</title><rect x="28.0696%" y="373" width="19.1124%" height="15" fill="rgb(235,218,49)" fg:x="37442" fg:w="25494"/><text x="28.3196%" y="383.50">&lt;core::iter::adapters::map::Ma..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (25,494 samples, 19.11%)</title><rect x="28.0696%" y="357" width="19.1124%" height="15" fill="rgb(217,114,14)" fg:x="37442" fg:w="25494"/><text x="28.3196%" y="367.50">core::iter::traits::iterator::..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (14,363 samples, 10.77%)</title><rect x="36.4143%" y="341" width="10.7677%" height="15" fill="rgb(216,145,22)" fg:x="48573" fg:w="14363"/><text x="36.6643%" y="351.50">core::iter::adap..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (14,363 samples, 10.77%)</title><rect x="36.4143%" y="325" width="10.7677%" height="15" fill="rgb(217,112,39)" fg:x="48573" fg:w="14363"/><text x="36.6643%" y="335.50">core::iter::adap..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (14,363 samples, 10.77%)</title><rect x="36.4143%" y="309" width="10.7677%" height="15" fill="rgb(225,85,32)" fg:x="48573" fg:w="14363"/><text x="36.6643%" y="319.50">core::iter::trai..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (14,363 samples, 10.77%)</title><rect x="36.4143%" y="293" width="10.7677%" height="15" fill="rgb(245,209,47)" fg:x="48573" fg:w="14363"/><text x="36.6643%" y="303.50">&lt;hashbrown::map:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14,363 samples, 10.77%)</title><rect x="36.4143%" y="277" width="10.7677%" height="15" fill="rgb(218,220,15)" fg:x="48573" fg:w="14363"/><text x="36.6643%" y="287.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (6,512 samples, 4.88%)</title><rect x="42.3000%" y="261" width="4.8819%" height="15" fill="rgb(222,202,31)" fg:x="56424" fg:w="6512"/><text x="42.5500%" y="271.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (795 samples, 0.60%)</title><rect x="46.5860%" y="245" width="0.5960%" height="15" fill="rgb(243,203,4)" fg:x="62141" fg:w="795"/><text x="46.8360%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (288 samples, 0.22%)</title><rect x="46.9660%" y="229" width="0.2159%" height="15" fill="rgb(237,92,17)" fg:x="62648" fg:w="288"/><text x="47.2160%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (158 samples, 0.12%)</title><rect x="47.0635%" y="213" width="0.1184%" height="15" fill="rgb(231,119,7)" fg:x="62778" fg:w="158"/><text x="47.3135%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (200 samples, 0.15%)</title><rect x="48.7001%" y="197" width="0.1499%" height="15" fill="rgb(237,82,41)" fg:x="64961" fg:w="200"/><text x="48.9501%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (505 samples, 0.38%)</title><rect x="48.5801%" y="213" width="0.3786%" height="15" fill="rgb(226,81,48)" fg:x="64801" fg:w="505"/><text x="48.8301%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (145 samples, 0.11%)</title><rect x="48.8500%" y="197" width="0.1087%" height="15" fill="rgb(234,70,51)" fg:x="65161" fg:w="145"/><text x="49.1000%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,288 samples, 0.97%)</title><rect x="49.1506%" y="197" width="0.9656%" height="15" fill="rgb(251,86,4)" fg:x="65562" fg:w="1288"/><text x="49.4006%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4,196 samples, 3.15%)</title><rect x="47.2847%" y="261" width="3.1457%" height="15" fill="rgb(244,144,28)" fg:x="63073" fg:w="4196"/><text x="47.5347%" y="271.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4,196 samples, 3.15%)</title><rect x="47.2847%" y="245" width="3.1457%" height="15" fill="rgb(232,161,39)" fg:x="63073" fg:w="4196"/><text x="47.5347%" y="255.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4,196 samples, 3.15%)</title><rect x="47.2847%" y="229" width="3.1457%" height="15" fill="rgb(247,34,51)" fg:x="63073" fg:w="4196"/><text x="47.5347%" y="239.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,963 samples, 1.47%)</title><rect x="48.9587%" y="213" width="1.4716%" height="15" fill="rgb(225,132,2)" fg:x="65306" fg:w="1963"/><text x="49.2087%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (419 samples, 0.31%)</title><rect x="50.1162%" y="197" width="0.3141%" height="15" fill="rgb(209,159,44)" fg:x="66850" fg:w="419"/><text x="50.3662%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (371 samples, 0.28%)</title><rect x="50.4303%" y="261" width="0.2781%" height="15" fill="rgb(251,214,1)" fg:x="67269" fg:w="371"/><text x="50.6803%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (137 samples, 0.10%)</title><rect x="50.6057%" y="245" width="0.1027%" height="15" fill="rgb(247,84,47)" fg:x="67503" fg:w="137"/><text x="50.8557%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (137 samples, 0.10%)</title><rect x="50.6057%" y="229" width="0.1027%" height="15" fill="rgb(240,111,43)" fg:x="67503" fg:w="137"/><text x="50.8557%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (137 samples, 0.10%)</title><rect x="50.6057%" y="213" width="0.1027%" height="15" fill="rgb(215,214,35)" fg:x="67503" fg:w="137"/><text x="50.8557%" y="223.50"></text></g><g><title>hashbrown::map::make_insert_hash (5,918 samples, 4.44%)</title><rect x="47.1819%" y="293" width="4.4366%" height="15" fill="rgb(248,207,23)" fg:x="62936" fg:w="5918"/><text x="47.4319%" y="303.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (5,918 samples, 4.44%)</title><rect x="47.1819%" y="277" width="4.4366%" height="15" fill="rgb(214,186,4)" fg:x="62936" fg:w="5918"/><text x="47.4319%" y="287.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,214 samples, 0.91%)</title><rect x="50.7084%" y="261" width="0.9101%" height="15" fill="rgb(220,133,22)" fg:x="67640" fg:w="1214"/><text x="50.9584%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1,214 samples, 0.91%)</title><rect x="50.7084%" y="245" width="0.9101%" height="15" fill="rgb(239,134,19)" fg:x="67640" fg:w="1214"/><text x="50.9584%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,214 samples, 0.91%)</title><rect x="50.7084%" y="229" width="0.9101%" height="15" fill="rgb(250,140,9)" fg:x="67640" fg:w="1214"/><text x="50.9584%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,186 samples, 0.89%)</title><rect x="50.7294%" y="213" width="0.8891%" height="15" fill="rgb(225,59,14)" fg:x="67668" fg:w="1186"/><text x="50.9794%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,170 samples, 0.88%)</title><rect x="50.7414%" y="197" width="0.8771%" height="15" fill="rgb(214,152,51)" fg:x="67684" fg:w="1170"/><text x="50.9914%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,170 samples, 0.88%)</title><rect x="50.7414%" y="181" width="0.8771%" height="15" fill="rgb(251,227,43)" fg:x="67684" fg:w="1170"/><text x="50.9914%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (275 samples, 0.21%)</title><rect x="51.4124%" y="165" width="0.2062%" height="15" fill="rgb(241,96,17)" fg:x="68579" fg:w="275"/><text x="51.6624%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (106 samples, 0.08%)</title><rect x="51.6448%" y="277" width="0.0795%" height="15" fill="rgb(234,198,43)" fg:x="68889" fg:w="106"/><text x="51.8948%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (106 samples, 0.08%)</title><rect x="51.6448%" y="261" width="0.0795%" height="15" fill="rgb(220,108,29)" fg:x="68889" fg:w="106"/><text x="51.8948%" y="271.50"></text></g><g><title>core::ptr::write (106 samples, 0.08%)</title><rect x="51.6448%" y="245" width="0.0795%" height="15" fill="rgb(226,163,33)" fg:x="68889" fg:w="106"/><text x="51.8948%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (139 samples, 0.10%)</title><rect x="52.0541%" y="261" width="0.1042%" height="15" fill="rgb(205,194,45)" fg:x="69435" fg:w="139"/><text x="52.3041%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (150 samples, 0.11%)</title><rect x="52.1583%" y="261" width="0.1125%" height="15" fill="rgb(206,143,44)" fg:x="69574" fg:w="150"/><text x="52.4083%" y="271.50"></text></g><g><title>hashbrown::raw::is_full (747 samples, 0.56%)</title><rect x="52.2783%" y="261" width="0.5600%" height="15" fill="rgb(236,136,36)" fg:x="69734" fg:w="747"/><text x="52.5283%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1,528 samples, 1.15%)</title><rect x="51.7243%" y="277" width="1.1455%" height="15" fill="rgb(249,172,42)" fg:x="68995" fg:w="1528"/><text x="51.9743%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (42 samples, 0.03%)</title><rect x="52.8383%" y="261" width="0.0315%" height="15" fill="rgb(216,139,23)" fg:x="70481" fg:w="42"/><text x="53.0883%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (42 samples, 0.03%)</title><rect x="52.8383%" y="245" width="0.0315%" height="15" fill="rgb(207,166,20)" fg:x="70481" fg:w="42"/><text x="53.0883%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (8,039 samples, 6.03%)</title><rect x="47.1819%" y="357" width="6.0267%" height="15" fill="rgb(210,209,22)" fg:x="62936" fg:w="8039"/><text x="47.4319%" y="367.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (8,039 samples, 6.03%)</title><rect x="47.1819%" y="341" width="6.0267%" height="15" fill="rgb(232,118,20)" fg:x="62936" fg:w="8039"/><text x="47.4319%" y="351.50">core::it..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (8,039 samples, 6.03%)</title><rect x="47.1819%" y="325" width="6.0267%" height="15" fill="rgb(238,113,42)" fg:x="62936" fg:w="8039"/><text x="47.4319%" y="335.50">&lt;hashbro..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8,039 samples, 6.03%)</title><rect x="47.1819%" y="309" width="6.0267%" height="15" fill="rgb(231,42,5)" fg:x="62936" fg:w="8039"/><text x="47.4319%" y="319.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,121 samples, 1.59%)</title><rect x="51.6186%" y="293" width="1.5901%" height="15" fill="rgb(243,166,24)" fg:x="68854" fg:w="2121"/><text x="51.8686%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (452 samples, 0.34%)</title><rect x="52.8698%" y="277" width="0.3389%" height="15" fill="rgb(237,226,12)" fg:x="70523" fg:w="452"/><text x="53.1198%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (139 samples, 0.10%)</title><rect x="53.1044%" y="261" width="0.1042%" height="15" fill="rgb(229,133,24)" fg:x="70836" fg:w="139"/><text x="53.3544%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (128 samples, 0.10%)</title><rect x="53.1127%" y="245" width="0.0960%" height="15" fill="rgb(238,33,43)" fg:x="70847" fg:w="128"/><text x="53.3627%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (33,776 samples, 25.32%)</title><rect x="28.0696%" y="405" width="25.3212%" height="15" fill="rgb(227,59,38)" fg:x="37442" fg:w="33776"/><text x="28.3196%" y="415.50">core::iter::traits::iterator::Iterator::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33,776 samples, 25.32%)</title><rect x="28.0696%" y="389" width="25.3212%" height="15" fill="rgb(230,97,0)" fg:x="37442" fg:w="33776"/><text x="28.3196%" y="399.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as ..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,282 samples, 6.21%)</title><rect x="47.1819%" y="373" width="6.2089%" height="15" fill="rgb(250,173,50)" fg:x="62936" fg:w="8282"/><text x="47.4319%" y="383.50">core::it..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (243 samples, 0.18%)</title><rect x="53.2086%" y="357" width="0.1822%" height="15" fill="rgb(240,15,50)" fg:x="70975" fg:w="243"/><text x="53.4586%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (243 samples, 0.18%)</title><rect x="53.2086%" y="341" width="0.1822%" height="15" fill="rgb(221,93,22)" fg:x="70975" fg:w="243"/><text x="53.4586%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (243 samples, 0.18%)</title><rect x="53.2086%" y="325" width="0.1822%" height="15" fill="rgb(245,180,53)" fg:x="70975" fg:w="243"/><text x="53.4586%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (243 samples, 0.18%)</title><rect x="53.2086%" y="309" width="0.1822%" height="15" fill="rgb(231,88,51)" fg:x="70975" fg:w="243"/><text x="53.4586%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (243 samples, 0.18%)</title><rect x="53.2086%" y="293" width="0.1822%" height="15" fill="rgb(240,58,21)" fg:x="70975" fg:w="243"/><text x="53.4586%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (243 samples, 0.18%)</title><rect x="53.2086%" y="277" width="0.1822%" height="15" fill="rgb(237,21,10)" fg:x="70975" fg:w="243"/><text x="53.4586%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (243 samples, 0.18%)</title><rect x="53.2086%" y="261" width="0.1822%" height="15" fill="rgb(218,43,11)" fg:x="70975" fg:w="243"/><text x="53.4586%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (243 samples, 0.18%)</title><rect x="53.2086%" y="245" width="0.1822%" height="15" fill="rgb(218,221,29)" fg:x="70975" fg:w="243"/><text x="53.4586%" y="255.50"></text></g><g><title>_int_free (243 samples, 0.18%)</title><rect x="53.2086%" y="229" width="0.1822%" height="15" fill="rgb(214,118,42)" fg:x="70975" fg:w="243"/><text x="53.4586%" y="239.50"></text></g><g><title>tcache_put (44 samples, 0.03%)</title><rect x="53.3578%" y="213" width="0.0330%" height="15" fill="rgb(251,200,26)" fg:x="71174" fg:w="44"/><text x="53.6078%" y="223.50"></text></g><g><title>core::mem::swap (819 samples, 0.61%)</title><rect x="53.5190%" y="325" width="0.6140%" height="15" fill="rgb(237,101,39)" fg:x="71389" fg:w="819"/><text x="53.7690%" y="335.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (819 samples, 0.61%)</title><rect x="53.5190%" y="309" width="0.6140%" height="15" fill="rgb(251,117,11)" fg:x="71389" fg:w="819"/><text x="53.7690%" y="319.50"></text></g><g><title>core::ptr::swap_nonoverlapping (819 samples, 0.61%)</title><rect x="53.5190%" y="293" width="0.6140%" height="15" fill="rgb(216,223,23)" fg:x="71389" fg:w="819"/><text x="53.7690%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (819 samples, 0.61%)</title><rect x="53.5190%" y="277" width="0.6140%" height="15" fill="rgb(251,54,12)" fg:x="71389" fg:w="819"/><text x="53.7690%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (819 samples, 0.61%)</title><rect x="53.5190%" y="261" width="0.6140%" height="15" fill="rgb(254,176,54)" fg:x="71389" fg:w="819"/><text x="53.7690%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (184 samples, 0.14%)</title><rect x="54.1367%" y="293" width="0.1379%" height="15" fill="rgb(210,32,8)" fg:x="72213" fg:w="184"/><text x="54.3867%" y="303.50"></text></g><g><title>core::intrinsics::write_bytes (184 samples, 0.14%)</title><rect x="54.1367%" y="277" width="0.1379%" height="15" fill="rgb(235,52,38)" fg:x="72213" fg:w="184"/><text x="54.3867%" y="287.50"></text></g><g><title>__memset_avx2_unaligned_erms (184 samples, 0.14%)</title><rect x="54.1367%" y="261" width="0.1379%" height="15" fill="rgb(231,4,44)" fg:x="72213" fg:w="184"/><text x="54.3867%" y="271.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (140 samples, 0.10%)</title><rect x="54.2747%" y="277" width="0.1050%" height="15" fill="rgb(249,2,32)" fg:x="72397" fg:w="140"/><text x="54.5247%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (33 samples, 0.02%)</title><rect x="54.3549%" y="261" width="0.0247%" height="15" fill="rgb(224,65,26)" fg:x="72504" fg:w="33"/><text x="54.6049%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (33 samples, 0.02%)</title><rect x="54.3549%" y="245" width="0.0247%" height="15" fill="rgb(250,73,40)" fg:x="72504" fg:w="33"/><text x="54.6049%" y="255.50"></text></g><g><title>checked_request2size (29 samples, 0.02%)</title><rect x="54.7410%" y="197" width="0.0217%" height="15" fill="rgb(253,177,16)" fg:x="73019" fg:w="29"/><text x="54.9910%" y="207.50"></text></g><g><title>__GI___libc_malloc (534 samples, 0.40%)</title><rect x="54.5033%" y="213" width="0.4003%" height="15" fill="rgb(217,32,34)" fg:x="72702" fg:w="534"/><text x="54.7533%" y="223.50"></text></g><g><title>tcache_get (188 samples, 0.14%)</title><rect x="54.7627%" y="197" width="0.1409%" height="15" fill="rgb(212,7,10)" fg:x="73048" fg:w="188"/><text x="55.0127%" y="207.50"></text></g><g><title>__rdl_alloc (35 samples, 0.03%)</title><rect x="54.9037%" y="213" width="0.0262%" height="15" fill="rgb(245,89,8)" fg:x="73236" fg:w="35"/><text x="55.1537%" y="223.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (774 samples, 0.58%)</title><rect x="54.3796%" y="277" width="0.5803%" height="15" fill="rgb(237,16,53)" fg:x="72537" fg:w="774"/><text x="54.6296%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (774 samples, 0.58%)</title><rect x="54.3796%" y="261" width="0.5803%" height="15" fill="rgb(250,204,30)" fg:x="72537" fg:w="774"/><text x="54.6296%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (774 samples, 0.58%)</title><rect x="54.3796%" y="245" width="0.5803%" height="15" fill="rgb(208,77,27)" fg:x="72537" fg:w="774"/><text x="54.6296%" y="255.50"></text></g><g><title>alloc::alloc::alloc (729 samples, 0.55%)</title><rect x="54.4134%" y="229" width="0.5465%" height="15" fill="rgb(250,204,28)" fg:x="72582" fg:w="729"/><text x="54.6634%" y="239.50"></text></g><g><title>__rust_alloc (40 samples, 0.03%)</title><rect x="54.9299%" y="213" width="0.0300%" height="15" fill="rgb(244,63,21)" fg:x="73271" fg:w="40"/><text x="55.1799%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (947 samples, 0.71%)</title><rect x="54.2747%" y="293" width="0.7099%" height="15" fill="rgb(236,85,44)" fg:x="72397" fg:w="947"/><text x="54.5247%" y="303.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (33 samples, 0.02%)</title><rect x="54.9599%" y="277" width="0.0247%" height="15" fill="rgb(215,98,4)" fg:x="73311" fg:w="33"/><text x="55.2099%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1,218 samples, 0.91%)</title><rect x="54.1330%" y="325" width="0.9131%" height="15" fill="rgb(235,38,11)" fg:x="72208" fg:w="1218"/><text x="54.3830%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,213 samples, 0.91%)</title><rect x="54.1367%" y="309" width="0.9094%" height="15" fill="rgb(254,186,25)" fg:x="72213" fg:w="1213"/><text x="54.3867%" y="319.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (82 samples, 0.06%)</title><rect x="54.9846%" y="293" width="0.0615%" height="15" fill="rgb(225,55,31)" fg:x="73344" fg:w="82"/><text x="55.2346%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (2,123 samples, 1.59%)</title><rect x="53.4560%" y="341" width="1.5916%" height="15" fill="rgb(211,15,21)" fg:x="71305" fg:w="2123"/><text x="53.7060%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (36,029 samples, 27.01%)</title><rect x="28.0696%" y="485" width="27.0103%" height="15" fill="rgb(215,187,41)" fg:x="37442" fg:w="36029"/><text x="28.3196%" y="495.50">core::iter::traits::iterator::Iterator::col..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (36,029 samples, 27.01%)</title><rect x="28.0696%" y="469" width="27.0103%" height="15" fill="rgb(248,69,32)" fg:x="37442" fg:w="36029"/><text x="28.3196%" y="479.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; ..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (36,029 samples, 27.01%)</title><rect x="28.0696%" y="453" width="27.0103%" height="15" fill="rgb(252,102,52)" fg:x="37442" fg:w="36029"/><text x="28.3196%" y="463.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; ..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (36,029 samples, 27.01%)</title><rect x="28.0696%" y="437" width="27.0103%" height="15" fill="rgb(253,140,32)" fg:x="37442" fg:w="36029"/><text x="28.3196%" y="447.50">&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::it..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (36,029 samples, 27.01%)</title><rect x="28.0696%" y="421" width="27.0103%" height="15" fill="rgb(216,56,42)" fg:x="37442" fg:w="36029"/><text x="28.3196%" y="431.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,253 samples, 1.69%)</title><rect x="53.3908%" y="405" width="1.6890%" height="15" fill="rgb(216,184,14)" fg:x="71218" fg:w="2253"/><text x="53.6408%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,253 samples, 1.69%)</title><rect x="53.3908%" y="389" width="1.6890%" height="15" fill="rgb(237,187,27)" fg:x="71218" fg:w="2253"/><text x="53.6408%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,253 samples, 1.69%)</title><rect x="53.3908%" y="373" width="1.6890%" height="15" fill="rgb(219,65,3)" fg:x="71218" fg:w="2253"/><text x="53.6408%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,229 samples, 1.67%)</title><rect x="53.4088%" y="357" width="1.6710%" height="15" fill="rgb(245,83,25)" fg:x="71242" fg:w="2229"/><text x="53.6588%" y="367.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (43 samples, 0.03%)</title><rect x="55.0476%" y="341" width="0.0322%" height="15" fill="rgb(214,205,45)" fg:x="73428" fg:w="43"/><text x="55.2976%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (519 samples, 0.39%)</title><rect x="55.0798%" y="405" width="0.3891%" height="15" fill="rgb(241,20,18)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (519 samples, 0.39%)</title><rect x="55.0798%" y="389" width="0.3891%" height="15" fill="rgb(232,163,23)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;u8&gt;&gt;,&lt;kakuro::game::Input as kakuro::solvers::prioritize::InputExt&gt;::is_possible_solution::{{closure}}&gt;&gt; (519 samples, 0.39%)</title><rect x="55.0798%" y="373" width="0.3891%" height="15" fill="rgb(214,5,46)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;u8&gt;&gt;&gt; (519 samples, 0.39%)</title><rect x="55.0798%" y="357" width="0.3891%" height="15" fill="rgb(229,78,17)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (519 samples, 0.39%)</title><rect x="55.0798%" y="341" width="0.3891%" height="15" fill="rgb(248,89,10)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;core::option::Option&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (519 samples, 0.39%)</title><rect x="55.0798%" y="325" width="0.3891%" height="15" fill="rgb(248,54,15)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (519 samples, 0.39%)</title><rect x="55.0798%" y="309" width="0.3891%" height="15" fill="rgb(223,116,6)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;u8&gt;&gt;&gt; (519 samples, 0.39%)</title><rect x="55.0798%" y="293" width="0.3891%" height="15" fill="rgb(205,125,38)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (519 samples, 0.39%)</title><rect x="55.0798%" y="277" width="0.3891%" height="15" fill="rgb(251,78,38)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (519 samples, 0.39%)</title><rect x="55.0798%" y="261" width="0.3891%" height="15" fill="rgb(253,78,28)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (519 samples, 0.39%)</title><rect x="55.0798%" y="245" width="0.3891%" height="15" fill="rgb(209,120,3)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="255.50"></text></g><g><title>_int_free (519 samples, 0.39%)</title><rect x="55.0798%" y="229" width="0.3891%" height="15" fill="rgb(238,229,9)" fg:x="73471" fg:w="519"/><text x="55.3298%" y="239.50"></text></g><g><title>tcache_put (59 samples, 0.04%)</title><rect x="55.4247%" y="213" width="0.0442%" height="15" fill="rgb(253,159,18)" fg:x="73931" fg:w="59"/><text x="55.6747%" y="223.50"></text></g><g><title>itertools::Itertools::collect_vec (538 samples, 0.40%)</title><rect x="55.0798%" y="485" width="0.4033%" height="15" fill="rgb(244,42,34)" fg:x="73471" fg:w="538"/><text x="55.3298%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (538 samples, 0.40%)</title><rect x="55.0798%" y="469" width="0.4033%" height="15" fill="rgb(224,8,7)" fg:x="73471" fg:w="538"/><text x="55.3298%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (538 samples, 0.40%)</title><rect x="55.0798%" y="453" width="0.4033%" height="15" fill="rgb(210,201,45)" fg:x="73471" fg:w="538"/><text x="55.3298%" y="463.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (538 samples, 0.40%)</title><rect x="55.0798%" y="437" width="0.4033%" height="15" fill="rgb(252,185,21)" fg:x="73471" fg:w="538"/><text x="55.3298%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (538 samples, 0.40%)</title><rect x="55.0798%" y="421" width="0.4033%" height="15" fill="rgb(223,131,1)" fg:x="73471" fg:w="538"/><text x="55.3298%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;u8&gt;&gt;,&lt;kakuro::game::Input as kakuro::solvers::prioritize::InputExt&gt;::is_possible_solution::{{closure}}&gt;&gt; (19 samples, 0.01%)</title><rect x="55.4689%" y="405" width="0.0142%" height="15" fill="rgb(245,141,16)" fg:x="73990" fg:w="19"/><text x="55.7189%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;u8&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="55.4689%" y="389" width="0.0142%" height="15" fill="rgb(229,55,45)" fg:x="73990" fg:w="19"/><text x="55.7189%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="55.4689%" y="373" width="0.0142%" height="15" fill="rgb(208,92,15)" fg:x="73990" fg:w="19"/><text x="55.7189%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;core::option::Option&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (19 samples, 0.01%)</title><rect x="55.4689%" y="357" width="0.0142%" height="15" fill="rgb(234,185,47)" fg:x="73990" fg:w="19"/><text x="55.7189%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="55.4689%" y="341" width="0.0142%" height="15" fill="rgb(253,104,50)" fg:x="73990" fg:w="19"/><text x="55.7189%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;u8&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="55.4689%" y="325" width="0.0142%" height="15" fill="rgb(205,70,7)" fg:x="73990" fg:w="19"/><text x="55.7189%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="55.4689%" y="309" width="0.0142%" height="15" fill="rgb(240,178,43)" fg:x="73990" fg:w="19"/><text x="55.7189%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.01%)</title><rect x="55.4689%" y="293" width="0.0142%" height="15" fill="rgb(214,112,2)" fg:x="73990" fg:w="19"/><text x="55.7189%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.01%)</title><rect x="55.4689%" y="277" width="0.0142%" height="15" fill="rgb(206,46,17)" fg:x="73990" fg:w="19"/><text x="55.7189%" y="287.50"></text></g><g><title>_int_free (19 samples, 0.01%)</title><rect x="55.4689%" y="261" width="0.0142%" height="15" fill="rgb(225,220,16)" fg:x="73990" fg:w="19"/><text x="55.7189%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (18 samples, 0.01%)</title><rect x="55.8213%" y="453" width="0.0135%" height="15" fill="rgb(238,65,40)" fg:x="74460" fg:w="18"/><text x="56.0713%" y="463.50"></text></g><g><title>__GI___libc_malloc (89 samples, 0.07%)</title><rect x="55.9082%" y="341" width="0.0667%" height="15" fill="rgb(230,151,21)" fg:x="74576" fg:w="89"/><text x="56.1582%" y="351.50"></text></g><g><title>tcache_get (21 samples, 0.02%)</title><rect x="55.9592%" y="325" width="0.0157%" height="15" fill="rgb(218,58,49)" fg:x="74644" fg:w="21"/><text x="56.2092%" y="335.50"></text></g><g><title>__rdl_alloc (32 samples, 0.02%)</title><rect x="55.9750%" y="341" width="0.0240%" height="15" fill="rgb(219,179,14)" fg:x="74665" fg:w="32"/><text x="56.2250%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (23 samples, 0.02%)</title><rect x="55.9817%" y="325" width="0.0172%" height="15" fill="rgb(223,72,1)" fg:x="74674" fg:w="23"/><text x="56.2317%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (199 samples, 0.15%)</title><rect x="55.8663%" y="389" width="0.1492%" height="15" fill="rgb(238,126,10)" fg:x="74520" fg:w="199"/><text x="56.1163%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (199 samples, 0.15%)</title><rect x="55.8663%" y="373" width="0.1492%" height="15" fill="rgb(224,206,38)" fg:x="74520" fg:w="199"/><text x="56.1163%" y="383.50"></text></g><g><title>alloc::alloc::alloc (181 samples, 0.14%)</title><rect x="55.8798%" y="357" width="0.1357%" height="15" fill="rgb(212,201,54)" fg:x="74538" fg:w="181"/><text x="56.1298%" y="367.50"></text></g><g><title>__rust_alloc (22 samples, 0.02%)</title><rect x="55.9990%" y="341" width="0.0165%" height="15" fill="rgb(218,154,48)" fg:x="74697" fg:w="22"/><text x="56.2490%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (258 samples, 0.19%)</title><rect x="55.8348%" y="453" width="0.1934%" height="15" fill="rgb(232,93,24)" fg:x="74478" fg:w="258"/><text x="56.0848%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (258 samples, 0.19%)</title><rect x="55.8348%" y="437" width="0.1934%" height="15" fill="rgb(245,30,21)" fg:x="74478" fg:w="258"/><text x="56.0848%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (251 samples, 0.19%)</title><rect x="55.8400%" y="421" width="0.1882%" height="15" fill="rgb(242,148,29)" fg:x="74485" fg:w="251"/><text x="56.0900%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (251 samples, 0.19%)</title><rect x="55.8400%" y="405" width="0.1882%" height="15" fill="rgb(244,153,54)" fg:x="74485" fg:w="251"/><text x="56.0900%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::array (17 samples, 0.01%)</title><rect x="56.0154%" y="389" width="0.0127%" height="15" fill="rgb(252,87,22)" fg:x="74719" fg:w="17"/><text x="56.2654%" y="399.50"></text></g><g><title>&lt;std::collections::hash::set::IntoIter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.04%)</title><rect x="56.0334%" y="437" width="0.0420%" height="15" fill="rgb(210,51,29)" fg:x="74743" fg:w="56"/><text x="56.2834%" y="447.50"></text></g><g><title>&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.04%)</title><rect x="56.0334%" y="421" width="0.0420%" height="15" fill="rgb(242,136,47)" fg:x="74743" fg:w="56"/><text x="56.2834%" y="431.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.04%)</title><rect x="56.0334%" y="405" width="0.0420%" height="15" fill="rgb(238,68,4)" fg:x="74743" fg:w="56"/><text x="56.2834%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.04%)</title><rect x="56.0349%" y="389" width="0.0405%" height="15" fill="rgb(242,161,30)" fg:x="74745" fg:w="54"/><text x="56.2849%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="56.0627%" y="373" width="0.0127%" height="15" fill="rgb(218,58,44)" fg:x="74782" fg:w="17"/><text x="56.3127%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="56.0649%" y="357" width="0.0105%" height="15" fill="rgb(252,125,32)" fg:x="74785" fg:w="14"/><text x="56.3149%" y="367.50"></text></g><g><title>itertools::combinations::LazyBuffer&lt;I&gt;::get_next (109 samples, 0.08%)</title><rect x="56.0312%" y="453" width="0.0817%" height="15" fill="rgb(219,178,0)" fg:x="74740" fg:w="109"/><text x="56.2812%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (50 samples, 0.04%)</title><rect x="56.0754%" y="437" width="0.0375%" height="15" fill="rgb(213,152,7)" fg:x="74799" fg:w="50"/><text x="56.3254%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (301 samples, 0.23%)</title><rect x="57.6550%" y="341" width="0.2257%" height="15" fill="rgb(249,109,34)" fg:x="76906" fg:w="301"/><text x="57.9050%" y="351.50"></text></g><g><title>&lt;std::collections::hash::set::IntoIter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (795 samples, 0.60%)</title><rect x="57.3229%" y="437" width="0.5960%" height="15" fill="rgb(232,96,21)" fg:x="76463" fg:w="795"/><text x="57.5729%" y="447.50"></text></g><g><title>&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (795 samples, 0.60%)</title><rect x="57.3229%" y="421" width="0.5960%" height="15" fill="rgb(228,27,39)" fg:x="76463" fg:w="795"/><text x="57.5729%" y="431.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (795 samples, 0.60%)</title><rect x="57.3229%" y="405" width="0.5960%" height="15" fill="rgb(211,182,52)" fg:x="76463" fg:w="795"/><text x="57.5729%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (794 samples, 0.60%)</title><rect x="57.3236%" y="389" width="0.5952%" height="15" fill="rgb(234,178,38)" fg:x="76464" fg:w="794"/><text x="57.5736%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (455 samples, 0.34%)</title><rect x="57.5778%" y="373" width="0.3411%" height="15" fill="rgb(221,111,3)" fg:x="76803" fg:w="455"/><text x="57.8278%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (444 samples, 0.33%)</title><rect x="57.5860%" y="357" width="0.3329%" height="15" fill="rgb(228,175,21)" fg:x="76814" fg:w="444"/><text x="57.8360%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (51 samples, 0.04%)</title><rect x="57.8807%" y="341" width="0.0382%" height="15" fill="rgb(228,174,43)" fg:x="77207" fg:w="51"/><text x="58.1307%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (235 samples, 0.18%)</title><rect x="57.9189%" y="437" width="0.1762%" height="15" fill="rgb(211,191,0)" fg:x="77258" fg:w="235"/><text x="58.1689%" y="447.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (56,592 samples, 42.43%)</title><rect x="15.6773%" y="501" width="42.4260%" height="15" fill="rgb(253,117,3)" fg:x="20912" fg:w="56592"/><text x="15.9273%" y="511.50">&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is..</text></g><g><title>itertools::Itertools::combinations (3,495 samples, 2.62%)</title><rect x="55.4832%" y="485" width="2.6201%" height="15" fill="rgb(241,127,19)" fg:x="74009" fg:w="3495"/><text x="55.7332%" y="495.50">it..</text></g><g><title>itertools::combinations::combinations (3,495 samples, 2.62%)</title><rect x="55.4832%" y="469" width="2.6201%" height="15" fill="rgb(218,103,12)" fg:x="74009" fg:w="3495"/><text x="55.7332%" y="479.50">it..</text></g><g><title>itertools::combinations::LazyBuffer&lt;I&gt;::new (2,655 samples, 1.99%)</title><rect x="56.1129%" y="453" width="1.9904%" height="15" fill="rgb(236,214,43)" fg:x="74849" fg:w="2655"/><text x="56.3629%" y="463.50">i..</text></g><g><title>alloc::fmt::format (77 samples, 0.06%)</title><rect x="58.1033%" y="501" width="0.0577%" height="15" fill="rgb(244,144,19)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (77 samples, 0.06%)</title><rect x="58.1033%" y="485" width="0.0577%" height="15" fill="rgb(246,188,10)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="495.50"></text></g><g><title>core::fmt::write (77 samples, 0.06%)</title><rect x="58.1033%" y="469" width="0.0577%" height="15" fill="rgb(212,193,33)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (77 samples, 0.06%)</title><rect x="58.1033%" y="453" width="0.0577%" height="15" fill="rgb(241,51,29)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (77 samples, 0.06%)</title><rect x="58.1033%" y="437" width="0.0577%" height="15" fill="rgb(211,58,19)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="447.50"></text></g><g><title>alloc::string::String::push_str (77 samples, 0.06%)</title><rect x="58.1033%" y="421" width="0.0577%" height="15" fill="rgb(229,111,26)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (77 samples, 0.06%)</title><rect x="58.1033%" y="405" width="0.0577%" height="15" fill="rgb(213,115,40)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (77 samples, 0.06%)</title><rect x="58.1033%" y="389" width="0.0577%" height="15" fill="rgb(209,56,44)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (77 samples, 0.06%)</title><rect x="58.1033%" y="373" width="0.0577%" height="15" fill="rgb(230,108,32)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (77 samples, 0.06%)</title><rect x="58.1033%" y="357" width="0.0577%" height="15" fill="rgb(216,165,31)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (77 samples, 0.06%)</title><rect x="58.1033%" y="341" width="0.0577%" height="15" fill="rgb(218,122,21)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (77 samples, 0.06%)</title><rect x="58.1033%" y="325" width="0.0577%" height="15" fill="rgb(223,224,47)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (77 samples, 0.06%)</title><rect x="58.1033%" y="309" width="0.0577%" height="15" fill="rgb(238,102,44)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (77 samples, 0.06%)</title><rect x="58.1033%" y="293" width="0.0577%" height="15" fill="rgb(236,46,40)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (77 samples, 0.06%)</title><rect x="58.1033%" y="277" width="0.0577%" height="15" fill="rgb(247,202,50)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (77 samples, 0.06%)</title><rect x="58.1033%" y="261" width="0.0577%" height="15" fill="rgb(209,99,20)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="271.50"></text></g><g><title>alloc::alloc::realloc (77 samples, 0.06%)</title><rect x="58.1033%" y="245" width="0.0577%" height="15" fill="rgb(252,27,34)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="255.50"></text></g><g><title>__GI___libc_realloc (77 samples, 0.06%)</title><rect x="58.1033%" y="229" width="0.0577%" height="15" fill="rgb(215,206,23)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="239.50"></text></g><g><title>_int_realloc (77 samples, 0.06%)</title><rect x="58.1033%" y="213" width="0.0577%" height="15" fill="rgb(212,135,36)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="223.50"></text></g><g><title>_int_malloc (77 samples, 0.06%)</title><rect x="58.1033%" y="197" width="0.0577%" height="15" fill="rgb(240,189,1)" fg:x="77504" fg:w="77"/><text x="58.3533%" y="207.50"></text></g><g><title>unlink_chunk (24 samples, 0.02%)</title><rect x="58.1430%" y="181" width="0.0180%" height="15" fill="rgb(242,56,20)" fg:x="77557" fg:w="24"/><text x="58.3930%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (81 samples, 0.06%)</title><rect x="58.1610%" y="389" width="0.0607%" height="15" fill="rgb(247,132,33)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (81 samples, 0.06%)</title><rect x="58.1610%" y="373" width="0.0607%" height="15" fill="rgb(208,149,11)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="383.50"></text></g><g><title>alloc::string::String::push_str (81 samples, 0.06%)</title><rect x="58.1610%" y="357" width="0.0607%" height="15" fill="rgb(211,33,11)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (81 samples, 0.06%)</title><rect x="58.1610%" y="341" width="0.0607%" height="15" fill="rgb(221,29,38)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (81 samples, 0.06%)</title><rect x="58.1610%" y="325" width="0.0607%" height="15" fill="rgb(206,182,49)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (81 samples, 0.06%)</title><rect x="58.1610%" y="309" width="0.0607%" height="15" fill="rgb(216,140,1)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (81 samples, 0.06%)</title><rect x="58.1610%" y="293" width="0.0607%" height="15" fill="rgb(232,57,40)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (81 samples, 0.06%)</title><rect x="58.1610%" y="277" width="0.0607%" height="15" fill="rgb(224,186,18)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (81 samples, 0.06%)</title><rect x="58.1610%" y="261" width="0.0607%" height="15" fill="rgb(215,121,11)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (81 samples, 0.06%)</title><rect x="58.1610%" y="245" width="0.0607%" height="15" fill="rgb(245,147,10)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (81 samples, 0.06%)</title><rect x="58.1610%" y="229" width="0.0607%" height="15" fill="rgb(238,153,13)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (81 samples, 0.06%)</title><rect x="58.1610%" y="213" width="0.0607%" height="15" fill="rgb(233,108,0)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (81 samples, 0.06%)</title><rect x="58.1610%" y="197" width="0.0607%" height="15" fill="rgb(212,157,17)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="207.50"></text></g><g><title>alloc::alloc::realloc (81 samples, 0.06%)</title><rect x="58.1610%" y="181" width="0.0607%" height="15" fill="rgb(225,213,38)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="191.50"></text></g><g><title>__GI___libc_realloc (81 samples, 0.06%)</title><rect x="58.1610%" y="165" width="0.0607%" height="15" fill="rgb(248,16,11)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="175.50"></text></g><g><title>_int_realloc (81 samples, 0.06%)</title><rect x="58.1610%" y="149" width="0.0607%" height="15" fill="rgb(241,33,4)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="159.50"></text></g><g><title>_int_malloc (81 samples, 0.06%)</title><rect x="58.1610%" y="133" width="0.0607%" height="15" fill="rgb(222,26,43)" fg:x="77581" fg:w="81"/><text x="58.4110%" y="143.50"></text></g><g><title>checked_request2size (56 samples, 0.04%)</title><rect x="58.7353%" y="101" width="0.0420%" height="15" fill="rgb(243,29,36)" fg:x="78347" fg:w="56"/><text x="58.9853%" y="111.50"></text></g><g><title>__GI___libc_malloc (507 samples, 0.38%)</title><rect x="58.5179%" y="117" width="0.3801%" height="15" fill="rgb(241,9,27)" fg:x="78057" fg:w="507"/><text x="58.7679%" y="127.50"></text></g><g><title>tcache_get (161 samples, 0.12%)</title><rect x="58.7773%" y="101" width="0.1207%" height="15" fill="rgb(205,117,26)" fg:x="78403" fg:w="161"/><text x="59.0273%" y="111.50"></text></g><g><title>__rdl_alloc (102 samples, 0.08%)</title><rect x="58.8980%" y="117" width="0.0765%" height="15" fill="rgb(209,80,39)" fg:x="78564" fg:w="102"/><text x="59.1480%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (19 samples, 0.01%)</title><rect x="58.9602%" y="101" width="0.0142%" height="15" fill="rgb(239,155,6)" fg:x="78647" fg:w="19"/><text x="59.2102%" y="111.50"></text></g><g><title>__rust_alloc (68 samples, 0.05%)</title><rect x="58.9744%" y="117" width="0.0510%" height="15" fill="rgb(212,104,12)" fg:x="78666" fg:w="68"/><text x="59.2244%" y="127.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1,086 samples, 0.81%)</title><rect x="58.2218%" y="293" width="0.8142%" height="15" fill="rgb(234,204,3)" fg:x="77662" fg:w="1086"/><text x="58.4718%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,086 samples, 0.81%)</title><rect x="58.2218%" y="277" width="0.8142%" height="15" fill="rgb(251,218,7)" fg:x="77662" fg:w="1086"/><text x="58.4718%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1,086 samples, 0.81%)</title><rect x="58.2218%" y="261" width="0.8142%" height="15" fill="rgb(221,81,32)" fg:x="77662" fg:w="1086"/><text x="58.4718%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,086 samples, 0.81%)</title><rect x="58.2218%" y="245" width="0.8142%" height="15" fill="rgb(214,152,26)" fg:x="77662" fg:w="1086"/><text x="58.4718%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,086 samples, 0.81%)</title><rect x="58.2218%" y="229" width="0.8142%" height="15" fill="rgb(223,22,3)" fg:x="77662" fg:w="1086"/><text x="58.4718%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,086 samples, 0.81%)</title><rect x="58.2218%" y="213" width="0.8142%" height="15" fill="rgb(207,174,7)" fg:x="77662" fg:w="1086"/><text x="58.4718%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,086 samples, 0.81%)</title><rect x="58.2218%" y="197" width="0.8142%" height="15" fill="rgb(224,19,52)" fg:x="77662" fg:w="1086"/><text x="58.4718%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,086 samples, 0.81%)</title><rect x="58.2218%" y="181" width="0.8142%" height="15" fill="rgb(228,24,14)" fg:x="77662" fg:w="1086"/><text x="58.4718%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,086 samples, 0.81%)</title><rect x="58.2218%" y="165" width="0.8142%" height="15" fill="rgb(230,153,43)" fg:x="77662" fg:w="1086"/><text x="58.4718%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,086 samples, 0.81%)</title><rect x="58.2218%" y="149" width="0.8142%" height="15" fill="rgb(231,106,12)" fg:x="77662" fg:w="1086"/><text x="58.4718%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,086 samples, 0.81%)</title><rect x="58.2218%" y="133" width="0.8142%" height="15" fill="rgb(215,92,2)" fg:x="77662" fg:w="1086"/><text x="58.4718%" y="143.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (14 samples, 0.01%)</title><rect x="59.0254%" y="117" width="0.0105%" height="15" fill="rgb(249,143,25)" fg:x="78734" fg:w="14"/><text x="59.2754%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,259 samples, 0.94%)</title><rect x="58.1610%" y="501" width="0.9438%" height="15" fill="rgb(252,7,35)" fg:x="77581" fg:w="1259"/><text x="58.4110%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (1,259 samples, 0.94%)</title><rect x="58.1610%" y="485" width="0.9438%" height="15" fill="rgb(216,69,40)" fg:x="77581" fg:w="1259"/><text x="58.4110%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (1,259 samples, 0.94%)</title><rect x="58.1610%" y="469" width="0.9438%" height="15" fill="rgb(240,36,33)" fg:x="77581" fg:w="1259"/><text x="58.4110%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,259 samples, 0.94%)</title><rect x="58.1610%" y="453" width="0.9438%" height="15" fill="rgb(231,128,14)" fg:x="77581" fg:w="1259"/><text x="58.4110%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,259 samples, 0.94%)</title><rect x="58.1610%" y="437" width="0.9438%" height="15" fill="rgb(245,143,14)" fg:x="77581" fg:w="1259"/><text x="58.4110%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,259 samples, 0.94%)</title><rect x="58.1610%" y="421" width="0.9438%" height="15" fill="rgb(222,130,28)" fg:x="77581" fg:w="1259"/><text x="58.4110%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1,259 samples, 0.94%)</title><rect x="58.1610%" y="405" width="0.9438%" height="15" fill="rgb(212,10,48)" fg:x="77581" fg:w="1259"/><text x="58.4110%" y="415.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (1,178 samples, 0.88%)</title><rect x="58.2218%" y="389" width="0.8831%" height="15" fill="rgb(254,118,45)" fg:x="77662" fg:w="1178"/><text x="58.4718%" y="399.50"></text></g><g><title>alloc::fmt::format (1,178 samples, 0.88%)</title><rect x="58.2218%" y="373" width="0.8831%" height="15" fill="rgb(228,6,45)" fg:x="77662" fg:w="1178"/><text x="58.4718%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (1,178 samples, 0.88%)</title><rect x="58.2218%" y="357" width="0.8831%" height="15" fill="rgb(241,18,35)" fg:x="77662" fg:w="1178"/><text x="58.4718%" y="367.50"></text></g><g><title>core::fmt::write (1,178 samples, 0.88%)</title><rect x="58.2218%" y="341" width="0.8831%" height="15" fill="rgb(227,214,53)" fg:x="77662" fg:w="1178"/><text x="58.4718%" y="351.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (1,178 samples, 0.88%)</title><rect x="58.2218%" y="325" width="0.8831%" height="15" fill="rgb(224,107,51)" fg:x="77662" fg:w="1178"/><text x="58.4718%" y="335.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1,178 samples, 0.88%)</title><rect x="58.2218%" y="309" width="0.8831%" height="15" fill="rgb(248,60,28)" fg:x="77662" fg:w="1178"/><text x="58.4718%" y="319.50"></text></g><g><title>core::fmt::Formatter::pad_integral (92 samples, 0.07%)</title><rect x="59.0359%" y="293" width="0.0690%" height="15" fill="rgb(249,101,23)" fg:x="78748" fg:w="92"/><text x="59.2859%" y="303.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (92 samples, 0.07%)</title><rect x="59.0359%" y="277" width="0.0690%" height="15" fill="rgb(228,51,19)" fg:x="78748" fg:w="92"/><text x="59.2859%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (131 samples, 0.10%)</title><rect x="59.4722%" y="453" width="0.0982%" height="15" fill="rgb(213,20,6)" fg:x="79330" fg:w="131"/><text x="59.7222%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (17 samples, 0.01%)</title><rect x="59.5577%" y="437" width="0.0127%" height="15" fill="rgb(212,124,10)" fg:x="79444" fg:w="17"/><text x="59.8077%" y="447.50"></text></g><g><title>checked_request2size (33 samples, 0.02%)</title><rect x="59.8013%" y="293" width="0.0247%" height="15" fill="rgb(248,3,40)" fg:x="79769" fg:w="33"/><text x="60.0513%" y="303.50"></text></g><g><title>__GI___libc_malloc (337 samples, 0.25%)</title><rect x="59.6551%" y="309" width="0.2526%" height="15" fill="rgb(223,178,23)" fg:x="79574" fg:w="337"/><text x="59.9051%" y="319.50"></text></g><g><title>tcache_get (109 samples, 0.08%)</title><rect x="59.8261%" y="293" width="0.0817%" height="15" fill="rgb(240,132,45)" fg:x="79802" fg:w="109"/><text x="60.0761%" y="303.50"></text></g><g><title>__rdl_alloc (68 samples, 0.05%)</title><rect x="59.9078%" y="309" width="0.0510%" height="15" fill="rgb(245,164,36)" fg:x="79911" fg:w="68"/><text x="60.1578%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (26 samples, 0.02%)</title><rect x="59.9393%" y="293" width="0.0195%" height="15" fill="rgb(231,188,53)" fg:x="79953" fg:w="26"/><text x="60.1893%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (585 samples, 0.44%)</title><rect x="59.5704%" y="405" width="0.4386%" height="15" fill="rgb(237,198,39)" fg:x="79461" fg:w="585"/><text x="59.8204%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (585 samples, 0.44%)</title><rect x="59.5704%" y="389" width="0.4386%" height="15" fill="rgb(223,120,35)" fg:x="79461" fg:w="585"/><text x="59.8204%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (585 samples, 0.44%)</title><rect x="59.5704%" y="373" width="0.4386%" height="15" fill="rgb(253,107,49)" fg:x="79461" fg:w="585"/><text x="59.8204%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (578 samples, 0.43%)</title><rect x="59.5757%" y="357" width="0.4333%" height="15" fill="rgb(216,44,31)" fg:x="79468" fg:w="578"/><text x="59.8257%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (578 samples, 0.43%)</title><rect x="59.5757%" y="341" width="0.4333%" height="15" fill="rgb(253,87,21)" fg:x="79468" fg:w="578"/><text x="59.8257%" y="351.50"></text></g><g><title>alloc::alloc::alloc (574 samples, 0.43%)</title><rect x="59.5787%" y="325" width="0.4303%" height="15" fill="rgb(226,18,2)" fg:x="79472" fg:w="574"/><text x="59.8287%" y="335.50"></text></g><g><title>__rust_alloc (67 samples, 0.05%)</title><rect x="59.9588%" y="309" width="0.0502%" height="15" fill="rgb(216,8,46)" fg:x="79979" fg:w="67"/><text x="60.2088%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (903 samples, 0.68%)</title><rect x="59.4722%" y="469" width="0.6770%" height="15" fill="rgb(226,140,39)" fg:x="79330" fg:w="903"/><text x="59.7222%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (772 samples, 0.58%)</title><rect x="59.5704%" y="453" width="0.5788%" height="15" fill="rgb(221,194,54)" fg:x="79461" fg:w="772"/><text x="59.8204%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (772 samples, 0.58%)</title><rect x="59.5704%" y="437" width="0.5788%" height="15" fill="rgb(213,92,11)" fg:x="79461" fg:w="772"/><text x="59.8204%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (772 samples, 0.58%)</title><rect x="59.5704%" y="421" width="0.5788%" height="15" fill="rgb(229,162,46)" fg:x="79461" fg:w="772"/><text x="59.8204%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (187 samples, 0.14%)</title><rect x="60.0090%" y="405" width="0.1402%" height="15" fill="rgb(214,111,36)" fg:x="80046" fg:w="187"/><text x="60.2590%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (187 samples, 0.14%)</title><rect x="60.0090%" y="389" width="0.1402%" height="15" fill="rgb(207,6,21)" fg:x="80046" fg:w="187"/><text x="60.2590%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (187 samples, 0.14%)</title><rect x="60.0090%" y="373" width="0.1402%" height="15" fill="rgb(213,127,38)" fg:x="80046" fg:w="187"/><text x="60.2590%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (103 samples, 0.08%)</title><rect x="60.1492%" y="469" width="0.0772%" height="15" fill="rgb(238,118,32)" fg:x="80233" fg:w="103"/><text x="60.3992%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (67 samples, 0.05%)</title><rect x="60.1762%" y="453" width="0.0502%" height="15" fill="rgb(240,139,39)" fg:x="80269" fg:w="67"/><text x="60.4262%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (67 samples, 0.05%)</title><rect x="60.1762%" y="437" width="0.0502%" height="15" fill="rgb(235,10,37)" fg:x="80269" fg:w="67"/><text x="60.4262%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (55 samples, 0.04%)</title><rect x="60.2264%" y="469" width="0.0412%" height="15" fill="rgb(249,171,38)" fg:x="80336" fg:w="55"/><text x="60.4764%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (27 samples, 0.02%)</title><rect x="60.2474%" y="453" width="0.0202%" height="15" fill="rgb(242,144,32)" fg:x="80364" fg:w="27"/><text x="60.4974%" y="463.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (49 samples, 0.04%)</title><rect x="60.2706%" y="389" width="0.0367%" height="15" fill="rgb(217,117,21)" fg:x="80395" fg:w="49"/><text x="60.5206%" y="399.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (49 samples, 0.04%)</title><rect x="60.2706%" y="373" width="0.0367%" height="15" fill="rgb(249,87,1)" fg:x="80395" fg:w="49"/><text x="60.5206%" y="383.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (23 samples, 0.02%)</title><rect x="60.2901%" y="357" width="0.0172%" height="15" fill="rgb(248,196,48)" fg:x="80421" fg:w="23"/><text x="60.5401%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (23 samples, 0.02%)</title><rect x="60.2901%" y="341" width="0.0172%" height="15" fill="rgb(251,206,33)" fg:x="80421" fg:w="23"/><text x="60.5401%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (54 samples, 0.04%)</title><rect x="60.3074%" y="373" width="0.0405%" height="15" fill="rgb(232,141,28)" fg:x="80444" fg:w="54"/><text x="60.5574%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (54 samples, 0.04%)</title><rect x="60.3074%" y="357" width="0.0405%" height="15" fill="rgb(209,167,14)" fg:x="80444" fg:w="54"/><text x="60.5574%" y="367.50"></text></g><g><title>core::mem::replace (54 samples, 0.04%)</title><rect x="60.3074%" y="341" width="0.0405%" height="15" fill="rgb(225,11,50)" fg:x="80444" fg:w="54"/><text x="60.5574%" y="351.50"></text></g><g><title>core::ptr::write (54 samples, 0.04%)</title><rect x="60.3074%" y="325" width="0.0405%" height="15" fill="rgb(209,50,20)" fg:x="80444" fg:w="54"/><text x="60.5574%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (155 samples, 0.12%)</title><rect x="60.2706%" y="453" width="0.1162%" height="15" fill="rgb(212,17,46)" fg:x="80395" fg:w="155"/><text x="60.5206%" y="463.50"></text></g><g><title>std::collections::hash::map::RandomState::new (155 samples, 0.12%)</title><rect x="60.2706%" y="437" width="0.1162%" height="15" fill="rgb(216,101,39)" fg:x="80395" fg:w="155"/><text x="60.5206%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (155 samples, 0.12%)</title><rect x="60.2706%" y="421" width="0.1162%" height="15" fill="rgb(212,228,48)" fg:x="80395" fg:w="155"/><text x="60.5206%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (155 samples, 0.12%)</title><rect x="60.2706%" y="405" width="0.1162%" height="15" fill="rgb(250,6,50)" fg:x="80395" fg:w="155"/><text x="60.5206%" y="415.50"></text></g><g><title>std::collections::hash::map::RandomState::new::{{closure}} (106 samples, 0.08%)</title><rect x="60.3074%" y="389" width="0.0795%" height="15" fill="rgb(250,160,48)" fg:x="80444" fg:w="106"/><text x="60.5574%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (52 samples, 0.04%)</title><rect x="60.3479%" y="373" width="0.0390%" height="15" fill="rgb(244,216,33)" fg:x="80498" fg:w="52"/><text x="60.5979%" y="383.50"></text></g><g><title>&lt;u8 as core::iter::range::Step&gt;::forward_unchecked (27 samples, 0.02%)</title><rect x="60.5780%" y="325" width="0.0202%" height="15" fill="rgb(207,157,5)" fg:x="80805" fg:w="27"/><text x="60.8280%" y="335.50"></text></g><g><title>core::num::&lt;impl u8&gt;::unchecked_add (27 samples, 0.02%)</title><rect x="60.5780%" y="309" width="0.0202%" height="15" fill="rgb(228,199,8)" fg:x="80805" fg:w="27"/><text x="60.8280%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (280 samples, 0.21%)</title><rect x="60.5982%" y="325" width="0.2099%" height="15" fill="rgb(227,80,20)" fg:x="80832" fg:w="280"/><text x="60.8482%" y="335.50"></text></g><g><title>hashbrown::map::make_insert_hash (296 samples, 0.22%)</title><rect x="60.8366%" y="245" width="0.2219%" height="15" fill="rgb(222,9,33)" fg:x="81150" fg:w="296"/><text x="61.0866%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (41 samples, 0.03%)</title><rect x="61.0278%" y="229" width="0.0307%" height="15" fill="rgb(239,44,28)" fg:x="81405" fg:w="41"/><text x="61.2778%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (352 samples, 0.26%)</title><rect x="62.4087%" y="197" width="0.2639%" height="15" fill="rgb(249,187,43)" fg:x="83247" fg:w="352"/><text x="62.6587%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (348 samples, 0.26%)</title><rect x="62.4117%" y="181" width="0.2609%" height="15" fill="rgb(216,141,28)" fg:x="83251" fg:w="348"/><text x="62.6617%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (31 samples, 0.02%)</title><rect x="62.6734%" y="197" width="0.0232%" height="15" fill="rgb(230,154,53)" fg:x="83600" fg:w="31"/><text x="62.9234%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (31 samples, 0.02%)</title><rect x="62.6734%" y="181" width="0.0232%" height="15" fill="rgb(227,82,4)" fg:x="83600" fg:w="31"/><text x="62.9234%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (31 samples, 0.02%)</title><rect x="62.6734%" y="165" width="0.0232%" height="15" fill="rgb(220,107,16)" fg:x="83600" fg:w="31"/><text x="62.9234%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (31 samples, 0.02%)</title><rect x="62.6734%" y="149" width="0.0232%" height="15" fill="rgb(207,187,2)" fg:x="83600" fg:w="31"/><text x="62.9234%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (31 samples, 0.02%)</title><rect x="62.6734%" y="133" width="0.0232%" height="15" fill="rgb(210,162,52)" fg:x="83600" fg:w="31"/><text x="62.9234%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (336 samples, 0.25%)</title><rect x="62.6966%" y="197" width="0.2519%" height="15" fill="rgb(217,216,49)" fg:x="83631" fg:w="336"/><text x="62.9466%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (2,749 samples, 2.06%)</title><rect x="62.9485%" y="197" width="2.0609%" height="15" fill="rgb(218,146,49)" fg:x="83967" fg:w="2749"/><text x="63.1985%" y="207.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (578 samples, 0.43%)</title><rect x="65.0094%" y="197" width="0.4333%" height="15" fill="rgb(216,55,40)" fg:x="86716" fg:w="578"/><text x="65.2594%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (578 samples, 0.43%)</title><rect x="65.0094%" y="181" width="0.4333%" height="15" fill="rgb(208,196,21)" fg:x="86716" fg:w="578"/><text x="65.2594%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (5,869 samples, 4.40%)</title><rect x="61.0586%" y="245" width="4.3999%" height="15" fill="rgb(242,117,42)" fg:x="81446" fg:w="5869"/><text x="61.3086%" y="255.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5,869 samples, 4.40%)</title><rect x="61.0586%" y="229" width="4.3999%" height="15" fill="rgb(210,11,23)" fg:x="81446" fg:w="5869"/><text x="61.3086%" y="239.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5,869 samples, 4.40%)</title><rect x="61.0586%" y="213" width="4.3999%" height="15" fill="rgb(217,110,2)" fg:x="81446" fg:w="5869"/><text x="61.3086%" y="223.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (21 samples, 0.02%)</title><rect x="65.4427%" y="197" width="0.0157%" height="15" fill="rgb(229,77,54)" fg:x="87294" fg:w="21"/><text x="65.6927%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (21 samples, 0.02%)</title><rect x="65.4427%" y="181" width="0.0157%" height="15" fill="rgb(218,53,16)" fg:x="87294" fg:w="21"/><text x="65.6927%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (21 samples, 0.02%)</title><rect x="65.4427%" y="165" width="0.0157%" height="15" fill="rgb(215,38,13)" fg:x="87294" fg:w="21"/><text x="65.6927%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7,195 samples, 5.39%)</title><rect x="60.3966%" y="405" width="5.3940%" height="15" fill="rgb(235,42,18)" fg:x="80563" fg:w="7195"/><text x="60.6466%" y="415.50">core::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,153 samples, 5.36%)</title><rect x="60.4281%" y="389" width="5.3625%" height="15" fill="rgb(219,66,54)" fg:x="80605" fg:w="7153"/><text x="60.6781%" y="399.50">&lt;core::..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (7,051 samples, 5.29%)</title><rect x="60.5045%" y="373" width="5.2860%" height="15" fill="rgb(222,205,4)" fg:x="80707" fg:w="7051"/><text x="60.7545%" y="383.50">core::..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (7,051 samples, 5.29%)</title><rect x="60.5045%" y="357" width="5.2860%" height="15" fill="rgb(227,213,46)" fg:x="80707" fg:w="7051"/><text x="60.7545%" y="367.50">core::..</text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (7,051 samples, 5.29%)</title><rect x="60.5045%" y="341" width="5.2860%" height="15" fill="rgb(250,145,42)" fg:x="80707" fg:w="7051"/><text x="60.7545%" y="351.50">&lt;core:..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (6,646 samples, 4.98%)</title><rect x="60.8082%" y="325" width="4.9824%" height="15" fill="rgb(219,15,2)" fg:x="81112" fg:w="6646"/><text x="61.0582%" y="335.50">core::..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (6,646 samples, 4.98%)</title><rect x="60.8082%" y="309" width="4.9824%" height="15" fill="rgb(231,181,52)" fg:x="81112" fg:w="6646"/><text x="61.0582%" y="319.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (6,646 samples, 4.98%)</title><rect x="60.8082%" y="293" width="4.9824%" height="15" fill="rgb(235,1,42)" fg:x="81112" fg:w="6646"/><text x="61.0582%" y="303.50">core::..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (6,646 samples, 4.98%)</title><rect x="60.8082%" y="277" width="4.9824%" height="15" fill="rgb(249,88,27)" fg:x="81112" fg:w="6646"/><text x="61.0582%" y="287.50">&lt;hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6,646 samples, 4.98%)</title><rect x="60.8082%" y="261" width="4.9824%" height="15" fill="rgb(235,145,16)" fg:x="81112" fg:w="6646"/><text x="61.0582%" y="271.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (443 samples, 0.33%)</title><rect x="65.4584%" y="245" width="0.3321%" height="15" fill="rgb(237,114,19)" fg:x="87315" fg:w="443"/><text x="65.7084%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (60 samples, 0.04%)</title><rect x="65.7905%" y="405" width="0.0450%" height="15" fill="rgb(238,51,50)" fg:x="87758" fg:w="60"/><text x="66.0405%" y="415.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (7,409 samples, 5.55%)</title><rect x="60.3868%" y="453" width="5.5544%" height="15" fill="rgb(205,194,25)" fg:x="80550" fg:w="7409"/><text x="60.6368%" y="463.50">&lt;std::c..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (7,409 samples, 5.55%)</title><rect x="60.3868%" y="437" width="5.5544%" height="15" fill="rgb(215,203,17)" fg:x="80550" fg:w="7409"/><text x="60.6368%" y="447.50">&lt;hashbr..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7,409 samples, 5.55%)</title><rect x="60.3868%" y="421" width="5.5544%" height="15" fill="rgb(233,112,49)" fg:x="80550" fg:w="7409"/><text x="60.6368%" y="431.50">&lt;hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (141 samples, 0.11%)</title><rect x="65.8355%" y="405" width="0.1057%" height="15" fill="rgb(241,130,26)" fg:x="87818" fg:w="141"/><text x="66.0855%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (141 samples, 0.11%)</title><rect x="65.8355%" y="389" width="0.1057%" height="15" fill="rgb(252,223,19)" fg:x="87818" fg:w="141"/><text x="66.0855%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (90 samples, 0.07%)</title><rect x="65.8738%" y="373" width="0.0675%" height="15" fill="rgb(211,95,25)" fg:x="87869" fg:w="90"/><text x="66.1238%" y="383.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7,625 samples, 5.72%)</title><rect x="60.2706%" y="469" width="5.7163%" height="15" fill="rgb(251,182,27)" fg:x="80395" fg:w="7625"/><text x="60.5206%" y="479.50">&lt;std::c..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::with_hasher (61 samples, 0.05%)</title><rect x="65.9412%" y="453" width="0.0457%" height="15" fill="rgb(238,24,4)" fg:x="87959" fg:w="61"/><text x="66.1912%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (15 samples, 0.01%)</title><rect x="66.0117%" y="373" width="0.0112%" height="15" fill="rgb(224,220,25)" fg:x="88053" fg:w="15"/><text x="66.2617%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (15 samples, 0.01%)</title><rect x="66.0117%" y="357" width="0.0112%" height="15" fill="rgb(239,133,26)" fg:x="88053" fg:w="15"/><text x="66.2617%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (46 samples, 0.03%)</title><rect x="66.0229%" y="373" width="0.0345%" height="15" fill="rgb(211,94,48)" fg:x="88068" fg:w="46"/><text x="66.2729%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_iter_from (89 samples, 0.07%)</title><rect x="65.9945%" y="405" width="0.0667%" height="15" fill="rgb(239,87,6)" fg:x="88030" fg:w="89"/><text x="66.2445%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_allocation (89 samples, 0.07%)</title><rect x="65.9945%" y="389" width="0.0667%" height="15" fill="rgb(227,62,0)" fg:x="88030" fg:w="89"/><text x="66.2445%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (128 samples, 0.10%)</title><rect x="66.0612%" y="373" width="0.0960%" height="15" fill="rgb(211,226,4)" fg:x="88119" fg:w="128"/><text x="66.3112%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (128 samples, 0.10%)</title><rect x="66.0612%" y="357" width="0.0960%" height="15" fill="rgb(253,38,52)" fg:x="88119" fg:w="128"/><text x="66.3112%" y="367.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (245 samples, 0.18%)</title><rect x="65.9870%" y="469" width="0.1837%" height="15" fill="rgb(229,126,40)" fg:x="88020" fg:w="245"/><text x="66.2370%" y="479.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (235 samples, 0.18%)</title><rect x="65.9945%" y="453" width="0.1762%" height="15" fill="rgb(229,165,44)" fg:x="88030" fg:w="235"/><text x="66.2445%" y="463.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (235 samples, 0.18%)</title><rect x="65.9945%" y="437" width="0.1762%" height="15" fill="rgb(247,95,47)" fg:x="88030" fg:w="235"/><text x="66.2445%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (235 samples, 0.18%)</title><rect x="65.9945%" y="421" width="0.1762%" height="15" fill="rgb(216,140,30)" fg:x="88030" fg:w="235"/><text x="66.2445%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (146 samples, 0.11%)</title><rect x="66.0612%" y="405" width="0.1095%" height="15" fill="rgb(246,214,8)" fg:x="88119" fg:w="146"/><text x="66.3112%" y="415.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (146 samples, 0.11%)</title><rect x="66.0612%" y="389" width="0.1095%" height="15" fill="rgb(227,224,15)" fg:x="88119" fg:w="146"/><text x="66.3112%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (14 samples, 0.01%)</title><rect x="66.1601%" y="373" width="0.0105%" height="15" fill="rgb(233,175,4)" fg:x="88251" fg:w="14"/><text x="66.4101%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (14 samples, 0.01%)</title><rect x="66.1601%" y="357" width="0.0105%" height="15" fill="rgb(221,66,45)" fg:x="88251" fg:w="14"/><text x="66.4101%" y="367.50"></text></g><g><title>__GI___libc_free (202 samples, 0.15%)</title><rect x="66.1706%" y="469" width="0.1514%" height="15" fill="rgb(221,178,18)" fg:x="88265" fg:w="202"/><text x="66.4206%" y="479.50"></text></g><g><title>__rdl_dealloc (84 samples, 0.06%)</title><rect x="66.3221%" y="469" width="0.0630%" height="15" fill="rgb(213,81,29)" fg:x="88467" fg:w="84"/><text x="66.5721%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (84 samples, 0.06%)</title><rect x="66.3221%" y="453" width="0.0630%" height="15" fill="rgb(220,89,49)" fg:x="88467" fg:w="84"/><text x="66.5721%" y="463.50"></text></g><g><title>__rust_dealloc (111 samples, 0.08%)</title><rect x="66.3850%" y="469" width="0.0832%" height="15" fill="rgb(227,60,33)" fg:x="88551" fg:w="111"/><text x="66.6350%" y="479.50"></text></g><g><title>_int_free (937 samples, 0.70%)</title><rect x="66.4683%" y="469" width="0.7025%" height="15" fill="rgb(205,113,12)" fg:x="88662" fg:w="937"/><text x="66.7183%" y="479.50"></text></g><g><title>tcache_put (155 samples, 0.12%)</title><rect x="67.0545%" y="453" width="0.1162%" height="15" fill="rgb(211,32,1)" fg:x="89444" fg:w="155"/><text x="67.3045%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.01%)</title><rect x="67.9789%" y="405" width="0.0127%" height="15" fill="rgb(246,2,12)" fg:x="90677" fg:w="17"/><text x="68.2289%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (67 samples, 0.05%)</title><rect x="67.9916%" y="405" width="0.0502%" height="15" fill="rgb(243,37,27)" fg:x="90694" fg:w="67"/><text x="68.2416%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (63 samples, 0.05%)</title><rect x="67.9946%" y="389" width="0.0472%" height="15" fill="rgb(248,211,31)" fg:x="90698" fg:w="63"/><text x="68.2446%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (63 samples, 0.05%)</title><rect x="67.9946%" y="373" width="0.0472%" height="15" fill="rgb(242,146,47)" fg:x="90698" fg:w="63"/><text x="68.2446%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.05%)</title><rect x="68.0426%" y="405" width="0.0532%" height="15" fill="rgb(206,70,20)" fg:x="90762" fg:w="71"/><text x="68.2926%" y="415.50"></text></g><g><title>&lt;itertools::combinations::LazyBuffer&lt;I&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (88 samples, 0.07%)</title><rect x="68.0958%" y="405" width="0.0660%" height="15" fill="rgb(215,10,51)" fg:x="90833" fg:w="88"/><text x="68.3458%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (88 samples, 0.07%)</title><rect x="68.0958%" y="389" width="0.0660%" height="15" fill="rgb(243,178,53)" fg:x="90833" fg:w="88"/><text x="68.3458%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (48 samples, 0.04%)</title><rect x="68.1258%" y="373" width="0.0360%" height="15" fill="rgb(233,221,20)" fg:x="90873" fg:w="48"/><text x="68.3758%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (48 samples, 0.04%)</title><rect x="68.1258%" y="357" width="0.0360%" height="15" fill="rgb(218,95,35)" fg:x="90873" fg:w="48"/><text x="68.3758%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (138 samples, 0.10%)</title><rect x="68.1618%" y="405" width="0.1035%" height="15" fill="rgb(229,13,5)" fg:x="90921" fg:w="138"/><text x="68.4118%" y="415.50"></text></g><g><title>checked_request2size (18 samples, 0.01%)</title><rect x="68.5629%" y="277" width="0.0135%" height="15" fill="rgb(252,164,30)" fg:x="91456" fg:w="18"/><text x="68.8129%" y="287.50"></text></g><g><title>__GI___libc_malloc (468 samples, 0.35%)</title><rect x="68.3552%" y="293" width="0.3509%" height="15" fill="rgb(232,68,36)" fg:x="91179" fg:w="468"/><text x="68.6052%" y="303.50"></text></g><g><title>tcache_get (173 samples, 0.13%)</title><rect x="68.5764%" y="277" width="0.1297%" height="15" fill="rgb(219,59,54)" fg:x="91474" fg:w="173"/><text x="68.8264%" y="287.50"></text></g><g><title>__rdl_alloc (127 samples, 0.10%)</title><rect x="68.7060%" y="293" width="0.0952%" height="15" fill="rgb(250,92,33)" fg:x="91647" fg:w="127"/><text x="68.9560%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (77 samples, 0.06%)</title><rect x="68.7435%" y="277" width="0.0577%" height="15" fill="rgb(229,162,54)" fg:x="91697" fg:w="77"/><text x="68.9935%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (799 samples, 0.60%)</title><rect x="68.2652%" y="405" width="0.5990%" height="15" fill="rgb(244,114,52)" fg:x="91059" fg:w="799"/><text x="68.5152%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (799 samples, 0.60%)</title><rect x="68.2652%" y="389" width="0.5990%" height="15" fill="rgb(212,211,43)" fg:x="91059" fg:w="799"/><text x="68.5152%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (792 samples, 0.59%)</title><rect x="68.2705%" y="373" width="0.5937%" height="15" fill="rgb(226,147,8)" fg:x="91066" fg:w="792"/><text x="68.5205%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (792 samples, 0.59%)</title><rect x="68.2705%" y="357" width="0.5937%" height="15" fill="rgb(226,23,13)" fg:x="91066" fg:w="792"/><text x="68.5205%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (785 samples, 0.59%)</title><rect x="68.2757%" y="341" width="0.5885%" height="15" fill="rgb(240,63,4)" fg:x="91073" fg:w="785"/><text x="68.5257%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (785 samples, 0.59%)</title><rect x="68.2757%" y="325" width="0.5885%" height="15" fill="rgb(221,1,32)" fg:x="91073" fg:w="785"/><text x="68.5257%" y="335.50"></text></g><g><title>alloc::alloc::alloc (700 samples, 0.52%)</title><rect x="68.3395%" y="309" width="0.5248%" height="15" fill="rgb(242,117,10)" fg:x="91158" fg:w="700"/><text x="68.5895%" y="319.50"></text></g><g><title>__rust_alloc (84 samples, 0.06%)</title><rect x="68.8013%" y="293" width="0.0630%" height="15" fill="rgb(249,172,44)" fg:x="91774" fg:w="84"/><text x="69.0513%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (17 samples, 0.01%)</title><rect x="68.9190%" y="293" width="0.0127%" height="15" fill="rgb(244,46,45)" fg:x="91931" fg:w="17"/><text x="69.1690%" y="303.50"></text></g><g><title>&lt;std::collections::hash::set::IntoIter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 0.07%)</title><rect x="68.8725%" y="389" width="0.0697%" height="15" fill="rgb(206,43,17)" fg:x="91869" fg:w="93"/><text x="69.1225%" y="399.50"></text></g><g><title>&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 0.07%)</title><rect x="68.8725%" y="373" width="0.0697%" height="15" fill="rgb(239,218,39)" fg:x="91869" fg:w="93"/><text x="69.1225%" y="383.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 0.07%)</title><rect x="68.8725%" y="357" width="0.0697%" height="15" fill="rgb(208,169,54)" fg:x="91869" fg:w="93"/><text x="69.1225%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 0.07%)</title><rect x="68.8725%" y="341" width="0.0697%" height="15" fill="rgb(247,25,42)" fg:x="91869" fg:w="93"/><text x="69.1225%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.05%)</title><rect x="68.8942%" y="325" width="0.0480%" height="15" fill="rgb(226,23,31)" fg:x="91898" fg:w="64"/><text x="69.1442%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.05%)</title><rect x="68.8957%" y="309" width="0.0465%" height="15" fill="rgb(247,16,28)" fg:x="91900" fg:w="62"/><text x="69.1457%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (14 samples, 0.01%)</title><rect x="68.9317%" y="293" width="0.0105%" height="15" fill="rgb(231,147,38)" fg:x="91948" fg:w="14"/><text x="69.1817%" y="303.50"></text></g><g><title>itertools::combinations::LazyBuffer&lt;I&gt;::get_next (118 samples, 0.09%)</title><rect x="68.8642%" y="405" width="0.0885%" height="15" fill="rgb(253,81,48)" fg:x="91858" fg:w="118"/><text x="69.1142%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.01%)</title><rect x="68.9422%" y="389" width="0.0105%" height="15" fill="rgb(249,222,43)" fg:x="91962" fg:w="14"/><text x="69.1922%" y="399.50"></text></g><g><title>itertools::combinations::LazyBuffer&lt;I&gt;::is_done (64 samples, 0.05%)</title><rect x="68.9527%" y="405" width="0.0480%" height="15" fill="rgb(221,3,27)" fg:x="91976" fg:w="64"/><text x="69.2027%" y="415.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,231 samples, 1.67%)</title><rect x="67.3289%" y="421" width="1.6725%" height="15" fill="rgb(228,180,5)" fg:x="89810" fg:w="2231"/><text x="67.5789%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (185 samples, 0.14%)</title><rect x="69.0209%" y="341" width="0.1387%" height="15" fill="rgb(227,131,42)" fg:x="92067" fg:w="185"/><text x="69.2709%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (141 samples, 0.11%)</title><rect x="69.0539%" y="325" width="0.1057%" height="15" fill="rgb(212,3,39)" fg:x="92111" fg:w="141"/><text x="69.3039%" y="335.50"></text></g><g><title>__GI___libc_free (133 samples, 0.10%)</title><rect x="69.1686%" y="213" width="0.0997%" height="15" fill="rgb(226,45,5)" fg:x="92264" fg:w="133"/><text x="69.4186%" y="223.50"></text></g><g><title>__rdl_dealloc (40 samples, 0.03%)</title><rect x="69.2683%" y="213" width="0.0300%" height="15" fill="rgb(215,167,45)" fg:x="92397" fg:w="40"/><text x="69.5183%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (40 samples, 0.03%)</title><rect x="69.2683%" y="197" width="0.0300%" height="15" fill="rgb(250,218,53)" fg:x="92397" fg:w="40"/><text x="69.5183%" y="207.50"></text></g><g><title>__rust_dealloc (68 samples, 0.05%)</title><rect x="69.2983%" y="213" width="0.0510%" height="15" fill="rgb(207,140,0)" fg:x="92437" fg:w="68"/><text x="69.5483%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (717 samples, 0.54%)</title><rect x="69.1679%" y="245" width="0.5375%" height="15" fill="rgb(238,133,51)" fg:x="92263" fg:w="717"/><text x="69.4179%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (717 samples, 0.54%)</title><rect x="69.1679%" y="229" width="0.5375%" height="15" fill="rgb(218,203,53)" fg:x="92263" fg:w="717"/><text x="69.4179%" y="239.50"></text></g><g><title>_int_free (475 samples, 0.36%)</title><rect x="69.3493%" y="213" width="0.3561%" height="15" fill="rgb(226,184,25)" fg:x="92505" fg:w="475"/><text x="69.5993%" y="223.50"></text></g><g><title>tcache_put (59 samples, 0.04%)</title><rect x="69.6611%" y="197" width="0.0442%" height="15" fill="rgb(231,121,21)" fg:x="92921" fg:w="59"/><text x="69.9111%" y="207.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}} (1,006 samples, 0.75%)</title><rect x="69.0014%" y="405" width="0.7542%" height="15" fill="rgb(251,14,34)" fg:x="92041" fg:w="1006"/><text x="69.2514%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (982 samples, 0.74%)</title><rect x="69.0194%" y="389" width="0.7362%" height="15" fill="rgb(249,193,11)" fg:x="92065" fg:w="982"/><text x="69.2694%" y="399.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&gt;::sum (982 samples, 0.74%)</title><rect x="69.0194%" y="373" width="0.7362%" height="15" fill="rgb(220,172,37)" fg:x="92065" fg:w="982"/><text x="69.2694%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (982 samples, 0.74%)</title><rect x="69.0194%" y="357" width="0.7362%" height="15" fill="rgb(231,229,43)" fg:x="92065" fg:w="982"/><text x="69.2694%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (784 samples, 0.59%)</title><rect x="69.1679%" y="341" width="0.5878%" height="15" fill="rgb(250,161,5)" fg:x="92263" fg:w="784"/><text x="69.4179%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (784 samples, 0.59%)</title><rect x="69.1679%" y="325" width="0.5878%" height="15" fill="rgb(218,225,18)" fg:x="92263" fg:w="784"/><text x="69.4179%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (784 samples, 0.59%)</title><rect x="69.1679%" y="309" width="0.5878%" height="15" fill="rgb(245,45,42)" fg:x="92263" fg:w="784"/><text x="69.4179%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (784 samples, 0.59%)</title><rect x="69.1679%" y="293" width="0.5878%" height="15" fill="rgb(211,115,1)" fg:x="92263" fg:w="784"/><text x="69.4179%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (784 samples, 0.59%)</title><rect x="69.1679%" y="277" width="0.5878%" height="15" fill="rgb(248,133,52)" fg:x="92263" fg:w="784"/><text x="69.4179%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (784 samples, 0.59%)</title><rect x="69.1679%" y="261" width="0.5878%" height="15" fill="rgb(238,100,21)" fg:x="92263" fg:w="784"/><text x="69.4179%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (67 samples, 0.05%)</title><rect x="69.7054%" y="245" width="0.0502%" height="15" fill="rgb(247,144,11)" fg:x="92980" fg:w="67"/><text x="69.9554%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (3,449 samples, 2.59%)</title><rect x="67.1707%" y="469" width="2.5857%" height="15" fill="rgb(206,164,16)" fg:x="89599" fg:w="3449"/><text x="67.4207%" y="479.50">co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,449 samples, 2.59%)</title><rect x="67.1707%" y="453" width="2.5857%" height="15" fill="rgb(222,34,3)" fg:x="89599" fg:w="3449"/><text x="67.4207%" y="463.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,449 samples, 2.59%)</title><rect x="67.1707%" y="437" width="2.5857%" height="15" fill="rgb(248,82,4)" fg:x="89599" fg:w="3449"/><text x="67.4207%" y="447.50">co..</text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (1,007 samples, 0.75%)</title><rect x="69.0014%" y="421" width="0.7549%" height="15" fill="rgb(228,81,46)" fg:x="92041" fg:w="1007"/><text x="69.2514%" y="431.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (57 samples, 0.04%)</title><rect x="69.7564%" y="373" width="0.0427%" height="15" fill="rgb(227,67,47)" fg:x="93048" fg:w="57"/><text x="70.0064%" y="383.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (57 samples, 0.04%)</title><rect x="69.7564%" y="357" width="0.0427%" height="15" fill="rgb(215,93,53)" fg:x="93048" fg:w="57"/><text x="70.0064%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (115 samples, 0.09%)</title><rect x="69.9213%" y="357" width="0.0862%" height="15" fill="rgb(248,194,39)" fg:x="93268" fg:w="115"/><text x="70.1713%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (115 samples, 0.09%)</title><rect x="69.9213%" y="341" width="0.0862%" height="15" fill="rgb(215,5,19)" fg:x="93268" fg:w="115"/><text x="70.1713%" y="351.50"></text></g><g><title>core::mem::replace (115 samples, 0.09%)</title><rect x="69.9213%" y="325" width="0.0862%" height="15" fill="rgb(226,215,51)" fg:x="93268" fg:w="115"/><text x="70.1713%" y="335.50"></text></g><g><title>core::ptr::write (115 samples, 0.09%)</title><rect x="69.9213%" y="309" width="0.0862%" height="15" fill="rgb(225,56,26)" fg:x="93268" fg:w="115"/><text x="70.1713%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (415 samples, 0.31%)</title><rect x="69.7564%" y="437" width="0.3111%" height="15" fill="rgb(222,75,29)" fg:x="93048" fg:w="415"/><text x="70.0064%" y="447.50"></text></g><g><title>std::collections::hash::map::RandomState::new (415 samples, 0.31%)</title><rect x="69.7564%" y="421" width="0.3111%" height="15" fill="rgb(236,139,6)" fg:x="93048" fg:w="415"/><text x="70.0064%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (415 samples, 0.31%)</title><rect x="69.7564%" y="405" width="0.3111%" height="15" fill="rgb(223,137,36)" fg:x="93048" fg:w="415"/><text x="70.0064%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (415 samples, 0.31%)</title><rect x="69.7564%" y="389" width="0.3111%" height="15" fill="rgb(226,99,2)" fg:x="93048" fg:w="415"/><text x="70.0064%" y="399.50"></text></g><g><title>std::collections::hash::map::RandomState::new::{{closure}} (358 samples, 0.27%)</title><rect x="69.7991%" y="373" width="0.2684%" height="15" fill="rgb(206,133,23)" fg:x="93105" fg:w="358"/><text x="70.0491%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (80 samples, 0.06%)</title><rect x="70.0075%" y="357" width="0.0600%" height="15" fill="rgb(243,173,15)" fg:x="93383" fg:w="80"/><text x="70.2575%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (53 samples, 0.04%)</title><rect x="72.4724%" y="213" width="0.0397%" height="15" fill="rgb(228,69,28)" fg:x="96671" fg:w="53"/><text x="72.7224%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (53 samples, 0.04%)</title><rect x="72.4724%" y="197" width="0.0397%" height="15" fill="rgb(212,51,22)" fg:x="96671" fg:w="53"/><text x="72.7224%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (53 samples, 0.04%)</title><rect x="72.4724%" y="181" width="0.0397%" height="15" fill="rgb(227,113,0)" fg:x="96671" fg:w="53"/><text x="72.7224%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (703 samples, 0.53%)</title><rect x="72.5122%" y="213" width="0.5270%" height="15" fill="rgb(252,84,27)" fg:x="96724" fg:w="703"/><text x="72.7622%" y="223.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,394 samples, 1.79%)</title><rect x="71.4199%" y="309" width="1.7947%" height="15" fill="rgb(223,145,39)" fg:x="95267" fg:w="2394"/><text x="71.6699%" y="319.50">&lt;..</text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,394 samples, 1.79%)</title><rect x="71.4199%" y="293" width="1.7947%" height="15" fill="rgb(239,219,30)" fg:x="95267" fg:w="2394"/><text x="71.6699%" y="303.50">&lt;..</text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,394 samples, 1.79%)</title><rect x="71.4199%" y="277" width="1.7947%" height="15" fill="rgb(224,196,39)" fg:x="95267" fg:w="2394"/><text x="71.6699%" y="287.50">&lt;..</text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,394 samples, 1.79%)</title><rect x="71.4199%" y="261" width="1.7947%" height="15" fill="rgb(205,35,43)" fg:x="95267" fg:w="2394"/><text x="71.6699%" y="271.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,674 samples, 1.25%)</title><rect x="71.9597%" y="245" width="1.2550%" height="15" fill="rgb(228,201,21)" fg:x="95987" fg:w="1674"/><text x="72.2097%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,352 samples, 1.01%)</title><rect x="72.2011%" y="229" width="1.0136%" height="15" fill="rgb(237,118,16)" fg:x="96309" fg:w="1352"/><text x="72.4511%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (234 samples, 0.18%)</title><rect x="73.0392%" y="213" width="0.1754%" height="15" fill="rgb(241,17,19)" fg:x="97427" fg:w="234"/><text x="73.2892%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (226 samples, 0.17%)</title><rect x="73.3308%" y="245" width="0.1694%" height="15" fill="rgb(214,10,25)" fg:x="97816" fg:w="226"/><text x="73.5808%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (107 samples, 0.08%)</title><rect x="73.4200%" y="229" width="0.0802%" height="15" fill="rgb(238,37,29)" fg:x="97935" fg:w="107"/><text x="73.6700%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2,191 samples, 1.64%)</title><rect x="75.5371%" y="197" width="1.6426%" height="15" fill="rgb(253,83,25)" fg:x="100759" fg:w="2191"/><text x="75.7871%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2,061 samples, 1.55%)</title><rect x="75.6346%" y="181" width="1.5451%" height="15" fill="rgb(234,192,12)" fg:x="100889" fg:w="2061"/><text x="75.8846%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (277 samples, 0.21%)</title><rect x="77.1804%" y="197" width="0.2077%" height="15" fill="rgb(241,216,45)" fg:x="102951" fg:w="277"/><text x="77.4304%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (277 samples, 0.21%)</title><rect x="77.1804%" y="181" width="0.2077%" height="15" fill="rgb(242,22,33)" fg:x="102951" fg:w="277"/><text x="77.4304%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (277 samples, 0.21%)</title><rect x="77.1804%" y="165" width="0.2077%" height="15" fill="rgb(231,105,49)" fg:x="102951" fg:w="277"/><text x="77.4304%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (277 samples, 0.21%)</title><rect x="77.1804%" y="149" width="0.2077%" height="15" fill="rgb(218,204,15)" fg:x="102951" fg:w="277"/><text x="77.4304%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (277 samples, 0.21%)</title><rect x="77.1804%" y="133" width="0.2077%" height="15" fill="rgb(235,138,41)" fg:x="102951" fg:w="277"/><text x="77.4304%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (349 samples, 0.26%)</title><rect x="77.3881%" y="197" width="0.2616%" height="15" fill="rgb(246,0,9)" fg:x="103228" fg:w="349"/><text x="77.6381%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (1,993 samples, 1.49%)</title><rect x="77.6497%" y="197" width="1.4941%" height="15" fill="rgb(210,74,4)" fg:x="103577" fg:w="1993"/><text x="77.8997%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,150 samples, 0.86%)</title><rect x="79.1439%" y="197" width="0.8621%" height="15" fill="rgb(250,60,41)" fg:x="105570" fg:w="1150"/><text x="79.3939%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,150 samples, 0.86%)</title><rect x="79.1439%" y="181" width="0.8621%" height="15" fill="rgb(220,115,12)" fg:x="105570" fg:w="1150"/><text x="79.3939%" y="191.50"></text></g><g><title>&lt;std::collections::hash::set::Difference&lt;T,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (12,446 samples, 9.33%)</title><rect x="71.3764%" y="325" width="9.3305%" height="15" fill="rgb(237,100,13)" fg:x="95209" fg:w="12446"/><text x="71.6264%" y="335.50">&lt;std::collect..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (9,994 samples, 7.49%)</title><rect x="73.2146%" y="309" width="7.4923%" height="15" fill="rgb(213,55,26)" fg:x="97661" fg:w="9994"/><text x="73.4646%" y="319.50">std::colle..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (9,994 samples, 7.49%)</title><rect x="73.2146%" y="293" width="7.4923%" height="15" fill="rgb(216,17,4)" fg:x="97661" fg:w="9994"/><text x="73.4646%" y="303.50">hashbrown:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (9,994 samples, 7.49%)</title><rect x="73.2146%" y="277" width="7.4923%" height="15" fill="rgb(220,153,47)" fg:x="97661" fg:w="9994"/><text x="73.4646%" y="287.50">hashbrown:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (9,994 samples, 7.49%)</title><rect x="73.2146%" y="261" width="7.4923%" height="15" fill="rgb(215,131,9)" fg:x="97661" fg:w="9994"/><text x="73.4646%" y="271.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9,613 samples, 7.21%)</title><rect x="73.5003%" y="245" width="7.2067%" height="15" fill="rgb(233,46,42)" fg:x="98042" fg:w="9613"/><text x="73.7503%" y="255.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9,613 samples, 7.21%)</title><rect x="73.5003%" y="229" width="7.2067%" height="15" fill="rgb(226,86,7)" fg:x="98042" fg:w="9613"/><text x="73.7503%" y="239.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9,613 samples, 7.21%)</title><rect x="73.5003%" y="213" width="7.2067%" height="15" fill="rgb(239,226,21)" fg:x="98042" fg:w="9613"/><text x="73.7503%" y="223.50">hashbrown:..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (935 samples, 0.70%)</title><rect x="80.0060%" y="197" width="0.7010%" height="15" fill="rgb(244,137,22)" fg:x="106720" fg:w="935"/><text x="80.2560%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (935 samples, 0.70%)</title><rect x="80.0060%" y="181" width="0.7010%" height="15" fill="rgb(211,139,35)" fg:x="106720" fg:w="935"/><text x="80.2560%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (935 samples, 0.70%)</title><rect x="80.0060%" y="165" width="0.7010%" height="15" fill="rgb(214,62,50)" fg:x="106720" fg:w="935"/><text x="80.2560%" y="175.50"></text></g><g><title>hashbrown::map::make_insert_hash (60 samples, 0.04%)</title><rect x="80.7272%" y="245" width="0.0450%" height="15" fill="rgb(212,113,44)" fg:x="107682" fg:w="60"/><text x="80.9772%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 0.07%)</title><rect x="81.7010%" y="197" width="0.0720%" height="15" fill="rgb(226,150,43)" fg:x="108981" fg:w="96"/><text x="81.9510%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (86 samples, 0.06%)</title><rect x="81.7085%" y="181" width="0.0645%" height="15" fill="rgb(250,71,37)" fg:x="108991" fg:w="86"/><text x="81.9585%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (23 samples, 0.02%)</title><rect x="81.7737%" y="181" width="0.0172%" height="15" fill="rgb(219,76,19)" fg:x="109078" fg:w="23"/><text x="82.0237%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (23 samples, 0.02%)</title><rect x="81.7737%" y="165" width="0.0172%" height="15" fill="rgb(250,39,11)" fg:x="109078" fg:w="23"/><text x="82.0237%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (34 samples, 0.03%)</title><rect x="81.7737%" y="197" width="0.0255%" height="15" fill="rgb(230,64,31)" fg:x="109078" fg:w="34"/><text x="82.0237%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (234 samples, 0.18%)</title><rect x="81.7992%" y="197" width="0.1754%" height="15" fill="rgb(208,222,23)" fg:x="109112" fg:w="234"/><text x="82.0492%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (1,468 samples, 1.10%)</title><rect x="81.9747%" y="197" width="1.1005%" height="15" fill="rgb(227,125,18)" fg:x="109346" fg:w="1468"/><text x="82.2247%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (281 samples, 0.21%)</title><rect x="83.0752%" y="197" width="0.2107%" height="15" fill="rgb(234,210,9)" fg:x="110814" fg:w="281"/><text x="83.3252%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (281 samples, 0.21%)</title><rect x="83.0752%" y="181" width="0.2107%" height="15" fill="rgb(217,127,24)" fg:x="110814" fg:w="281"/><text x="83.3252%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3,361 samples, 2.52%)</title><rect x="80.7722%" y="245" width="2.5197%" height="15" fill="rgb(239,141,48)" fg:x="107742" fg:w="3361"/><text x="81.0222%" y="255.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,361 samples, 2.52%)</title><rect x="80.7722%" y="229" width="2.5197%" height="15" fill="rgb(227,109,8)" fg:x="107742" fg:w="3361"/><text x="81.0222%" y="239.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3,361 samples, 2.52%)</title><rect x="80.7722%" y="213" width="2.5197%" height="15" fill="rgb(235,184,23)" fg:x="107742" fg:w="3361"/><text x="81.0222%" y="223.50">ha..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17,355 samples, 13.01%)</title><rect x="70.4543%" y="357" width="13.0107%" height="15" fill="rgb(227,226,48)" fg:x="93979" fg:w="17355"/><text x="70.7043%" y="367.50">&lt;core::iter::adapter..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (16,125 samples, 12.09%)</title><rect x="71.3764%" y="341" width="12.0886%" height="15" fill="rgb(206,150,11)" fg:x="95209" fg:w="16125"/><text x="71.6264%" y="351.50">core::iter::traits..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3,679 samples, 2.76%)</title><rect x="80.7069%" y="325" width="2.7581%" height="15" fill="rgb(254,2,33)" fg:x="107655" fg:w="3679"/><text x="80.9569%" y="335.50">co..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3,679 samples, 2.76%)</title><rect x="80.7069%" y="309" width="2.7581%" height="15" fill="rgb(243,160,20)" fg:x="107655" fg:w="3679"/><text x="80.9569%" y="319.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3,679 samples, 2.76%)</title><rect x="80.7069%" y="293" width="2.7581%" height="15" fill="rgb(218,208,30)" fg:x="107655" fg:w="3679"/><text x="80.9569%" y="303.50">co..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (3,679 samples, 2.76%)</title><rect x="80.7069%" y="277" width="2.7581%" height="15" fill="rgb(224,120,49)" fg:x="107655" fg:w="3679"/><text x="80.9569%" y="287.50">&lt;h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,679 samples, 2.76%)</title><rect x="80.7069%" y="261" width="2.7581%" height="15" fill="rgb(246,12,2)" fg:x="107655" fg:w="3679"/><text x="80.9569%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (231 samples, 0.17%)</title><rect x="83.2919%" y="245" width="0.1732%" height="15" fill="rgb(236,117,3)" fg:x="111103" fg:w="231"/><text x="83.5419%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.08%)</title><rect x="83.4980%" y="341" width="0.0810%" height="15" fill="rgb(216,128,52)" fg:x="111378" fg:w="108"/><text x="83.7480%" y="351.50"></text></g><g><title>hashbrown::map::make_insert_hash (137 samples, 0.10%)</title><rect x="83.5797%" y="277" width="0.1027%" height="15" fill="rgb(246,145,19)" fg:x="111487" fg:w="137"/><text x="83.8297%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (125 samples, 0.09%)</title><rect x="83.5887%" y="261" width="0.0937%" height="15" fill="rgb(222,11,46)" fg:x="111499" fg:w="125"/><text x="83.8387%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.03%)</title><rect x="84.1450%" y="229" width="0.0330%" height="15" fill="rgb(245,82,36)" fg:x="112241" fg:w="44"/><text x="84.3950%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (44 samples, 0.03%)</title><rect x="84.1450%" y="213" width="0.0330%" height="15" fill="rgb(250,73,51)" fg:x="112241" fg:w="44"/><text x="84.3950%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (137 samples, 0.10%)</title><rect x="84.1825%" y="229" width="0.1027%" height="15" fill="rgb(221,189,23)" fg:x="112291" fg:w="137"/><text x="84.4325%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (789 samples, 0.59%)</title><rect x="84.2852%" y="229" width="0.5915%" height="15" fill="rgb(210,33,7)" fg:x="112428" fg:w="789"/><text x="84.5352%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (272 samples, 0.20%)</title><rect x="84.8767%" y="229" width="0.2039%" height="15" fill="rgb(210,107,22)" fg:x="113217" fg:w="272"/><text x="85.1267%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (272 samples, 0.20%)</title><rect x="84.8767%" y="213" width="0.2039%" height="15" fill="rgb(222,116,37)" fg:x="113217" fg:w="272"/><text x="85.1267%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1,869 samples, 1.40%)</title><rect x="83.6824%" y="277" width="1.4012%" height="15" fill="rgb(254,17,48)" fg:x="111624" fg:w="1869"/><text x="83.9324%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,869 samples, 1.40%)</title><rect x="83.6824%" y="261" width="1.4012%" height="15" fill="rgb(224,36,32)" fg:x="111624" fg:w="1869"/><text x="83.9324%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,869 samples, 1.40%)</title><rect x="83.6824%" y="245" width="1.4012%" height="15" fill="rgb(232,90,46)" fg:x="111624" fg:w="1869"/><text x="83.9324%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,162 samples, 1.62%)</title><rect x="83.5790%" y="341" width="1.6208%" height="15" fill="rgb(241,66,40)" fg:x="111486" fg:w="2162"/><text x="83.8290%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2,162 samples, 1.62%)</title><rect x="83.5790%" y="325" width="1.6208%" height="15" fill="rgb(249,184,29)" fg:x="111486" fg:w="2162"/><text x="83.8290%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (2,162 samples, 1.62%)</title><rect x="83.5790%" y="309" width="1.6208%" height="15" fill="rgb(231,181,1)" fg:x="111486" fg:w="2162"/><text x="83.8290%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,162 samples, 1.62%)</title><rect x="83.5790%" y="293" width="1.6208%" height="15" fill="rgb(224,94,2)" fg:x="111486" fg:w="2162"/><text x="83.8290%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (155 samples, 0.12%)</title><rect x="85.0836%" y="277" width="0.1162%" height="15" fill="rgb(229,170,15)" fg:x="113493" fg:w="155"/><text x="85.3336%" y="287.50"></text></g><g><title>__GI___libc_free (85 samples, 0.06%)</title><rect x="85.2088%" y="213" width="0.0637%" height="15" fill="rgb(240,127,35)" fg:x="113660" fg:w="85"/><text x="85.4588%" y="223.50"></text></g><g><title>__rdl_dealloc (44 samples, 0.03%)</title><rect x="85.2725%" y="213" width="0.0330%" height="15" fill="rgb(248,196,34)" fg:x="113745" fg:w="44"/><text x="85.5225%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (44 samples, 0.03%)</title><rect x="85.2725%" y="197" width="0.0330%" height="15" fill="rgb(236,137,7)" fg:x="113745" fg:w="44"/><text x="85.5225%" y="207.50"></text></g><g><title>__rust_dealloc (72 samples, 0.05%)</title><rect x="85.3055%" y="213" width="0.0540%" height="15" fill="rgb(235,127,16)" fg:x="113789" fg:w="72"/><text x="85.5555%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (309 samples, 0.23%)</title><rect x="85.1998%" y="245" width="0.2317%" height="15" fill="rgb(250,192,54)" fg:x="113648" fg:w="309"/><text x="85.4498%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (309 samples, 0.23%)</title><rect x="85.1998%" y="229" width="0.2317%" height="15" fill="rgb(218,98,20)" fg:x="113648" fg:w="309"/><text x="85.4498%" y="239.50"></text></g><g><title>_int_free (96 samples, 0.07%)</title><rect x="85.3595%" y="213" width="0.0720%" height="15" fill="rgb(230,176,47)" fg:x="113861" fg:w="96"/><text x="85.6095%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (20,329 samples, 15.24%)</title><rect x="70.1964%" y="389" width="15.2403%" height="15" fill="rgb(244,2,33)" fg:x="93635" fg:w="20329"/><text x="70.4464%" y="399.50">core::iter::traits::ite..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20,251 samples, 15.18%)</title><rect x="70.2549%" y="373" width="15.1818%" height="15" fill="rgb(231,100,17)" fg:x="93713" fg:w="20251"/><text x="70.5049%" y="383.50">&lt;core::iter::adapters::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,630 samples, 1.97%)</title><rect x="83.4650%" y="357" width="1.9717%" height="15" fill="rgb(245,23,12)" fg:x="111334" fg:w="2630"/><text x="83.7150%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (316 samples, 0.24%)</title><rect x="85.1998%" y="341" width="0.2369%" height="15" fill="rgb(249,55,22)" fg:x="113648" fg:w="316"/><text x="85.4498%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (316 samples, 0.24%)</title><rect x="85.1998%" y="325" width="0.2369%" height="15" fill="rgb(207,134,9)" fg:x="113648" fg:w="316"/><text x="85.4498%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (316 samples, 0.24%)</title><rect x="85.1998%" y="309" width="0.2369%" height="15" fill="rgb(218,134,0)" fg:x="113648" fg:w="316"/><text x="85.4498%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (316 samples, 0.24%)</title><rect x="85.1998%" y="293" width="0.2369%" height="15" fill="rgb(213,212,33)" fg:x="113648" fg:w="316"/><text x="85.4498%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (316 samples, 0.24%)</title><rect x="85.1998%" y="277" width="0.2369%" height="15" fill="rgb(252,106,18)" fg:x="113648" fg:w="316"/><text x="85.4498%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (316 samples, 0.24%)</title><rect x="85.1998%" y="261" width="0.2369%" height="15" fill="rgb(208,126,42)" fg:x="113648" fg:w="316"/><text x="85.4498%" y="271.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (20,683 samples, 15.51%)</title><rect x="70.0675%" y="437" width="15.5057%" height="15" fill="rgb(246,175,29)" fg:x="93463" fg:w="20683"/><text x="70.3175%" y="447.50">&lt;std::collections::hash:..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (20,683 samples, 15.51%)</title><rect x="70.0675%" y="421" width="15.5057%" height="15" fill="rgb(215,13,50)" fg:x="93463" fg:w="20683"/><text x="70.3175%" y="431.50">&lt;hashbrown::set::HashSet..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (20,683 samples, 15.51%)</title><rect x="70.0675%" y="405" width="15.5057%" height="15" fill="rgb(216,172,15)" fg:x="93463" fg:w="20683"/><text x="70.3175%" y="415.50">&lt;hashbrown::map::HashMap..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (182 samples, 0.14%)</title><rect x="85.4367%" y="389" width="0.1364%" height="15" fill="rgb(212,103,13)" fg:x="113964" fg:w="182"/><text x="85.6867%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (182 samples, 0.14%)</title><rect x="85.4367%" y="373" width="0.1364%" height="15" fill="rgb(231,171,36)" fg:x="113964" fg:w="182"/><text x="85.6867%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (97 samples, 0.07%)</title><rect x="85.5004%" y="357" width="0.0727%" height="15" fill="rgb(250,123,20)" fg:x="114049" fg:w="97"/><text x="85.7504%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (21,178 samples, 15.88%)</title><rect x="69.7564%" y="469" width="15.8768%" height="15" fill="rgb(212,53,50)" fg:x="93048" fg:w="21178"/><text x="70.0064%" y="479.50">core::iter::traits::iter..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (21,178 samples, 15.88%)</title><rect x="69.7564%" y="453" width="15.8768%" height="15" fill="rgb(243,54,12)" fg:x="93048" fg:w="21178"/><text x="70.0064%" y="463.50">&lt;std::collections::hash:..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::with_hasher (80 samples, 0.06%)</title><rect x="85.5731%" y="437" width="0.0600%" height="15" fill="rgb(234,101,34)" fg:x="114146" fg:w="80"/><text x="85.8231%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::with_hasher (15 samples, 0.01%)</title><rect x="85.6219%" y="421" width="0.0112%" height="15" fill="rgb(254,67,22)" fg:x="114211" fg:w="15"/><text x="85.8719%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_hasher (15 samples, 0.01%)</title><rect x="85.6219%" y="405" width="0.0112%" height="15" fill="rgb(250,35,47)" fg:x="114211" fg:w="15"/><text x="85.8719%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="85.6219%" y="389" width="0.0112%" height="15" fill="rgb(226,126,38)" fg:x="114211" fg:w="15"/><text x="85.8719%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_in (15 samples, 0.01%)</title><rect x="85.6219%" y="373" width="0.0112%" height="15" fill="rgb(216,138,53)" fg:x="114211" fg:w="15"/><text x="85.8719%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (1,143 samples, 0.86%)</title><rect x="85.6331%" y="469" width="0.8569%" height="15" fill="rgb(246,199,43)" fg:x="114226" fg:w="1143"/><text x="85.8831%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,095 samples, 0.82%)</title><rect x="85.6691%" y="453" width="0.8209%" height="15" fill="rgb(232,125,11)" fg:x="114274" fg:w="1095"/><text x="85.9191%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.06%)</title><rect x="86.4900%" y="421" width="0.0570%" height="15" fill="rgb(218,219,45)" fg:x="115369" fg:w="76"/><text x="86.7400%" y="431.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (68 samples, 0.05%)</title><rect x="86.4960%" y="405" width="0.0510%" height="15" fill="rgb(216,102,54)" fg:x="115377" fg:w="68"/><text x="86.7460%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (68 samples, 0.05%)</title><rect x="86.4960%" y="389" width="0.0510%" height="15" fill="rgb(250,228,7)" fg:x="115377" fg:w="68"/><text x="86.7460%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (119 samples, 0.09%)</title><rect x="86.4900%" y="469" width="0.0892%" height="15" fill="rgb(226,125,25)" fg:x="115369" fg:w="119"/><text x="86.7400%" y="479.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&lt;&amp;u8&gt;&gt;::sum (119 samples, 0.09%)</title><rect x="86.4900%" y="453" width="0.0892%" height="15" fill="rgb(224,165,27)" fg:x="115369" fg:w="119"/><text x="86.7400%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (119 samples, 0.09%)</title><rect x="86.4900%" y="437" width="0.0892%" height="15" fill="rgb(233,86,3)" fg:x="115369" fg:w="119"/><text x="86.7400%" y="447.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&lt;&amp;u8&gt;&gt;::sum::{{closure}} (43 samples, 0.03%)</title><rect x="86.5470%" y="421" width="0.0322%" height="15" fill="rgb(228,116,20)" fg:x="115445" fg:w="43"/><text x="86.7970%" y="431.50"></text></g><g><title>&lt;u8 as core::ops::arith::Add&lt;&amp;u8&gt;&gt;::add (43 samples, 0.03%)</title><rect x="86.5470%" y="405" width="0.0322%" height="15" fill="rgb(209,192,17)" fg:x="115445" fg:w="43"/><text x="86.7970%" y="415.50"></text></g><g><title>&lt;u8 as core::ops::arith::Add&gt;::add (43 samples, 0.03%)</title><rect x="86.5470%" y="389" width="0.0322%" height="15" fill="rgb(224,88,34)" fg:x="115445" fg:w="43"/><text x="86.7970%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (17 samples, 0.01%)</title><rect x="86.5792%" y="469" width="0.0127%" height="15" fill="rgb(233,38,6)" fg:x="115488" fg:w="17"/><text x="86.8292%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (17 samples, 0.01%)</title><rect x="86.5792%" y="453" width="0.0127%" height="15" fill="rgb(212,59,30)" fg:x="115488" fg:w="17"/><text x="86.8292%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="86.5792%" y="437" width="0.0127%" height="15" fill="rgb(213,80,3)" fg:x="115488" fg:w="17"/><text x="86.8292%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="86.5792%" y="421" width="0.0127%" height="15" fill="rgb(251,178,7)" fg:x="115488" fg:w="17"/><text x="86.8292%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="86.5792%" y="405" width="0.0127%" height="15" fill="rgb(213,154,26)" fg:x="115488" fg:w="17"/><text x="86.8292%" y="415.50"></text></g><g><title>__GI___libc_free (38 samples, 0.03%)</title><rect x="86.6084%" y="357" width="0.0285%" height="15" fill="rgb(238,165,49)" fg:x="115527" fg:w="38"/><text x="86.8584%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (117 samples, 0.09%)</title><rect x="86.6054%" y="389" width="0.0877%" height="15" fill="rgb(248,91,46)" fg:x="115523" fg:w="117"/><text x="86.8554%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (114 samples, 0.09%)</title><rect x="86.6077%" y="373" width="0.0855%" height="15" fill="rgb(244,21,52)" fg:x="115526" fg:w="114"/><text x="86.8577%" y="383.50"></text></g><g><title>_int_free (61 samples, 0.05%)</title><rect x="86.6474%" y="357" width="0.0457%" height="15" fill="rgb(247,122,20)" fg:x="115579" fg:w="61"/><text x="86.8974%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (146 samples, 0.11%)</title><rect x="86.5919%" y="437" width="0.1095%" height="15" fill="rgb(218,27,9)" fg:x="115505" fg:w="146"/><text x="86.8419%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (146 samples, 0.11%)</title><rect x="86.5919%" y="421" width="0.1095%" height="15" fill="rgb(246,7,6)" fg:x="115505" fg:w="146"/><text x="86.8419%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (146 samples, 0.11%)</title><rect x="86.5919%" y="405" width="0.1095%" height="15" fill="rgb(227,135,54)" fg:x="115505" fg:w="146"/><text x="86.8419%" y="415.50"></text></g><g><title>__GI___libc_free (86 samples, 0.06%)</title><rect x="86.7066%" y="341" width="0.0645%" height="15" fill="rgb(247,14,11)" fg:x="115658" fg:w="86"/><text x="86.9566%" y="351.50"></text></g><g><title>__rdl_dealloc (49 samples, 0.04%)</title><rect x="86.7711%" y="341" width="0.0367%" height="15" fill="rgb(206,149,34)" fg:x="115744" fg:w="49"/><text x="87.0211%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (49 samples, 0.04%)</title><rect x="86.7711%" y="325" width="0.0367%" height="15" fill="rgb(227,228,4)" fg:x="115744" fg:w="49"/><text x="87.0211%" y="335.50"></text></g><g><title>__rust_dealloc (84 samples, 0.06%)</title><rect x="86.8079%" y="341" width="0.0630%" height="15" fill="rgb(238,218,28)" fg:x="115793" fg:w="84"/><text x="87.0579%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (566 samples, 0.42%)</title><rect x="86.7022%" y="373" width="0.4243%" height="15" fill="rgb(252,86,40)" fg:x="115652" fg:w="566"/><text x="86.9522%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (566 samples, 0.42%)</title><rect x="86.7022%" y="357" width="0.4243%" height="15" fill="rgb(251,225,11)" fg:x="115652" fg:w="566"/><text x="86.9522%" y="367.50"></text></g><g><title>_int_free (341 samples, 0.26%)</title><rect x="86.8708%" y="341" width="0.2556%" height="15" fill="rgb(206,46,49)" fg:x="115877" fg:w="341"/><text x="87.1208%" y="351.50"></text></g><g><title>tcache_put (51 samples, 0.04%)</title><rect x="87.0882%" y="325" width="0.0382%" height="15" fill="rgb(245,128,24)" fg:x="116167" fg:w="51"/><text x="87.3382%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (569 samples, 0.43%)</title><rect x="86.7014%" y="421" width="0.4266%" height="15" fill="rgb(219,177,34)" fg:x="115651" fg:w="569"/><text x="86.9514%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (569 samples, 0.43%)</title><rect x="86.7014%" y="405" width="0.4266%" height="15" fill="rgb(218,60,48)" fg:x="115651" fg:w="569"/><text x="86.9514%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (569 samples, 0.43%)</title><rect x="86.7014%" y="389" width="0.4266%" height="15" fill="rgb(221,11,5)" fg:x="115651" fg:w="569"/><text x="86.9514%" y="399.50"></text></g><g><title>__GI___libc_free (84 samples, 0.06%)</title><rect x="87.1535%" y="309" width="0.0630%" height="15" fill="rgb(220,148,13)" fg:x="116254" fg:w="84"/><text x="87.4035%" y="319.50"></text></g><g><title>__rdl_dealloc (36 samples, 0.03%)</title><rect x="87.2164%" y="309" width="0.0270%" height="15" fill="rgb(210,16,3)" fg:x="116338" fg:w="36"/><text x="87.4664%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (36 samples, 0.03%)</title><rect x="87.2164%" y="293" width="0.0270%" height="15" fill="rgb(236,80,2)" fg:x="116338" fg:w="36"/><text x="87.4664%" y="303.50"></text></g><g><title>__rust_dealloc (44 samples, 0.03%)</title><rect x="87.2434%" y="309" width="0.0330%" height="15" fill="rgb(239,129,19)" fg:x="116374" fg:w="44"/><text x="87.4934%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;,&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}}&gt;&gt; (1,290 samples, 0.97%)</title><rect x="86.5919%" y="469" width="0.9671%" height="15" fill="rgb(220,106,35)" fg:x="115505" fg:w="1290"/><text x="86.8419%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::Combinations&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;&gt; (1,290 samples, 0.97%)</title><rect x="86.5919%" y="453" width="0.9671%" height="15" fill="rgb(252,139,45)" fg:x="115505" fg:w="1290"/><text x="86.8419%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::LazyBuffer&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt;&gt; (1,144 samples, 0.86%)</title><rect x="86.7014%" y="437" width="0.8576%" height="15" fill="rgb(229,8,36)" fg:x="115651" fg:w="1144"/><text x="86.9514%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::IntoIter&lt;u8&gt;&gt; (575 samples, 0.43%)</title><rect x="87.1280%" y="421" width="0.4311%" height="15" fill="rgb(230,126,33)" fg:x="116220" fg:w="575"/><text x="87.3780%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::IntoIter&lt;u8&gt;&gt; (575 samples, 0.43%)</title><rect x="87.1280%" y="405" width="0.4311%" height="15" fill="rgb(239,140,21)" fg:x="116220" fg:w="575"/><text x="87.3780%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;u8,()&gt;&gt; (575 samples, 0.43%)</title><rect x="87.1280%" y="389" width="0.4311%" height="15" fill="rgb(254,104,9)" fg:x="116220" fg:w="575"/><text x="87.3780%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawIntoIter&lt;(u8,())&gt;&gt; (575 samples, 0.43%)</title><rect x="87.1280%" y="373" width="0.4311%" height="15" fill="rgb(239,52,14)" fg:x="116220" fg:w="575"/><text x="87.3780%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (575 samples, 0.43%)</title><rect x="87.1280%" y="357" width="0.4311%" height="15" fill="rgb(208,227,44)" fg:x="116220" fg:w="575"/><text x="87.3780%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (562 samples, 0.42%)</title><rect x="87.1377%" y="341" width="0.4213%" height="15" fill="rgb(246,18,19)" fg:x="116233" fg:w="562"/><text x="87.3877%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (546 samples, 0.41%)</title><rect x="87.1497%" y="325" width="0.4093%" height="15" fill="rgb(235,228,25)" fg:x="116249" fg:w="546"/><text x="87.3997%" y="335.50"></text></g><g><title>_int_free (377 samples, 0.28%)</title><rect x="87.2764%" y="309" width="0.2826%" height="15" fill="rgb(240,156,20)" fg:x="116418" fg:w="377"/><text x="87.5264%" y="319.50"></text></g><g><title>tcache_put (61 samples, 0.05%)</title><rect x="87.5133%" y="293" width="0.0457%" height="15" fill="rgb(224,8,20)" fg:x="116734" fg:w="61"/><text x="87.7633%" y="303.50"></text></g><g><title>__GI___libc_free (151 samples, 0.11%)</title><rect x="87.6010%" y="325" width="0.1132%" height="15" fill="rgb(214,12,52)" fg:x="116851" fg:w="151"/><text x="87.8510%" y="335.50"></text></g><g><title>__rdl_dealloc (38 samples, 0.03%)</title><rect x="87.7142%" y="325" width="0.0285%" height="15" fill="rgb(211,220,47)" fg:x="117002" fg:w="38"/><text x="87.9642%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (38 samples, 0.03%)</title><rect x="87.7142%" y="309" width="0.0285%" height="15" fill="rgb(250,173,5)" fg:x="117002" fg:w="38"/><text x="87.9642%" y="319.50"></text></g><g><title>__rust_dealloc (60 samples, 0.04%)</title><rect x="87.7427%" y="325" width="0.0450%" height="15" fill="rgb(250,125,52)" fg:x="117040" fg:w="60"/><text x="87.9927%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (901 samples, 0.68%)</title><rect x="87.5650%" y="357" width="0.6755%" height="15" fill="rgb(209,133,18)" fg:x="116803" fg:w="901"/><text x="87.8150%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (862 samples, 0.65%)</title><rect x="87.5943%" y="341" width="0.6462%" height="15" fill="rgb(216,173,22)" fg:x="116842" fg:w="862"/><text x="87.8443%" y="351.50"></text></g><g><title>_int_free (604 samples, 0.45%)</title><rect x="87.7877%" y="325" width="0.4528%" height="15" fill="rgb(205,3,22)" fg:x="117100" fg:w="604"/><text x="88.0377%" y="335.50"></text></g><g><title>tcache_put (59 samples, 0.04%)</title><rect x="88.1963%" y="309" width="0.0442%" height="15" fill="rgb(248,22,20)" fg:x="117645" fg:w="59"/><text x="88.4463%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (928 samples, 0.70%)</title><rect x="87.5650%" y="389" width="0.6957%" height="15" fill="rgb(233,6,29)" fg:x="116803" fg:w="928"/><text x="87.8150%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (928 samples, 0.70%)</title><rect x="87.5650%" y="373" width="0.6957%" height="15" fill="rgb(240,22,54)" fg:x="116803" fg:w="928"/><text x="87.8150%" y="383.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (26 samples, 0.02%)</title><rect x="88.2412%" y="357" width="0.0195%" height="15" fill="rgb(231,133,32)" fg:x="117705" fg:w="26"/><text x="88.4912%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (16 samples, 0.01%)</title><rect x="88.2487%" y="341" width="0.0120%" height="15" fill="rgb(248,193,4)" fg:x="117715" fg:w="16"/><text x="88.4987%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (16 samples, 0.01%)</title><rect x="88.2487%" y="325" width="0.0120%" height="15" fill="rgb(211,178,46)" fg:x="117715" fg:w="16"/><text x="88.4987%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u8&gt;&gt; (988 samples, 0.74%)</title><rect x="87.5590%" y="469" width="0.7407%" height="15" fill="rgb(224,5,42)" fg:x="116795" fg:w="988"/><text x="87.8090%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u8,std::collections::hash::map::RandomState&gt;&gt; (988 samples, 0.74%)</title><rect x="87.5590%" y="453" width="0.7407%" height="15" fill="rgb(239,176,25)" fg:x="116795" fg:w="988"/><text x="87.8090%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u8,(),std::collections::hash::map::RandomState&gt;&gt; (988 samples, 0.74%)</title><rect x="87.5590%" y="437" width="0.7407%" height="15" fill="rgb(245,187,50)" fg:x="116795" fg:w="988"/><text x="87.8090%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u8,())&gt;&gt; (988 samples, 0.74%)</title><rect x="87.5590%" y="421" width="0.7407%" height="15" fill="rgb(248,24,15)" fg:x="116795" fg:w="988"/><text x="87.8090%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (988 samples, 0.74%)</title><rect x="87.5590%" y="405" width="0.7407%" height="15" fill="rgb(205,166,13)" fg:x="116795" fg:w="988"/><text x="87.8090%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (52 samples, 0.04%)</title><rect x="88.2607%" y="389" width="0.0390%" height="15" fill="rgb(208,114,23)" fg:x="117731" fg:w="52"/><text x="88.5107%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.02%)</title><rect x="88.5164%" y="325" width="0.0225%" height="15" fill="rgb(239,127,18)" fg:x="118072" fg:w="30"/><text x="88.7664%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (36 samples, 0.03%)</title><rect x="88.6281%" y="277" width="0.0270%" height="15" fill="rgb(219,154,28)" fg:x="118221" fg:w="36"/><text x="88.8781%" y="287.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution::{{closure}} (346 samples, 0.26%)</title><rect x="88.5389%" y="309" width="0.2594%" height="15" fill="rgb(225,157,23)" fg:x="118102" fg:w="346"/><text x="88.7889%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (235 samples, 0.18%)</title><rect x="88.6221%" y="293" width="0.1762%" height="15" fill="rgb(219,8,6)" fg:x="118213" fg:w="235"/><text x="88.8721%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (191 samples, 0.14%)</title><rect x="88.6551%" y="277" width="0.1432%" height="15" fill="rgb(212,47,6)" fg:x="118257" fg:w="191"/><text x="88.9051%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (191 samples, 0.14%)</title><rect x="88.6551%" y="261" width="0.1432%" height="15" fill="rgb(224,190,4)" fg:x="118257" fg:w="191"/><text x="88.9051%" y="271.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (21 samples, 0.02%)</title><rect x="88.7983%" y="277" width="0.0157%" height="15" fill="rgb(239,183,29)" fg:x="118448" fg:w="21"/><text x="89.0483%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (938 samples, 0.70%)</title><rect x="88.3447%" y="389" width="0.7032%" height="15" fill="rgb(213,57,7)" fg:x="117843" fg:w="938"/><text x="88.5947%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (938 samples, 0.70%)</title><rect x="88.3447%" y="373" width="0.7032%" height="15" fill="rgb(216,148,1)" fg:x="117843" fg:w="938"/><text x="88.5947%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (870 samples, 0.65%)</title><rect x="88.3957%" y="357" width="0.6522%" height="15" fill="rgb(236,182,29)" fg:x="117911" fg:w="870"/><text x="88.6457%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (717 samples, 0.54%)</title><rect x="88.5104%" y="341" width="0.5375%" height="15" fill="rgb(244,120,48)" fg:x="118064" fg:w="717"/><text x="88.7604%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (679 samples, 0.51%)</title><rect x="88.5389%" y="325" width="0.5090%" height="15" fill="rgb(206,71,34)" fg:x="118102" fg:w="679"/><text x="88.7889%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (333 samples, 0.25%)</title><rect x="88.7983%" y="309" width="0.2496%" height="15" fill="rgb(242,32,6)" fg:x="118448" fg:w="333"/><text x="89.0483%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (333 samples, 0.25%)</title><rect x="88.7983%" y="293" width="0.2496%" height="15" fill="rgb(241,35,3)" fg:x="118448" fg:w="333"/><text x="89.0483%" y="303.50"></text></g><g><title>core::ptr::write (312 samples, 0.23%)</title><rect x="88.8140%" y="277" width="0.2339%" height="15" fill="rgb(222,62,19)" fg:x="118469" fg:w="312"/><text x="89.0640%" y="287.50"></text></g><g><title>checked_request2size (74 samples, 0.06%)</title><rect x="89.4212%" y="261" width="0.0555%" height="15" fill="rgb(223,110,41)" fg:x="119279" fg:w="74"/><text x="89.6712%" y="271.50"></text></g><g><title>__GI___libc_malloc (629 samples, 0.47%)</title><rect x="89.1469%" y="277" width="0.4715%" height="15" fill="rgb(208,224,4)" fg:x="118913" fg:w="629"/><text x="89.3969%" y="287.50"></text></g><g><title>tcache_get (189 samples, 0.14%)</title><rect x="89.4767%" y="261" width="0.1417%" height="15" fill="rgb(241,137,19)" fg:x="119353" fg:w="189"/><text x="89.7267%" y="271.50"></text></g><g><title>__rdl_alloc (83 samples, 0.06%)</title><rect x="89.6184%" y="277" width="0.0622%" height="15" fill="rgb(244,24,17)" fg:x="119542" fg:w="83"/><text x="89.8684%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (34 samples, 0.03%)</title><rect x="89.6551%" y="261" width="0.0255%" height="15" fill="rgb(245,178,49)" fg:x="119591" fg:w="34"/><text x="89.9051%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,837 samples, 1.38%)</title><rect x="88.3447%" y="421" width="1.3772%" height="15" fill="rgb(219,160,38)" fg:x="117843" fg:w="1837"/><text x="88.5947%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,837 samples, 1.38%)</title><rect x="88.3447%" y="405" width="1.3772%" height="15" fill="rgb(228,137,14)" fg:x="117843" fg:w="1837"/><text x="88.5947%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (899 samples, 0.67%)</title><rect x="89.0479%" y="389" width="0.6740%" height="15" fill="rgb(237,134,11)" fg:x="118781" fg:w="899"/><text x="89.2979%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (899 samples, 0.67%)</title><rect x="89.0479%" y="373" width="0.6740%" height="15" fill="rgb(211,126,44)" fg:x="118781" fg:w="899"/><text x="89.2979%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (899 samples, 0.67%)</title><rect x="89.0479%" y="357" width="0.6740%" height="15" fill="rgb(226,171,33)" fg:x="118781" fg:w="899"/><text x="89.2979%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (899 samples, 0.67%)</title><rect x="89.0479%" y="341" width="0.6740%" height="15" fill="rgb(253,99,13)" fg:x="118781" fg:w="899"/><text x="89.2979%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (897 samples, 0.67%)</title><rect x="89.0494%" y="325" width="0.6725%" height="15" fill="rgb(244,48,7)" fg:x="118783" fg:w="897"/><text x="89.2994%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (897 samples, 0.67%)</title><rect x="89.0494%" y="309" width="0.6725%" height="15" fill="rgb(244,217,54)" fg:x="118783" fg:w="897"/><text x="89.2994%" y="319.50"></text></g><g><title>alloc::alloc::alloc (808 samples, 0.61%)</title><rect x="89.1161%" y="293" width="0.6057%" height="15" fill="rgb(224,15,18)" fg:x="118872" fg:w="808"/><text x="89.3661%" y="303.50"></text></g><g><title>__rust_alloc (55 samples, 0.04%)</title><rect x="89.6806%" y="277" width="0.0412%" height="15" fill="rgb(244,99,12)" fg:x="119625" fg:w="55"/><text x="89.9306%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (142 samples, 0.11%)</title><rect x="90.0967%" y="309" width="0.1065%" height="15" fill="rgb(233,226,8)" fg:x="120180" fg:w="142"/><text x="90.3467%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (57 samples, 0.04%)</title><rect x="90.1604%" y="293" width="0.0427%" height="15" fill="rgb(229,211,3)" fg:x="120265" fg:w="57"/><text x="90.4104%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (171 samples, 0.13%)</title><rect x="90.0832%" y="357" width="0.1282%" height="15" fill="rgb(216,140,21)" fg:x="120162" fg:w="171"/><text x="90.3332%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (171 samples, 0.13%)</title><rect x="90.0832%" y="341" width="0.1282%" height="15" fill="rgb(234,122,30)" fg:x="120162" fg:w="171"/><text x="90.3332%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (171 samples, 0.13%)</title><rect x="90.0832%" y="325" width="0.1282%" height="15" fill="rgb(236,25,46)" fg:x="120162" fg:w="171"/><text x="90.3332%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (16 samples, 0.01%)</title><rect x="90.2114%" y="357" width="0.0120%" height="15" fill="rgb(217,52,54)" fg:x="120333" fg:w="16"/><text x="90.4614%" y="367.50"></text></g><g><title>__GI___libc_free (224 samples, 0.17%)</title><rect x="90.2436%" y="213" width="0.1679%" height="15" fill="rgb(222,29,26)" fg:x="120376" fg:w="224"/><text x="90.4936%" y="223.50"></text></g><g><title>__rdl_dealloc (42 samples, 0.03%)</title><rect x="90.4116%" y="213" width="0.0315%" height="15" fill="rgb(216,177,29)" fg:x="120600" fg:w="42"/><text x="90.6616%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (42 samples, 0.03%)</title><rect x="90.4116%" y="197" width="0.0315%" height="15" fill="rgb(247,136,51)" fg:x="120600" fg:w="42"/><text x="90.6616%" y="207.50"></text></g><g><title>__rust_dealloc (76 samples, 0.06%)</title><rect x="90.4431%" y="213" width="0.0570%" height="15" fill="rgb(231,47,47)" fg:x="120642" fg:w="76"/><text x="90.6931%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (448 samples, 0.34%)</title><rect x="90.2234%" y="245" width="0.3359%" height="15" fill="rgb(211,192,36)" fg:x="120349" fg:w="448"/><text x="90.4734%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (442 samples, 0.33%)</title><rect x="90.2279%" y="229" width="0.3314%" height="15" fill="rgb(229,156,32)" fg:x="120355" fg:w="442"/><text x="90.4779%" y="239.50"></text></g><g><title>_int_free (79 samples, 0.06%)</title><rect x="90.5000%" y="213" width="0.0592%" height="15" fill="rgb(248,213,20)" fg:x="120718" fg:w="79"/><text x="90.7500%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;u8&gt;&gt;,&lt;kakuro::game::Input as kakuro::solvers::prioritize::InputExt&gt;::is_possible_solution::{{closure}}&gt;&gt; (500 samples, 0.37%)</title><rect x="90.2234%" y="357" width="0.3748%" height="15" fill="rgb(217,64,7)" fg:x="120349" fg:w="500"/><text x="90.4734%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;u8&gt;&gt;&gt; (500 samples, 0.37%)</title><rect x="90.2234%" y="341" width="0.3748%" height="15" fill="rgb(232,142,8)" fg:x="120349" fg:w="500"/><text x="90.4734%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (500 samples, 0.37%)</title><rect x="90.2234%" y="325" width="0.3748%" height="15" fill="rgb(224,92,44)" fg:x="120349" fg:w="500"/><text x="90.4734%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;core::option::Option&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (500 samples, 0.37%)</title><rect x="90.2234%" y="309" width="0.3748%" height="15" fill="rgb(214,169,17)" fg:x="120349" fg:w="500"/><text x="90.4734%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (500 samples, 0.37%)</title><rect x="90.2234%" y="293" width="0.3748%" height="15" fill="rgb(210,59,37)" fg:x="120349" fg:w="500"/><text x="90.4734%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;u8&gt;&gt;&gt; (500 samples, 0.37%)</title><rect x="90.2234%" y="277" width="0.3748%" height="15" fill="rgb(214,116,48)" fg:x="120349" fg:w="500"/><text x="90.4734%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (500 samples, 0.37%)</title><rect x="90.2234%" y="261" width="0.3748%" height="15" fill="rgb(244,191,6)" fg:x="120349" fg:w="500"/><text x="90.4734%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (52 samples, 0.04%)</title><rect x="90.5593%" y="245" width="0.0390%" height="15" fill="rgb(241,50,52)" fg:x="120797" fg:w="52"/><text x="90.8093%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (777 samples, 0.58%)</title><rect x="90.0337%" y="389" width="0.5825%" height="15" fill="rgb(236,75,39)" fg:x="120096" fg:w="777"/><text x="90.2837%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (777 samples, 0.58%)</title><rect x="90.0337%" y="373" width="0.5825%" height="15" fill="rgb(236,99,0)" fg:x="120096" fg:w="777"/><text x="90.2837%" y="383.50"></text></g><g><title>core::ptr::write (24 samples, 0.02%)</title><rect x="90.5982%" y="357" width="0.0180%" height="15" fill="rgb(207,202,15)" fg:x="120849" fg:w="24"/><text x="90.8482%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (201 samples, 0.15%)</title><rect x="90.6162%" y="389" width="0.1507%" height="15" fill="rgb(233,207,14)" fg:x="120873" fg:w="201"/><text x="90.8662%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (201 samples, 0.15%)</title><rect x="90.6162%" y="373" width="0.1507%" height="15" fill="rgb(226,27,51)" fg:x="120873" fg:w="201"/><text x="90.8662%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (201 samples, 0.15%)</title><rect x="90.6162%" y="357" width="0.1507%" height="15" fill="rgb(206,104,42)" fg:x="120873" fg:w="201"/><text x="90.8662%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (167 samples, 0.13%)</title><rect x="90.6417%" y="341" width="0.1252%" height="15" fill="rgb(212,225,4)" fg:x="120907" fg:w="167"/><text x="90.8917%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (71 samples, 0.05%)</title><rect x="90.7137%" y="325" width="0.0532%" height="15" fill="rgb(233,96,42)" fg:x="121003" fg:w="71"/><text x="90.9637%" y="335.50"></text></g><g><title>checked_request2size (24 samples, 0.02%)</title><rect x="91.0645%" y="261" width="0.0180%" height="15" fill="rgb(229,21,32)" fg:x="121471" fg:w="24"/><text x="91.3145%" y="271.50"></text></g><g><title>__GI___libc_malloc (425 samples, 0.32%)</title><rect x="90.8554%" y="277" width="0.3186%" height="15" fill="rgb(226,216,24)" fg:x="121192" fg:w="425"/><text x="91.1054%" y="287.50"></text></g><g><title>tcache_get (122 samples, 0.09%)</title><rect x="91.0825%" y="261" width="0.0915%" height="15" fill="rgb(221,163,17)" fg:x="121495" fg:w="122"/><text x="91.3325%" y="271.50"></text></g><g><title>__rdl_alloc (102 samples, 0.08%)</title><rect x="91.1740%" y="277" width="0.0765%" height="15" fill="rgb(216,216,42)" fg:x="121617" fg:w="102"/><text x="91.4240%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (61 samples, 0.05%)</title><rect x="91.2047%" y="261" width="0.0457%" height="15" fill="rgb(240,118,7)" fg:x="121658" fg:w="61"/><text x="91.4547%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (693 samples, 0.52%)</title><rect x="90.7692%" y="389" width="0.5195%" height="15" fill="rgb(221,67,37)" fg:x="121077" fg:w="693"/><text x="91.0192%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (693 samples, 0.52%)</title><rect x="90.7692%" y="373" width="0.5195%" height="15" fill="rgb(241,32,44)" fg:x="121077" fg:w="693"/><text x="91.0192%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (693 samples, 0.52%)</title><rect x="90.7692%" y="357" width="0.5195%" height="15" fill="rgb(235,204,43)" fg:x="121077" fg:w="693"/><text x="91.0192%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (693 samples, 0.52%)</title><rect x="90.7692%" y="341" width="0.5195%" height="15" fill="rgb(213,116,10)" fg:x="121077" fg:w="693"/><text x="91.0192%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (693 samples, 0.52%)</title><rect x="90.7692%" y="325" width="0.5195%" height="15" fill="rgb(239,15,48)" fg:x="121077" fg:w="693"/><text x="91.0192%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (693 samples, 0.52%)</title><rect x="90.7692%" y="309" width="0.5195%" height="15" fill="rgb(207,123,36)" fg:x="121077" fg:w="693"/><text x="91.0192%" y="319.50"></text></g><g><title>alloc::alloc::alloc (585 samples, 0.44%)</title><rect x="90.8501%" y="293" width="0.4386%" height="15" fill="rgb(209,103,30)" fg:x="121185" fg:w="585"/><text x="91.1001%" y="303.50"></text></g><g><title>__rust_alloc (51 samples, 0.04%)</title><rect x="91.2505%" y="277" width="0.0382%" height="15" fill="rgb(238,100,19)" fg:x="121719" fg:w="51"/><text x="91.5005%" y="287.50"></text></g><g><title>itertools::Itertools::collect_vec (4,000 samples, 3.00%)</title><rect x="88.2997%" y="469" width="2.9987%" height="15" fill="rgb(244,30,14)" fg:x="117783" fg:w="4000"/><text x="88.5497%" y="479.50">ite..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (4,000 samples, 3.00%)</title><rect x="88.2997%" y="453" width="2.9987%" height="15" fill="rgb(249,174,6)" fg:x="117783" fg:w="4000"/><text x="88.5497%" y="463.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4,000 samples, 3.00%)</title><rect x="88.2997%" y="437" width="2.9987%" height="15" fill="rgb(235,213,41)" fg:x="117783" fg:w="4000"/><text x="88.5497%" y="447.50">&lt;al..</text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,103 samples, 1.58%)</title><rect x="89.7219%" y="421" width="1.5766%" height="15" fill="rgb(213,118,6)" fg:x="119680" fg:w="2103"/><text x="89.9719%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,797 samples, 1.35%)</title><rect x="89.9513%" y="405" width="1.3472%" height="15" fill="rgb(235,44,51)" fg:x="119986" fg:w="1797"/><text x="90.2013%" y="415.50"></text></g><g><title>itertools::Itertools::combinations (163 samples, 0.12%)</title><rect x="91.2984%" y="469" width="0.1222%" height="15" fill="rgb(217,9,53)" fg:x="121783" fg:w="163"/><text x="91.5484%" y="479.50"></text></g><g><title>itertools::combinations::combinations (106 samples, 0.08%)</title><rect x="91.3412%" y="453" width="0.0795%" height="15" fill="rgb(237,172,34)" fg:x="121840" fg:w="106"/><text x="91.5912%" y="463.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (875 samples, 0.66%)</title><rect x="91.4791%" y="373" width="0.6560%" height="15" fill="rgb(206,206,11)" fg:x="122024" fg:w="875"/><text x="91.7291%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (875 samples, 0.66%)</title><rect x="91.4791%" y="357" width="0.6560%" height="15" fill="rgb(214,149,29)" fg:x="122024" fg:w="875"/><text x="91.7291%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (875 samples, 0.66%)</title><rect x="91.4791%" y="341" width="0.6560%" height="15" fill="rgb(208,123,3)" fg:x="122024" fg:w="875"/><text x="91.7291%" y="351.50"></text></g><g><title>&lt;kakuro::game::Input as kakuro::solvers::sum_reachable::InputExt&gt;::is_possible_solution (44,067 samples, 33.04%)</title><rect x="59.1049%" y="485" width="33.0362%" height="15" fill="rgb(229,126,4)" fg:x="78840" fg:w="44067"/><text x="59.3549%" y="495.50">&lt;kakuro::game::Input as kakuro::solvers::sum_reachabl..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::difference (961 samples, 0.72%)</title><rect x="91.4206%" y="469" width="0.7204%" height="15" fill="rgb(222,92,36)" fg:x="121946" fg:w="961"/><text x="91.6706%" y="479.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (961 samples, 0.72%)</title><rect x="91.4206%" y="453" width="0.7204%" height="15" fill="rgb(216,39,41)" fg:x="121946" fg:w="961"/><text x="91.6706%" y="463.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (961 samples, 0.72%)</title><rect x="91.4206%" y="437" width="0.7204%" height="15" fill="rgb(253,127,28)" fg:x="121946" fg:w="961"/><text x="91.6706%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (961 samples, 0.72%)</title><rect x="91.4206%" y="421" width="0.7204%" height="15" fill="rgb(249,152,51)" fg:x="121946" fg:w="961"/><text x="91.6706%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (961 samples, 0.72%)</title><rect x="91.4206%" y="405" width="0.7204%" height="15" fill="rgb(209,123,42)" fg:x="121946" fg:w="961"/><text x="91.6706%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (961 samples, 0.72%)</title><rect x="91.4206%" y="389" width="0.7204%" height="15" fill="rgb(241,118,22)" fg:x="121946" fg:w="961"/><text x="91.6706%" y="399.50"></text></g><g><title>alloc::fmt::format (21 samples, 0.02%)</title><rect x="92.1411%" y="485" width="0.0157%" height="15" fill="rgb(208,25,7)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (21 samples, 0.02%)</title><rect x="92.1411%" y="469" width="0.0157%" height="15" fill="rgb(243,144,39)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="479.50"></text></g><g><title>core::fmt::write (21 samples, 0.02%)</title><rect x="92.1411%" y="453" width="0.0157%" height="15" fill="rgb(250,50,5)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (21 samples, 0.02%)</title><rect x="92.1411%" y="437" width="0.0157%" height="15" fill="rgb(207,67,11)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (21 samples, 0.02%)</title><rect x="92.1411%" y="421" width="0.0157%" height="15" fill="rgb(245,204,40)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="431.50"></text></g><g><title>alloc::string::String::push_str (21 samples, 0.02%)</title><rect x="92.1411%" y="405" width="0.0157%" height="15" fill="rgb(238,228,24)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (21 samples, 0.02%)</title><rect x="92.1411%" y="389" width="0.0157%" height="15" fill="rgb(217,116,22)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (21 samples, 0.02%)</title><rect x="92.1411%" y="373" width="0.0157%" height="15" fill="rgb(234,98,12)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (21 samples, 0.02%)</title><rect x="92.1411%" y="357" width="0.0157%" height="15" fill="rgb(242,170,50)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (21 samples, 0.02%)</title><rect x="92.1411%" y="341" width="0.0157%" height="15" fill="rgb(235,7,5)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (21 samples, 0.02%)</title><rect x="92.1411%" y="325" width="0.0157%" height="15" fill="rgb(241,114,28)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (21 samples, 0.02%)</title><rect x="92.1411%" y="309" width="0.0157%" height="15" fill="rgb(246,112,42)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (21 samples, 0.02%)</title><rect x="92.1411%" y="293" width="0.0157%" height="15" fill="rgb(248,228,14)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.02%)</title><rect x="92.1411%" y="277" width="0.0157%" height="15" fill="rgb(208,133,18)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (21 samples, 0.02%)</title><rect x="92.1411%" y="261" width="0.0157%" height="15" fill="rgb(207,35,49)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (21 samples, 0.02%)</title><rect x="92.1411%" y="245" width="0.0157%" height="15" fill="rgb(205,68,36)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="255.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 0.02%)</title><rect x="92.1411%" y="229" width="0.0157%" height="15" fill="rgb(245,62,40)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="239.50"></text></g><g><title>__GI___libc_realloc (21 samples, 0.02%)</title><rect x="92.1411%" y="213" width="0.0157%" height="15" fill="rgb(228,27,24)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="223.50"></text></g><g><title>_int_realloc (21 samples, 0.02%)</title><rect x="92.1411%" y="197" width="0.0157%" height="15" fill="rgb(253,19,12)" fg:x="122907" fg:w="21"/><text x="92.3911%" y="207.50"></text></g><g><title>_int_free (76 samples, 0.06%)</title><rect x="92.2251%" y="117" width="0.0570%" height="15" fill="rgb(232,28,20)" fg:x="123019" fg:w="76"/><text x="92.4751%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (184 samples, 0.14%)</title><rect x="92.1568%" y="373" width="0.1379%" height="15" fill="rgb(218,35,51)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (184 samples, 0.14%)</title><rect x="92.1568%" y="357" width="0.1379%" height="15" fill="rgb(212,90,40)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="367.50"></text></g><g><title>alloc::string::String::push_str (184 samples, 0.14%)</title><rect x="92.1568%" y="341" width="0.1379%" height="15" fill="rgb(220,172,12)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (184 samples, 0.14%)</title><rect x="92.1568%" y="325" width="0.1379%" height="15" fill="rgb(226,159,20)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (184 samples, 0.14%)</title><rect x="92.1568%" y="309" width="0.1379%" height="15" fill="rgb(234,205,16)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (184 samples, 0.14%)</title><rect x="92.1568%" y="293" width="0.1379%" height="15" fill="rgb(207,9,39)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (184 samples, 0.14%)</title><rect x="92.1568%" y="277" width="0.1379%" height="15" fill="rgb(249,143,15)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (184 samples, 0.14%)</title><rect x="92.1568%" y="261" width="0.1379%" height="15" fill="rgb(253,133,29)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (184 samples, 0.14%)</title><rect x="92.1568%" y="245" width="0.1379%" height="15" fill="rgb(221,187,0)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (184 samples, 0.14%)</title><rect x="92.1568%" y="229" width="0.1379%" height="15" fill="rgb(205,204,26)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (184 samples, 0.14%)</title><rect x="92.1568%" y="213" width="0.1379%" height="15" fill="rgb(224,68,54)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (184 samples, 0.14%)</title><rect x="92.1568%" y="197" width="0.1379%" height="15" fill="rgb(209,67,4)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (184 samples, 0.14%)</title><rect x="92.1568%" y="181" width="0.1379%" height="15" fill="rgb(228,229,18)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="191.50"></text></g><g><title>alloc::alloc::realloc (184 samples, 0.14%)</title><rect x="92.1568%" y="165" width="0.1379%" height="15" fill="rgb(231,89,13)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="175.50"></text></g><g><title>__GI___libc_realloc (184 samples, 0.14%)</title><rect x="92.1568%" y="149" width="0.1379%" height="15" fill="rgb(210,182,18)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="159.50"></text></g><g><title>_int_realloc (184 samples, 0.14%)</title><rect x="92.1568%" y="133" width="0.1379%" height="15" fill="rgb(240,105,2)" fg:x="122928" fg:w="184"/><text x="92.4068%" y="143.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (261 samples, 0.20%)</title><rect x="92.7551%" y="309" width="0.1957%" height="15" fill="rgb(207,170,50)" fg:x="123726" fg:w="261"/><text x="93.0051%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (212 samples, 0.16%)</title><rect x="92.9507%" y="309" width="0.1589%" height="15" fill="rgb(232,133,24)" fg:x="123987" fg:w="212"/><text x="93.2007%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (212 samples, 0.16%)</title><rect x="92.9507%" y="293" width="0.1589%" height="15" fill="rgb(235,166,27)" fg:x="123987" fg:w="212"/><text x="93.2007%" y="303.50"></text></g><g><title>&lt;u8 as core::fmt::num::DisplayInt&gt;::to_u64 (386 samples, 0.29%)</title><rect x="93.1224%" y="293" width="0.2894%" height="15" fill="rgb(209,19,13)" fg:x="124216" fg:w="386"/><text x="93.3724%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (53 samples, 0.04%)</title><rect x="93.8848%" y="117" width="0.0397%" height="15" fill="rgb(226,79,39)" fg:x="125233" fg:w="53"/><text x="94.1348%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (58 samples, 0.04%)</title><rect x="93.9291%" y="117" width="0.0435%" height="15" fill="rgb(222,163,10)" fg:x="125292" fg:w="58"/><text x="94.1791%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (419 samples, 0.31%)</title><rect x="93.7214%" y="181" width="0.3141%" height="15" fill="rgb(214,44,19)" fg:x="125015" fg:w="419"/><text x="93.9714%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (419 samples, 0.31%)</title><rect x="93.7214%" y="165" width="0.3141%" height="15" fill="rgb(210,217,13)" fg:x="125015" fg:w="419"/><text x="93.9714%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (353 samples, 0.26%)</title><rect x="93.7709%" y="149" width="0.2646%" height="15" fill="rgb(237,61,54)" fg:x="125081" fg:w="353"/><text x="94.0209%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (349 samples, 0.26%)</title><rect x="93.7739%" y="133" width="0.2616%" height="15" fill="rgb(226,184,24)" fg:x="125085" fg:w="349"/><text x="94.0239%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (64 samples, 0.05%)</title><rect x="93.9876%" y="117" width="0.0480%" height="15" fill="rgb(223,226,4)" fg:x="125370" fg:w="64"/><text x="94.2376%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (64 samples, 0.05%)</title><rect x="93.9876%" y="101" width="0.0480%" height="15" fill="rgb(210,26,41)" fg:x="125370" fg:w="64"/><text x="94.2376%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (424 samples, 0.32%)</title><rect x="94.0355%" y="181" width="0.3179%" height="15" fill="rgb(220,221,6)" fg:x="125434" fg:w="424"/><text x="94.2855%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (362 samples, 0.27%)</title><rect x="94.0820%" y="165" width="0.2714%" height="15" fill="rgb(225,89,49)" fg:x="125496" fg:w="362"/><text x="94.3320%" y="175.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1,285 samples, 0.96%)</title><rect x="93.5250%" y="277" width="0.9633%" height="15" fill="rgb(218,70,45)" fg:x="124753" fg:w="1285"/><text x="93.7750%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,140 samples, 0.85%)</title><rect x="93.6337%" y="261" width="0.8546%" height="15" fill="rgb(238,166,21)" fg:x="124898" fg:w="1140"/><text x="93.8837%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1,140 samples, 0.85%)</title><rect x="93.6337%" y="245" width="0.8546%" height="15" fill="rgb(224,141,44)" fg:x="124898" fg:w="1140"/><text x="93.8837%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,140 samples, 0.85%)</title><rect x="93.6337%" y="229" width="0.8546%" height="15" fill="rgb(230,12,49)" fg:x="124898" fg:w="1140"/><text x="93.8837%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,140 samples, 0.85%)</title><rect x="93.6337%" y="213" width="0.8546%" height="15" fill="rgb(212,174,12)" fg:x="124898" fg:w="1140"/><text x="93.8837%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,140 samples, 0.85%)</title><rect x="93.6337%" y="197" width="0.8546%" height="15" fill="rgb(246,67,9)" fg:x="124898" fg:w="1140"/><text x="93.8837%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (180 samples, 0.13%)</title><rect x="94.3534%" y="181" width="0.1349%" height="15" fill="rgb(239,35,23)" fg:x="125858" fg:w="180"/><text x="94.6034%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (180 samples, 0.13%)</title><rect x="94.3534%" y="165" width="0.1349%" height="15" fill="rgb(211,167,0)" fg:x="125858" fg:w="180"/><text x="94.6034%" y="175.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (77 samples, 0.06%)</title><rect x="94.8767%" y="261" width="0.0577%" height="15" fill="rgb(225,119,45)" fg:x="126556" fg:w="77"/><text x="95.1267%" y="271.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (2,509 samples, 1.88%)</title><rect x="93.1119%" y="309" width="1.8810%" height="15" fill="rgb(210,162,6)" fg:x="124202" fg:w="2509"/><text x="93.3619%" y="319.50">c..</text></g><g><title>core::fmt::num::imp::fmt_u64 (2,109 samples, 1.58%)</title><rect x="93.4118%" y="293" width="1.5811%" height="15" fill="rgb(208,118,35)" fg:x="124602" fg:w="2109"/><text x="93.6618%" y="303.50"></text></g><g><title>core::fmt::Formatter::pad_integral (673 samples, 0.50%)</title><rect x="94.4883%" y="277" width="0.5045%" height="15" fill="rgb(239,4,53)" fg:x="126038" fg:w="673"/><text x="94.7383%" y="287.50"></text></g><g><title>core::fmt::Formatter::sign_plus (78 samples, 0.06%)</title><rect x="94.9344%" y="261" width="0.0585%" height="15" fill="rgb(213,130,21)" fg:x="126633" fg:w="78"/><text x="95.1844%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (75 samples, 0.06%)</title><rect x="94.9929%" y="309" width="0.0562%" height="15" fill="rgb(235,148,0)" fg:x="126711" fg:w="75"/><text x="95.2429%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (75 samples, 0.06%)</title><rect x="94.9929%" y="293" width="0.0562%" height="15" fill="rgb(244,224,18)" fg:x="126711" fg:w="75"/><text x="95.2429%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (3,912 samples, 2.93%)</title><rect x="92.1568%" y="453" width="2.9328%" height="15" fill="rgb(211,214,4)" fg:x="122928" fg:w="3912"/><text x="92.4068%" y="463.50">&lt;a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,912 samples, 2.93%)</title><rect x="92.1568%" y="437" width="2.9328%" height="15" fill="rgb(206,119,25)" fg:x="122928" fg:w="3912"/><text x="92.4068%" y="447.50">co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,912 samples, 2.93%)</title><rect x="92.1568%" y="421" width="2.9328%" height="15" fill="rgb(243,93,47)" fg:x="122928" fg:w="3912"/><text x="92.4068%" y="431.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,912 samples, 2.93%)</title><rect x="92.1568%" y="405" width="2.9328%" height="15" fill="rgb(224,194,6)" fg:x="122928" fg:w="3912"/><text x="92.4068%" y="415.50">co..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3,912 samples, 2.93%)</title><rect x="92.1568%" y="389" width="2.9328%" height="15" fill="rgb(243,229,6)" fg:x="122928" fg:w="3912"/><text x="92.4068%" y="399.50">co..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (3,728 samples, 2.79%)</title><rect x="92.2948%" y="373" width="2.7948%" height="15" fill="rgb(207,23,50)" fg:x="123112" fg:w="3728"/><text x="92.5448%" y="383.50">ka..</text></g><g><title>alloc::fmt::format (3,728 samples, 2.79%)</title><rect x="92.2948%" y="357" width="2.7948%" height="15" fill="rgb(253,192,32)" fg:x="123112" fg:w="3728"/><text x="92.5448%" y="367.50">al..</text></g><g><title>core::fmt::Write::write_fmt (3,728 samples, 2.79%)</title><rect x="92.2948%" y="341" width="2.7948%" height="15" fill="rgb(213,21,6)" fg:x="123112" fg:w="3728"/><text x="92.5448%" y="351.50">co..</text></g><g><title>core::fmt::write (3,728 samples, 2.79%)</title><rect x="92.2948%" y="325" width="2.7948%" height="15" fill="rgb(243,151,13)" fg:x="123112" fg:w="3728"/><text x="92.5448%" y="335.50">co..</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (54 samples, 0.04%)</title><rect x="95.0491%" y="309" width="0.0405%" height="15" fill="rgb(233,165,41)" fg:x="126786" fg:w="54"/><text x="95.2991%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.02%)</title><rect x="95.0903%" y="149" width="0.0195%" height="15" fill="rgb(246,176,45)" fg:x="126841" fg:w="26"/><text x="95.3403%" y="159.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (32 samples, 0.02%)</title><rect x="95.0896%" y="309" width="0.0240%" height="15" fill="rgb(217,170,52)" fg:x="126840" fg:w="32"/><text x="95.3396%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (32 samples, 0.02%)</title><rect x="95.0896%" y="293" width="0.0240%" height="15" fill="rgb(214,203,54)" fg:x="126840" fg:w="32"/><text x="95.3396%" y="303.50"></text></g><g><title>alloc::string::String::push_str (32 samples, 0.02%)</title><rect x="95.0896%" y="277" width="0.0240%" height="15" fill="rgb(248,215,49)" fg:x="126840" fg:w="32"/><text x="95.3396%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (32 samples, 0.02%)</title><rect x="95.0896%" y="261" width="0.0240%" height="15" fill="rgb(208,46,10)" fg:x="126840" fg:w="32"/><text x="95.3396%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (32 samples, 0.02%)</title><rect x="95.0896%" y="245" width="0.0240%" height="15" fill="rgb(254,5,31)" fg:x="126840" fg:w="32"/><text x="95.3396%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (32 samples, 0.02%)</title><rect x="95.0896%" y="229" width="0.0240%" height="15" fill="rgb(222,104,33)" fg:x="126840" fg:w="32"/><text x="95.3396%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (32 samples, 0.02%)</title><rect x="95.0896%" y="213" width="0.0240%" height="15" fill="rgb(248,49,16)" fg:x="126840" fg:w="32"/><text x="95.3396%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (32 samples, 0.02%)</title><rect x="95.0896%" y="197" width="0.0240%" height="15" fill="rgb(232,198,41)" fg:x="126840" fg:w="32"/><text x="95.3396%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (32 samples, 0.02%)</title><rect x="95.0896%" y="181" width="0.0240%" height="15" fill="rgb(214,125,3)" fg:x="126840" fg:w="32"/><text x="95.3396%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (32 samples, 0.02%)</title><rect x="95.0896%" y="165" width="0.0240%" height="15" fill="rgb(229,220,28)" fg:x="126840" fg:w="32"/><text x="95.3396%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,955 samples, 2.96%)</title><rect x="92.1568%" y="485" width="2.9650%" height="15" fill="rgb(222,64,37)" fg:x="122928" fg:w="3955"/><text x="92.4068%" y="495.50">cor..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (3,955 samples, 2.96%)</title><rect x="92.1568%" y="469" width="2.9650%" height="15" fill="rgb(249,184,13)" fg:x="122928" fg:w="3955"/><text x="92.4068%" y="479.50">&lt;al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.03%)</title><rect x="95.0896%" y="453" width="0.0322%" height="15" fill="rgb(252,176,6)" fg:x="126840" fg:w="43"/><text x="95.3396%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (43 samples, 0.03%)</title><rect x="95.0896%" y="437" width="0.0322%" height="15" fill="rgb(228,153,7)" fg:x="126840" fg:w="43"/><text x="95.3396%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (43 samples, 0.03%)</title><rect x="95.0896%" y="421" width="0.0322%" height="15" fill="rgb(242,193,5)" fg:x="126840" fg:w="43"/><text x="95.3396%" y="431.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (43 samples, 0.03%)</title><rect x="95.0896%" y="405" width="0.0322%" height="15" fill="rgb(232,140,9)" fg:x="126840" fg:w="43"/><text x="95.3396%" y="415.50"></text></g><g><title>alloc::fmt::format (43 samples, 0.03%)</title><rect x="95.0896%" y="389" width="0.0322%" height="15" fill="rgb(213,222,16)" fg:x="126840" fg:w="43"/><text x="95.3396%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (43 samples, 0.03%)</title><rect x="95.0896%" y="373" width="0.0322%" height="15" fill="rgb(222,75,50)" fg:x="126840" fg:w="43"/><text x="95.3396%" y="383.50"></text></g><g><title>core::fmt::write (43 samples, 0.03%)</title><rect x="95.0896%" y="357" width="0.0322%" height="15" fill="rgb(205,180,2)" fg:x="126840" fg:w="43"/><text x="95.3396%" y="367.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (43 samples, 0.03%)</title><rect x="95.0896%" y="341" width="0.0322%" height="15" fill="rgb(216,34,7)" fg:x="126840" fg:w="43"/><text x="95.3396%" y="351.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (43 samples, 0.03%)</title><rect x="95.0896%" y="325" width="0.0322%" height="15" fill="rgb(253,16,32)" fg:x="126840" fg:w="43"/><text x="95.3396%" y="335.50"></text></g><g><title>__GI___libc_realloc (24 samples, 0.02%)</title><rect x="95.1331%" y="197" width="0.0180%" height="15" fill="rgb(208,97,28)" fg:x="126898" fg:w="24"/><text x="95.3831%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (32 samples, 0.02%)</title><rect x="95.1301%" y="261" width="0.0240%" height="15" fill="rgb(225,92,11)" fg:x="126894" fg:w="32"/><text x="95.3801%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (28 samples, 0.02%)</title><rect x="95.1331%" y="245" width="0.0210%" height="15" fill="rgb(243,38,12)" fg:x="126898" fg:w="28"/><text x="95.3831%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (28 samples, 0.02%)</title><rect x="95.1331%" y="229" width="0.0210%" height="15" fill="rgb(208,139,16)" fg:x="126898" fg:w="28"/><text x="95.3831%" y="239.50"></text></g><g><title>alloc::alloc::realloc (28 samples, 0.02%)</title><rect x="95.1331%" y="213" width="0.0210%" height="15" fill="rgb(227,24,9)" fg:x="126898" fg:w="28"/><text x="95.3831%" y="223.50"></text></g><g><title>alloc::fmt::format (46 samples, 0.03%)</title><rect x="95.1218%" y="469" width="0.0345%" height="15" fill="rgb(206,62,11)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (46 samples, 0.03%)</title><rect x="95.1218%" y="453" width="0.0345%" height="15" fill="rgb(228,134,27)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="463.50"></text></g><g><title>core::fmt::write (46 samples, 0.03%)</title><rect x="95.1218%" y="437" width="0.0345%" height="15" fill="rgb(205,55,33)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (46 samples, 0.03%)</title><rect x="95.1218%" y="421" width="0.0345%" height="15" fill="rgb(243,75,43)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (46 samples, 0.03%)</title><rect x="95.1218%" y="405" width="0.0345%" height="15" fill="rgb(223,27,42)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="415.50"></text></g><g><title>alloc::string::String::push_str (46 samples, 0.03%)</title><rect x="95.1218%" y="389" width="0.0345%" height="15" fill="rgb(232,189,33)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (46 samples, 0.03%)</title><rect x="95.1218%" y="373" width="0.0345%" height="15" fill="rgb(210,9,39)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (46 samples, 0.03%)</title><rect x="95.1218%" y="357" width="0.0345%" height="15" fill="rgb(242,85,26)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (46 samples, 0.03%)</title><rect x="95.1218%" y="341" width="0.0345%" height="15" fill="rgb(248,44,4)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (46 samples, 0.03%)</title><rect x="95.1218%" y="325" width="0.0345%" height="15" fill="rgb(250,96,46)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (46 samples, 0.03%)</title><rect x="95.1218%" y="309" width="0.0345%" height="15" fill="rgb(229,116,26)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (46 samples, 0.03%)</title><rect x="95.1218%" y="293" width="0.0345%" height="15" fill="rgb(246,94,34)" fg:x="126883" fg:w="46"/><text x="95.3718%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (41 samples, 0.03%)</title><rect x="95.1256%" y="277" width="0.0307%" height="15" fill="rgb(251,73,21)" fg:x="126888" fg:w="41"/><text x="95.3756%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.01%)</title><rect x="95.1593%" y="197" width="0.0142%" height="15" fill="rgb(254,121,25)" fg:x="126933" fg:w="19"/><text x="95.4093%" y="207.50"></text></g><g><title>__GI___libc_realloc (64 samples, 0.05%)</title><rect x="95.2065%" y="133" width="0.0480%" height="15" fill="rgb(215,161,49)" fg:x="126996" fg:w="64"/><text x="95.4565%" y="143.50"></text></g><g><title>__rdl_realloc (25 samples, 0.02%)</title><rect x="95.2545%" y="133" width="0.0187%" height="15" fill="rgb(221,43,13)" fg:x="127060" fg:w="25"/><text x="95.5045%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (19 samples, 0.01%)</title><rect x="95.2590%" y="117" width="0.0142%" height="15" fill="rgb(249,5,37)" fg:x="127066" fg:w="19"/><text x="95.5090%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (94 samples, 0.07%)</title><rect x="95.2065%" y="181" width="0.0705%" height="15" fill="rgb(226,25,44)" fg:x="126996" fg:w="94"/><text x="95.4565%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (94 samples, 0.07%)</title><rect x="95.2065%" y="165" width="0.0705%" height="15" fill="rgb(238,189,16)" fg:x="126996" fg:w="94"/><text x="95.4565%" y="175.50"></text></g><g><title>alloc::alloc::realloc (94 samples, 0.07%)</title><rect x="95.2065%" y="149" width="0.0705%" height="15" fill="rgb(251,186,8)" fg:x="126996" fg:w="94"/><text x="95.4565%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (152 samples, 0.11%)</title><rect x="95.1758%" y="197" width="0.1140%" height="15" fill="rgb(254,34,31)" fg:x="126955" fg:w="152"/><text x="95.4258%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (17 samples, 0.01%)</title><rect x="95.2770%" y="181" width="0.0127%" height="15" fill="rgb(225,215,27)" fg:x="127090" fg:w="17"/><text x="95.5270%" y="191.50"></text></g><g><title>alloc::string::String::push_str (195 samples, 0.15%)</title><rect x="95.1563%" y="325" width="0.1462%" height="15" fill="rgb(221,192,48)" fg:x="126929" fg:w="195"/><text x="95.4063%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (195 samples, 0.15%)</title><rect x="95.1563%" y="309" width="0.1462%" height="15" fill="rgb(219,137,20)" fg:x="126929" fg:w="195"/><text x="95.4063%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (195 samples, 0.15%)</title><rect x="95.1563%" y="293" width="0.1462%" height="15" fill="rgb(219,84,11)" fg:x="126929" fg:w="195"/><text x="95.4063%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (195 samples, 0.15%)</title><rect x="95.1563%" y="277" width="0.1462%" height="15" fill="rgb(224,10,23)" fg:x="126929" fg:w="195"/><text x="95.4063%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (195 samples, 0.15%)</title><rect x="95.1563%" y="261" width="0.1462%" height="15" fill="rgb(248,22,39)" fg:x="126929" fg:w="195"/><text x="95.4063%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (195 samples, 0.15%)</title><rect x="95.1563%" y="245" width="0.1462%" height="15" fill="rgb(212,154,20)" fg:x="126929" fg:w="195"/><text x="95.4063%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (195 samples, 0.15%)</title><rect x="95.1563%" y="229" width="0.1462%" height="15" fill="rgb(236,199,50)" fg:x="126929" fg:w="195"/><text x="95.4063%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (195 samples, 0.15%)</title><rect x="95.1563%" y="213" width="0.1462%" height="15" fill="rgb(211,9,17)" fg:x="126929" fg:w="195"/><text x="95.4063%" y="223.50"></text></g><g><title>core::cmp::max (17 samples, 0.01%)</title><rect x="95.2898%" y="197" width="0.0127%" height="15" fill="rgb(243,216,36)" fg:x="127107" fg:w="17"/><text x="95.5398%" y="207.50"></text></g><g><title>core::cmp::Ord::max (17 samples, 0.01%)</title><rect x="95.2898%" y="181" width="0.0127%" height="15" fill="rgb(250,2,10)" fg:x="127107" fg:w="17"/><text x="95.5398%" y="191.50"></text></g><g><title>core::cmp::max_by (17 samples, 0.01%)</title><rect x="95.2898%" y="165" width="0.0127%" height="15" fill="rgb(226,50,48)" fg:x="127107" fg:w="17"/><text x="95.5398%" y="175.50"></text></g><g><title>__GI___libc_free (360 samples, 0.27%)</title><rect x="95.3025%" y="229" width="0.2699%" height="15" fill="rgb(243,81,16)" fg:x="127124" fg:w="360"/><text x="95.5525%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1,775 samples, 1.33%)</title><rect x="95.1563%" y="357" width="1.3307%" height="15" fill="rgb(250,14,2)" fg:x="126929" fg:w="1775"/><text x="95.4063%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (1,775 samples, 1.33%)</title><rect x="95.1563%" y="341" width="1.3307%" height="15" fill="rgb(233,135,29)" fg:x="126929" fg:w="1775"/><text x="95.4063%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,580 samples, 1.18%)</title><rect x="95.3025%" y="325" width="1.1845%" height="15" fill="rgb(224,64,43)" fg:x="127124" fg:w="1580"/><text x="95.5525%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,580 samples, 1.18%)</title><rect x="95.3025%" y="309" width="1.1845%" height="15" fill="rgb(238,84,13)" fg:x="127124" fg:w="1580"/><text x="95.5525%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,580 samples, 1.18%)</title><rect x="95.3025%" y="293" width="1.1845%" height="15" fill="rgb(253,48,26)" fg:x="127124" fg:w="1580"/><text x="95.5525%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,580 samples, 1.18%)</title><rect x="95.3025%" y="277" width="1.1845%" height="15" fill="rgb(205,223,31)" fg:x="127124" fg:w="1580"/><text x="95.5525%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,580 samples, 1.18%)</title><rect x="95.3025%" y="261" width="1.1845%" height="15" fill="rgb(221,41,32)" fg:x="127124" fg:w="1580"/><text x="95.5525%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1,580 samples, 1.18%)</title><rect x="95.3025%" y="245" width="1.1845%" height="15" fill="rgb(213,158,31)" fg:x="127124" fg:w="1580"/><text x="95.5525%" y="255.50"></text></g><g><title>_int_free (1,220 samples, 0.91%)</title><rect x="95.5724%" y="229" width="0.9146%" height="15" fill="rgb(245,126,43)" fg:x="127484" fg:w="1220"/><text x="95.8224%" y="239.50"></text></g><g><title>tcache_put (130 samples, 0.10%)</title><rect x="96.3895%" y="213" width="0.0975%" height="15" fill="rgb(227,7,22)" fg:x="128574" fg:w="130"/><text x="96.6395%" y="223.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (223 samples, 0.17%)</title><rect x="96.4870%" y="341" width="0.1672%" height="15" fill="rgb(252,90,44)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (223 samples, 0.17%)</title><rect x="96.4870%" y="325" width="0.1672%" height="15" fill="rgb(253,91,0)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="335.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (223 samples, 0.17%)</title><rect x="96.4870%" y="309" width="0.1672%" height="15" fill="rgb(252,175,49)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (223 samples, 0.17%)</title><rect x="96.4870%" y="293" width="0.1672%" height="15" fill="rgb(246,150,1)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (223 samples, 0.17%)</title><rect x="96.4870%" y="277" width="0.1672%" height="15" fill="rgb(241,192,25)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (223 samples, 0.17%)</title><rect x="96.4870%" y="261" width="0.1672%" height="15" fill="rgb(239,187,11)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (223 samples, 0.17%)</title><rect x="96.4870%" y="245" width="0.1672%" height="15" fill="rgb(218,202,51)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (223 samples, 0.17%)</title><rect x="96.4870%" y="229" width="0.1672%" height="15" fill="rgb(225,176,8)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (223 samples, 0.17%)</title><rect x="96.4870%" y="213" width="0.1672%" height="15" fill="rgb(219,122,41)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (223 samples, 0.17%)</title><rect x="96.4870%" y="197" width="0.1672%" height="15" fill="rgb(248,140,20)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (223 samples, 0.17%)</title><rect x="96.4870%" y="181" width="0.1672%" height="15" fill="rgb(245,41,37)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (223 samples, 0.17%)</title><rect x="96.4870%" y="165" width="0.1672%" height="15" fill="rgb(235,82,39)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (223 samples, 0.17%)</title><rect x="96.4870%" y="149" width="0.1672%" height="15" fill="rgb(230,108,42)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="159.50"></text></g><g><title>alloc::alloc::alloc (223 samples, 0.17%)</title><rect x="96.4870%" y="133" width="0.1672%" height="15" fill="rgb(215,150,50)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="143.50"></text></g><g><title>__GI___libc_malloc (223 samples, 0.17%)</title><rect x="96.4870%" y="117" width="0.1672%" height="15" fill="rgb(233,212,5)" fg:x="128704" fg:w="223"/><text x="96.7370%" y="127.50"></text></g><g><title>tcache_get (89 samples, 0.07%)</title><rect x="96.5875%" y="101" width="0.0667%" height="15" fill="rgb(245,80,22)" fg:x="128838" fg:w="89"/><text x="96.8375%" y="111.50"></text></g><g><title>alloc::string::String::with_capacity (64 samples, 0.05%)</title><rect x="96.7081%" y="325" width="0.0480%" height="15" fill="rgb(238,129,16)" fg:x="128999" fg:w="64"/><text x="96.9581%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (278 samples, 0.21%)</title><rect x="96.7966%" y="245" width="0.2084%" height="15" fill="rgb(240,19,0)" fg:x="129117" fg:w="278"/><text x="97.0466%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (281 samples, 0.21%)</title><rect x="96.7966%" y="309" width="0.2107%" height="15" fill="rgb(232,42,35)" fg:x="129117" fg:w="281"/><text x="97.0466%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (281 samples, 0.21%)</title><rect x="96.7966%" y="293" width="0.2107%" height="15" fill="rgb(223,130,24)" fg:x="129117" fg:w="281"/><text x="97.0466%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (281 samples, 0.21%)</title><rect x="96.7966%" y="277" width="0.2107%" height="15" fill="rgb(237,16,22)" fg:x="129117" fg:w="281"/><text x="97.0466%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (281 samples, 0.21%)</title><rect x="96.7966%" y="261" width="0.2107%" height="15" fill="rgb(248,192,20)" fg:x="129117" fg:w="281"/><text x="97.0466%" y="271.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (342 samples, 0.26%)</title><rect x="96.7561%" y="325" width="0.2564%" height="15" fill="rgb(233,167,2)" fg:x="129063" fg:w="342"/><text x="97.0061%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (1,371 samples, 1.03%)</title><rect x="97.0125%" y="325" width="1.0278%" height="15" fill="rgb(252,71,44)" fg:x="129405" fg:w="1371"/><text x="97.2625%" y="335.50"></text></g><g><title>core::fmt::write (248 samples, 0.19%)</title><rect x="97.8544%" y="309" width="0.1859%" height="15" fill="rgb(238,37,47)" fg:x="130528" fg:w="248"/><text x="98.1044%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (3,913 samples, 2.93%)</title><rect x="95.1563%" y="437" width="2.9335%" height="15" fill="rgb(214,202,54)" fg:x="126929" fg:w="3913"/><text x="95.4063%" y="447.50">&lt;a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,913 samples, 2.93%)</title><rect x="95.1563%" y="421" width="2.9335%" height="15" fill="rgb(254,165,40)" fg:x="126929" fg:w="3913"/><text x="95.4063%" y="431.50">co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,913 samples, 2.93%)</title><rect x="95.1563%" y="405" width="2.9335%" height="15" fill="rgb(246,173,38)" fg:x="126929" fg:w="3913"/><text x="95.4063%" y="415.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,913 samples, 2.93%)</title><rect x="95.1563%" y="389" width="2.9335%" height="15" fill="rgb(215,3,27)" fg:x="126929" fg:w="3913"/><text x="95.4063%" y="399.50">co..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3,913 samples, 2.93%)</title><rect x="95.1563%" y="373" width="2.9335%" height="15" fill="rgb(239,169,51)" fg:x="126929" fg:w="3913"/><text x="95.4063%" y="383.50">co..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (2,138 samples, 1.60%)</title><rect x="96.4870%" y="357" width="1.6028%" height="15" fill="rgb(212,5,25)" fg:x="128704" fg:w="2138"/><text x="96.7370%" y="367.50"></text></g><g><title>alloc::fmt::format (1,915 samples, 1.44%)</title><rect x="96.6542%" y="341" width="1.4356%" height="15" fill="rgb(243,45,17)" fg:x="128927" fg:w="1915"/><text x="96.9042%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (66 samples, 0.05%)</title><rect x="98.0403%" y="325" width="0.0495%" height="15" fill="rgb(242,97,9)" fg:x="130776" fg:w="66"/><text x="98.2903%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (17 samples, 0.01%)</title><rect x="98.1048%" y="293" width="0.0127%" height="15" fill="rgb(228,71,31)" fg:x="130862" fg:w="17"/><text x="98.3548%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (14 samples, 0.01%)</title><rect x="98.1071%" y="277" width="0.0105%" height="15" fill="rgb(252,184,16)" fg:x="130865" fg:w="14"/><text x="98.3571%" y="287.50"></text></g><g><title>alloc::string::String::push_str (14 samples, 0.01%)</title><rect x="98.1071%" y="261" width="0.0105%" height="15" fill="rgb(236,169,46)" fg:x="130865" fg:w="14"/><text x="98.3571%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (14 samples, 0.01%)</title><rect x="98.1071%" y="245" width="0.0105%" height="15" fill="rgb(207,17,47)" fg:x="130865" fg:w="14"/><text x="98.3571%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.01%)</title><rect x="98.1071%" y="229" width="0.0105%" height="15" fill="rgb(206,201,28)" fg:x="130865" fg:w="14"/><text x="98.3571%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (14 samples, 0.01%)</title><rect x="98.1071%" y="213" width="0.0105%" height="15" fill="rgb(224,184,23)" fg:x="130865" fg:w="14"/><text x="98.3571%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,956 samples, 2.97%)</title><rect x="95.1563%" y="469" width="2.9657%" height="15" fill="rgb(208,139,48)" fg:x="126929" fg:w="3956"/><text x="95.4063%" y="479.50">cor..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (3,956 samples, 2.97%)</title><rect x="95.1563%" y="453" width="2.9657%" height="15" fill="rgb(208,130,10)" fg:x="126929" fg:w="3956"/><text x="95.4063%" y="463.50">&lt;al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.03%)</title><rect x="98.0898%" y="437" width="0.0322%" height="15" fill="rgb(211,213,45)" fg:x="130842" fg:w="43"/><text x="98.3398%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (43 samples, 0.03%)</title><rect x="98.0898%" y="421" width="0.0322%" height="15" fill="rgb(235,100,30)" fg:x="130842" fg:w="43"/><text x="98.3398%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (43 samples, 0.03%)</title><rect x="98.0898%" y="405" width="0.0322%" height="15" fill="rgb(206,144,31)" fg:x="130842" fg:w="43"/><text x="98.3398%" y="415.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (43 samples, 0.03%)</title><rect x="98.0898%" y="389" width="0.0322%" height="15" fill="rgb(224,200,26)" fg:x="130842" fg:w="43"/><text x="98.3398%" y="399.50"></text></g><g><title>alloc::fmt::format (43 samples, 0.03%)</title><rect x="98.0898%" y="373" width="0.0322%" height="15" fill="rgb(247,104,53)" fg:x="130842" fg:w="43"/><text x="98.3398%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (43 samples, 0.03%)</title><rect x="98.0898%" y="357" width="0.0322%" height="15" fill="rgb(220,14,17)" fg:x="130842" fg:w="43"/><text x="98.3398%" y="367.50"></text></g><g><title>core::fmt::write (43 samples, 0.03%)</title><rect x="98.0898%" y="341" width="0.0322%" height="15" fill="rgb(230,140,40)" fg:x="130842" fg:w="43"/><text x="98.3398%" y="351.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (30 samples, 0.02%)</title><rect x="98.0996%" y="325" width="0.0225%" height="15" fill="rgb(229,2,41)" fg:x="130855" fg:w="30"/><text x="98.3496%" y="335.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (27 samples, 0.02%)</title><rect x="98.1018%" y="309" width="0.0202%" height="15" fill="rgb(232,89,16)" fg:x="130858" fg:w="27"/><text x="98.3518%" y="319.50"></text></g><g><title>alloc::string::String::with_capacity (15 samples, 0.01%)</title><rect x="98.1220%" y="437" width="0.0112%" height="15" fill="rgb(247,59,52)" fg:x="130885" fg:w="15"/><text x="98.3720%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15 samples, 0.01%)</title><rect x="98.1220%" y="421" width="0.0112%" height="15" fill="rgb(226,110,21)" fg:x="130885" fg:w="15"/><text x="98.3720%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="98.1220%" y="405" width="0.0112%" height="15" fill="rgb(224,176,43)" fg:x="130885" fg:w="15"/><text x="98.3720%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="98.1220%" y="389" width="0.0112%" height="15" fill="rgb(221,73,6)" fg:x="130885" fg:w="15"/><text x="98.3720%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.01%)</title><rect x="98.1220%" y="373" width="0.0112%" height="15" fill="rgb(232,78,19)" fg:x="130885" fg:w="15"/><text x="98.3720%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="98.1220%" y="357" width="0.0112%" height="15" fill="rgb(233,112,48)" fg:x="130885" fg:w="15"/><text x="98.3720%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="98.1220%" y="341" width="0.0112%" height="15" fill="rgb(243,131,47)" fg:x="130885" fg:w="15"/><text x="98.3720%" y="351.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="98.1220%" y="325" width="0.0112%" height="15" fill="rgb(226,51,1)" fg:x="130885" fg:w="15"/><text x="98.3720%" y="335.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.01%)</title><rect x="98.1220%" y="309" width="0.0112%" height="15" fill="rgb(247,58,7)" fg:x="130885" fg:w="15"/><text x="98.3720%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.01%)</title><rect x="98.1423%" y="309" width="0.0135%" height="15" fill="rgb(209,7,32)" fg:x="130912" fg:w="18"/><text x="98.3923%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (18 samples, 0.01%)</title><rect x="98.1423%" y="293" width="0.0135%" height="15" fill="rgb(209,39,41)" fg:x="130912" fg:w="18"/><text x="98.3923%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (31 samples, 0.02%)</title><rect x="98.1363%" y="405" width="0.0232%" height="15" fill="rgb(226,182,46)" fg:x="130904" fg:w="31"/><text x="98.3863%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (26 samples, 0.02%)</title><rect x="98.1400%" y="389" width="0.0195%" height="15" fill="rgb(230,219,10)" fg:x="130909" fg:w="26"/><text x="98.3900%" y="399.50"></text></g><g><title>alloc::string::String::push_str (26 samples, 0.02%)</title><rect x="98.1400%" y="373" width="0.0195%" height="15" fill="rgb(227,175,30)" fg:x="130909" fg:w="26"/><text x="98.3900%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (26 samples, 0.02%)</title><rect x="98.1400%" y="357" width="0.0195%" height="15" fill="rgb(217,2,50)" fg:x="130909" fg:w="26"/><text x="98.3900%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (26 samples, 0.02%)</title><rect x="98.1400%" y="341" width="0.0195%" height="15" fill="rgb(229,160,0)" fg:x="130909" fg:w="26"/><text x="98.3900%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (26 samples, 0.02%)</title><rect x="98.1400%" y="325" width="0.0195%" height="15" fill="rgb(207,78,37)" fg:x="130909" fg:w="26"/><text x="98.3900%" y="335.50"></text></g><g><title>alloc::fmt::format (67 samples, 0.05%)</title><rect x="98.1220%" y="453" width="0.0502%" height="15" fill="rgb(225,57,0)" fg:x="130885" fg:w="67"/><text x="98.3720%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (52 samples, 0.04%)</title><rect x="98.1333%" y="437" width="0.0390%" height="15" fill="rgb(232,154,2)" fg:x="130900" fg:w="52"/><text x="98.3833%" y="447.50"></text></g><g><title>core::fmt::write (52 samples, 0.04%)</title><rect x="98.1333%" y="421" width="0.0390%" height="15" fill="rgb(241,212,25)" fg:x="130900" fg:w="52"/><text x="98.3833%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (113 samples, 0.08%)</title><rect x="98.2990%" y="213" width="0.0847%" height="15" fill="rgb(226,69,20)" fg:x="131121" fg:w="113"/><text x="98.5490%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (76 samples, 0.06%)</title><rect x="98.3267%" y="197" width="0.0570%" height="15" fill="rgb(247,184,54)" fg:x="131158" fg:w="76"/><text x="98.5767%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (197 samples, 0.15%)</title><rect x="98.2510%" y="245" width="0.1477%" height="15" fill="rgb(210,145,0)" fg:x="131057" fg:w="197"/><text x="98.5010%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (171 samples, 0.13%)</title><rect x="98.2705%" y="229" width="0.1282%" height="15" fill="rgb(253,82,12)" fg:x="131083" fg:w="171"/><text x="98.5205%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20 samples, 0.01%)</title><rect x="98.3837%" y="213" width="0.0150%" height="15" fill="rgb(245,42,11)" fg:x="131234" fg:w="20"/><text x="98.6337%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (20 samples, 0.01%)</title><rect x="98.3837%" y="197" width="0.0150%" height="15" fill="rgb(219,147,32)" fg:x="131234" fg:w="20"/><text x="98.6337%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (20 samples, 0.01%)</title><rect x="98.3837%" y="181" width="0.0150%" height="15" fill="rgb(246,12,7)" fg:x="131234" fg:w="20"/><text x="98.6337%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (20 samples, 0.01%)</title><rect x="98.3837%" y="165" width="0.0150%" height="15" fill="rgb(243,50,9)" fg:x="131234" fg:w="20"/><text x="98.6337%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (455 samples, 0.34%)</title><rect x="98.3987%" y="245" width="0.3411%" height="15" fill="rgb(219,149,6)" fg:x="131254" fg:w="455"/><text x="98.6487%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (431 samples, 0.32%)</title><rect x="98.4167%" y="229" width="0.3231%" height="15" fill="rgb(241,51,42)" fg:x="131278" fg:w="431"/><text x="98.6667%" y="239.50"></text></g><g><title>alloc::string::String::push_str (720 samples, 0.54%)</title><rect x="98.2210%" y="309" width="0.5398%" height="15" fill="rgb(226,128,27)" fg:x="131017" fg:w="720"/><text x="98.4710%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (720 samples, 0.54%)</title><rect x="98.2210%" y="293" width="0.5398%" height="15" fill="rgb(244,144,4)" fg:x="131017" fg:w="720"/><text x="98.4710%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (720 samples, 0.54%)</title><rect x="98.2210%" y="277" width="0.5398%" height="15" fill="rgb(221,4,13)" fg:x="131017" fg:w="720"/><text x="98.4710%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (720 samples, 0.54%)</title><rect x="98.2210%" y="261" width="0.5398%" height="15" fill="rgb(208,170,28)" fg:x="131017" fg:w="720"/><text x="98.4710%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (28 samples, 0.02%)</title><rect x="98.7398%" y="245" width="0.0210%" height="15" fill="rgb(226,131,13)" fg:x="131709" fg:w="28"/><text x="98.9898%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (28 samples, 0.02%)</title><rect x="98.7398%" y="229" width="0.0210%" height="15" fill="rgb(215,72,41)" fg:x="131709" fg:w="28"/><text x="98.9898%" y="239.50"></text></g><g><title>__rdl_dealloc (100 samples, 0.07%)</title><rect x="98.8485%" y="213" width="0.0750%" height="15" fill="rgb(243,108,20)" fg:x="131854" fg:w="100"/><text x="99.0985%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (100 samples, 0.07%)</title><rect x="98.8485%" y="197" width="0.0750%" height="15" fill="rgb(230,189,17)" fg:x="131854" fg:w="100"/><text x="99.0985%" y="207.50"></text></g><g><title>__rust_dealloc (188 samples, 0.14%)</title><rect x="98.9235%" y="213" width="0.1409%" height="15" fill="rgb(220,50,17)" fg:x="131954" fg:w="188"/><text x="99.1735%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1,245 samples, 0.93%)</title><rect x="98.2165%" y="341" width="0.9334%" height="15" fill="rgb(248,152,48)" fg:x="131011" fg:w="1245"/><text x="98.4665%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::{{closure}} (1,239 samples, 0.93%)</title><rect x="98.2210%" y="325" width="0.9289%" height="15" fill="rgb(244,91,11)" fg:x="131017" fg:w="1239"/><text x="98.4710%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (519 samples, 0.39%)</title><rect x="98.7608%" y="309" width="0.3891%" height="15" fill="rgb(220,157,5)" fg:x="131737" fg:w="519"/><text x="99.0108%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (519 samples, 0.39%)</title><rect x="98.7608%" y="293" width="0.3891%" height="15" fill="rgb(253,137,8)" fg:x="131737" fg:w="519"/><text x="99.0108%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (519 samples, 0.39%)</title><rect x="98.7608%" y="277" width="0.3891%" height="15" fill="rgb(217,137,51)" fg:x="131737" fg:w="519"/><text x="99.0108%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (519 samples, 0.39%)</title><rect x="98.7608%" y="261" width="0.3891%" height="15" fill="rgb(218,209,53)" fg:x="131737" fg:w="519"/><text x="99.0108%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (519 samples, 0.39%)</title><rect x="98.7608%" y="245" width="0.3891%" height="15" fill="rgb(249,137,25)" fg:x="131737" fg:w="519"/><text x="99.0108%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (519 samples, 0.39%)</title><rect x="98.7608%" y="229" width="0.3891%" height="15" fill="rgb(239,155,26)" fg:x="131737" fg:w="519"/><text x="99.0108%" y="239.50"></text></g><g><title>_int_free (114 samples, 0.09%)</title><rect x="99.0644%" y="213" width="0.0855%" height="15" fill="rgb(227,85,46)" fg:x="132142" fg:w="114"/><text x="99.3144%" y="223.50"></text></g><g><title>__GI___libc_malloc (37 samples, 0.03%)</title><rect x="99.3043%" y="101" width="0.0277%" height="15" fill="rgb(251,107,43)" fg:x="132462" fg:w="37"/><text x="99.5543%" y="111.50"></text></g><g><title>__rdl_alloc (80 samples, 0.06%)</title><rect x="99.3320%" y="101" width="0.0600%" height="15" fill="rgb(234,170,33)" fg:x="132499" fg:w="80"/><text x="99.5820%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (56 samples, 0.04%)</title><rect x="99.3500%" y="85" width="0.0420%" height="15" fill="rgb(206,29,35)" fg:x="132523" fg:w="56"/><text x="99.6000%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (254 samples, 0.19%)</title><rect x="99.2301%" y="197" width="0.1904%" height="15" fill="rgb(227,138,25)" fg:x="132363" fg:w="254"/><text x="99.4801%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (253 samples, 0.19%)</title><rect x="99.2308%" y="181" width="0.1897%" height="15" fill="rgb(249,131,35)" fg:x="132364" fg:w="253"/><text x="99.4808%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (253 samples, 0.19%)</title><rect x="99.2308%" y="165" width="0.1897%" height="15" fill="rgb(239,6,40)" fg:x="132364" fg:w="253"/><text x="99.4808%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (253 samples, 0.19%)</title><rect x="99.2308%" y="149" width="0.1897%" height="15" fill="rgb(246,136,47)" fg:x="132364" fg:w="253"/><text x="99.4808%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (253 samples, 0.19%)</title><rect x="99.2308%" y="133" width="0.1897%" height="15" fill="rgb(253,58,26)" fg:x="132364" fg:w="253"/><text x="99.4808%" y="143.50"></text></g><g><title>alloc::alloc::alloc (179 samples, 0.13%)</title><rect x="99.2863%" y="117" width="0.1342%" height="15" fill="rgb(237,141,10)" fg:x="132438" fg:w="179"/><text x="99.5363%" y="127.50"></text></g><g><title>__rust_alloc (38 samples, 0.03%)</title><rect x="99.3920%" y="101" width="0.0285%" height="15" fill="rgb(234,156,12)" fg:x="132579" fg:w="38"/><text x="99.6420%" y="111.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (263 samples, 0.20%)</title><rect x="99.2301%" y="325" width="0.1972%" height="15" fill="rgb(243,224,36)" fg:x="132363" fg:w="263"/><text x="99.4801%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (263 samples, 0.20%)</title><rect x="99.2301%" y="309" width="0.1972%" height="15" fill="rgb(205,229,51)" fg:x="132363" fg:w="263"/><text x="99.4801%" y="319.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (263 samples, 0.20%)</title><rect x="99.2301%" y="293" width="0.1972%" height="15" fill="rgb(223,189,4)" fg:x="132363" fg:w="263"/><text x="99.4801%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (263 samples, 0.20%)</title><rect x="99.2301%" y="277" width="0.1972%" height="15" fill="rgb(249,167,54)" fg:x="132363" fg:w="263"/><text x="99.4801%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (263 samples, 0.20%)</title><rect x="99.2301%" y="261" width="0.1972%" height="15" fill="rgb(218,34,28)" fg:x="132363" fg:w="263"/><text x="99.4801%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (263 samples, 0.20%)</title><rect x="99.2301%" y="245" width="0.1972%" height="15" fill="rgb(232,109,42)" fg:x="132363" fg:w="263"/><text x="99.4801%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (263 samples, 0.20%)</title><rect x="99.2301%" y="229" width="0.1972%" height="15" fill="rgb(248,214,46)" fg:x="132363" fg:w="263"/><text x="99.4801%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (263 samples, 0.20%)</title><rect x="99.2301%" y="213" width="0.1972%" height="15" fill="rgb(244,216,40)" fg:x="132363" fg:w="263"/><text x="99.4801%" y="223.50"></text></g><g><title>alloc::fmt::format (470 samples, 0.35%)</title><rect x="99.4272%" y="325" width="0.3524%" height="15" fill="rgb(231,226,31)" fg:x="132626" fg:w="470"/><text x="99.6772%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (2,202 samples, 1.65%)</title><rect x="98.1888%" y="421" width="1.6508%" height="15" fill="rgb(238,38,43)" fg:x="130974" fg:w="2202"/><text x="98.4388%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,202 samples, 1.65%)</title><rect x="98.1888%" y="405" width="1.6508%" height="15" fill="rgb(208,88,43)" fg:x="130974" fg:w="2202"/><text x="98.4388%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,202 samples, 1.65%)</title><rect x="98.1888%" y="389" width="1.6508%" height="15" fill="rgb(205,136,37)" fg:x="130974" fg:w="2202"/><text x="98.4388%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,175 samples, 1.63%)</title><rect x="98.2090%" y="373" width="1.6306%" height="15" fill="rgb(237,34,14)" fg:x="131001" fg:w="2175"/><text x="98.4590%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,165 samples, 1.62%)</title><rect x="98.2165%" y="357" width="1.6231%" height="15" fill="rgb(236,193,44)" fg:x="131011" fg:w="2165"/><text x="98.4665%" y="367.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (920 samples, 0.69%)</title><rect x="99.1499%" y="341" width="0.6897%" height="15" fill="rgb(231,48,10)" fg:x="132256" fg:w="920"/><text x="99.3999%" y="351.50"></text></g><g><title>core::fmt::Arguments::new_v1 (80 samples, 0.06%)</title><rect x="99.7796%" y="325" width="0.0600%" height="15" fill="rgb(213,141,34)" fg:x="133096" fg:w="80"/><text x="100.0296%" y="335.50"></text></g><g><title>alloc::fmt::format (32 samples, 0.02%)</title><rect x="99.8411%" y="357" width="0.0240%" height="15" fill="rgb(249,130,34)" fg:x="133178" fg:w="32"/><text x="100.0911%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,259 samples, 1.69%)</title><rect x="98.1723%" y="453" width="1.6935%" height="15" fill="rgb(219,42,41)" fg:x="130952" fg:w="2259"/><text x="98.4223%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (2,259 samples, 1.69%)</title><rect x="98.1723%" y="437" width="1.6935%" height="15" fill="rgb(224,100,54)" fg:x="130952" fg:w="2259"/><text x="98.4223%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.03%)</title><rect x="99.8396%" y="421" width="0.0262%" height="15" fill="rgb(229,200,27)" fg:x="133176" fg:w="35"/><text x="100.0896%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (35 samples, 0.03%)</title><rect x="99.8396%" y="405" width="0.0262%" height="15" fill="rgb(217,118,10)" fg:x="133176" fg:w="35"/><text x="100.0896%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (35 samples, 0.03%)</title><rect x="99.8396%" y="389" width="0.0262%" height="15" fill="rgb(206,22,3)" fg:x="133176" fg:w="35"/><text x="100.0896%" y="399.50"></text></g><g><title>kakuro::solvers::sum_reachable::solve_rec::{{closure}} (35 samples, 0.03%)</title><rect x="99.8396%" y="373" width="0.0262%" height="15" fill="rgb(232,163,46)" fg:x="133176" fg:w="35"/><text x="100.0896%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (21 samples, 0.02%)</title><rect x="99.8658%" y="453" width="0.0157%" height="15" fill="rgb(206,95,13)" fg:x="133211" fg:w="21"/><text x="100.1158%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (21 samples, 0.02%)</title><rect x="99.8658%" y="437" width="0.0157%" height="15" fill="rgb(253,154,18)" fg:x="133211" fg:w="21"/><text x="100.1158%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (21 samples, 0.02%)</title><rect x="99.8658%" y="421" width="0.0157%" height="15" fill="rgb(219,32,23)" fg:x="133211" fg:w="21"/><text x="100.1158%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="99.8658%" y="405" width="0.0157%" height="15" fill="rgb(230,191,45)" fg:x="133211" fg:w="21"/><text x="100.1158%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.02%)</title><rect x="99.8658%" y="389" width="0.0157%" height="15" fill="rgb(229,64,36)" fg:x="133211" fg:w="21"/><text x="100.1158%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.02%)</title><rect x="99.8658%" y="373" width="0.0157%" height="15" fill="rgb(205,129,25)" fg:x="133211" fg:w="21"/><text x="100.1158%" y="383.50"></text></g><g><title>_int_free (21 samples, 0.02%)</title><rect x="99.8658%" y="357" width="0.0157%" height="15" fill="rgb(254,112,7)" fg:x="133211" fg:w="21"/><text x="100.1158%" y="367.50"></text></g><g><title>kakuro::log::log (72 samples, 0.05%)</title><rect x="99.8816%" y="453" width="0.0540%" height="15" fill="rgb(226,53,48)" fg:x="133232" fg:w="72"/><text x="100.1316%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (72 samples, 0.05%)</title><rect x="99.8816%" y="437" width="0.0540%" height="15" fill="rgb(214,153,38)" fg:x="133232" fg:w="72"/><text x="100.1316%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (72 samples, 0.05%)</title><rect x="99.8816%" y="421" width="0.0540%" height="15" fill="rgb(243,101,7)" fg:x="133232" fg:w="72"/><text x="100.1316%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (72 samples, 0.05%)</title><rect x="99.8816%" y="405" width="0.0540%" height="15" fill="rgb(240,140,22)" fg:x="133232" fg:w="72"/><text x="100.1316%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.05%)</title><rect x="99.8816%" y="389" width="0.0540%" height="15" fill="rgb(235,114,2)" fg:x="133232" fg:w="72"/><text x="100.1316%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (72 samples, 0.05%)</title><rect x="99.8816%" y="373" width="0.0540%" height="15" fill="rgb(242,59,12)" fg:x="133232" fg:w="72"/><text x="100.1316%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (72 samples, 0.05%)</title><rect x="99.8816%" y="357" width="0.0540%" height="15" fill="rgb(252,134,9)" fg:x="133232" fg:w="72"/><text x="100.1316%" y="367.50"></text></g><g><title>_int_free (72 samples, 0.05%)</title><rect x="99.8816%" y="341" width="0.0540%" height="15" fill="rgb(236,4,44)" fg:x="133232" fg:w="72"/><text x="100.1316%" y="351.50"></text></g><g><title>unlink_chunk (39 samples, 0.03%)</title><rect x="99.9063%" y="325" width="0.0292%" height="15" fill="rgb(254,172,41)" fg:x="133265" fg:w="39"/><text x="100.1563%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (15 samples, 0.01%)</title><rect x="99.9423%" y="437" width="0.0112%" height="15" fill="rgb(244,63,20)" fg:x="133313" fg:w="15"/><text x="100.1923%" y="447.50"></text></g><g><title>alloc::fmt::format (26 samples, 0.02%)</title><rect x="99.9558%" y="437" width="0.0195%" height="15" fill="rgb(250,73,31)" fg:x="133331" fg:w="26"/><text x="100.2058%" y="447.50"></text></g><g><title>[unknown] (133,380 samples, 99.99%)</title><rect x="0.0022%" y="1141" width="99.9925%" height="15" fill="rgb(241,38,36)" fg:x="3" fg:w="133380"/><text x="0.2522%" y="1151.50">[unknown]</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="1125" width="92.2318%" height="15" fill="rgb(245,211,2)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="1135.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="1109" width="92.2318%" height="15" fill="rgb(206,120,28)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="1119.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="1093" width="92.2318%" height="15" fill="rgb(211,59,34)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="1103.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="1077" width="92.2318%" height="15" fill="rgb(233,168,5)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="1087.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="1061" width="92.2318%" height="15" fill="rgb(234,33,13)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="1071.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="1045" width="92.2318%" height="15" fill="rgb(231,150,26)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="1055.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="1029" width="92.2318%" height="15" fill="rgb(217,191,4)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="1039.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="1013" width="92.2318%" height="15" fill="rgb(246,198,38)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="1023.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="997" width="92.2318%" height="15" fill="rgb(245,64,37)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="1007.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="981" width="92.2318%" height="15" fill="rgb(250,30,36)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="991.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="965" width="92.2318%" height="15" fill="rgb(217,86,53)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="975.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="949" width="92.2318%" height="15" fill="rgb(228,157,16)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="959.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="933" width="92.2318%" height="15" fill="rgb(217,59,31)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="943.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="917" width="92.2318%" height="15" fill="rgb(237,138,41)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="927.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="901" width="92.2318%" height="15" fill="rgb(227,91,49)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="911.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="885" width="92.2318%" height="15" fill="rgb(247,21,44)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="895.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="869" width="92.2318%" height="15" fill="rgb(219,210,51)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="879.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="853" width="92.2318%" height="15" fill="rgb(209,140,6)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="863.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="837" width="92.2318%" height="15" fill="rgb(221,188,24)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="847.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="821" width="92.2318%" height="15" fill="rgb(232,154,20)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="831.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="805" width="92.2318%" height="15" fill="rgb(244,137,50)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="815.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="789" width="92.2318%" height="15" fill="rgb(225,185,43)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="799.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="773" width="92.2318%" height="15" fill="rgb(213,205,38)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="783.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="757" width="92.2318%" height="15" fill="rgb(236,73,12)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="767.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="741" width="92.2318%" height="15" fill="rgb(235,219,13)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="751.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="725" width="92.2318%" height="15" fill="rgb(218,59,36)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="735.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="709" width="92.2318%" height="15" fill="rgb(205,110,39)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="719.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="693" width="92.2318%" height="15" fill="rgb(218,206,42)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="703.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="677" width="92.2318%" height="15" fill="rgb(248,125,24)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="687.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="661" width="92.2318%" height="15" fill="rgb(242,28,27)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="671.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="645" width="92.2318%" height="15" fill="rgb(216,228,15)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="655.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="629" width="92.2318%" height="15" fill="rgb(235,116,46)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="639.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="613" width="92.2318%" height="15" fill="rgb(224,18,32)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="623.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="597" width="92.2318%" height="15" fill="rgb(252,5,12)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="607.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="581" width="92.2318%" height="15" fill="rgb(251,36,5)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="591.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="565" width="92.2318%" height="15" fill="rgb(217,53,14)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="575.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="549" width="92.2318%" height="15" fill="rgb(215,86,45)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="559.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (123,028 samples, 92.23%)</title><rect x="7.7630%" y="533" width="92.2318%" height="15" fill="rgb(242,169,11)" fg:x="10355" fg:w="123028"/><text x="8.0130%" y="543.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (112,471 samples, 84.32%)</title><rect x="15.6773%" y="517" width="84.3174%" height="15" fill="rgb(211,213,45)" fg:x="20912" fg:w="112471"/><text x="15.9273%" y="527.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (54,543 samples, 40.89%)</title><rect x="59.1049%" y="501" width="40.8899%" height="15" fill="rgb(205,88,11)" fg:x="78840" fg:w="54543"/><text x="59.3549%" y="511.50">kakuro::solvers::sum_reachable::solve_rec</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (6,500 samples, 4.87%)</title><rect x="95.1218%" y="485" width="4.8729%" height="15" fill="rgb(252,69,26)" fg:x="126883" fg:w="6500"/><text x="95.3718%" y="495.50">kakuro..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (2,498 samples, 1.87%)</title><rect x="98.1220%" y="469" width="1.8727%" height="15" fill="rgb(246,123,37)" fg:x="130885" fg:w="2498"/><text x="98.3720%" y="479.50">k..</text></g><g><title>kakuro::solvers::sum_reachable::solve_rec (79 samples, 0.06%)</title><rect x="99.9355%" y="453" width="0.0592%" height="15" fill="rgb(212,205,5)" fg:x="133304" fg:w="79"/><text x="100.1855%" y="463.50"></text></g><g><title>all (133,390 samples, 100%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(253,148,0)" fg:x="0" fg:w="133390"/><text x="0.2500%" y="1183.50"></text></g><g><title>kakuro (133,390 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(239,22,4)" fg:x="0" fg:w="133390"/><text x="0.2500%" y="1167.50">kakuro</text></g></svg></svg>